
BallBalancer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d0e8  0800d0e8  0001d0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b0  0800d1b0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b0  0800d1b0  0001d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b8  0800d1b8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d1b8  0800d1b8  0001d1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d1c0  0800d1c0  0001d1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800d1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000185c  200001d4  0800d39c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a30  0800d39c  00021a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028617  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f69  00000000  00000000  0004885e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d28  00000000  00000000  0004e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001644  00000000  00000000  000504f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263ac  00000000  00000000  00051b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025db8  00000000  00000000  00077ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4fd4  00000000  00000000  0009dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d40  00000000  00000000  00182c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d0d0 	.word	0x0800d0d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800d0d0 	.word	0x0800d0d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_ZN15ApplicationMainC1Ev>:

#include "ApplicationMain.h"
#include "main.h"


ApplicationMain::ApplicationMain()
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fda4 	bl	800106c <_ZN11TaskhandlerC1Ev>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3308      	adds	r3, #8
 8000528:	4957      	ldr	r1, [pc, #348]	; (8000688 <_ZN15ApplicationMainC1Ev+0x174>)
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fb52 	bl	8000bd4 <_ZN7AMT102VC1EP17TIM_HandleTypeDef>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3320      	adds	r3, #32
 8000534:	4955      	ldr	r1, [pc, #340]	; (800068c <_ZN15ApplicationMainC1Ev+0x178>)
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb4c 	bl	8000bd4 <_ZN7AMT102VC1EP17TIM_HandleTypeDef>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3338      	adds	r3, #56	; 0x38
 8000540:	2210      	movs	r2, #16
 8000542:	4953      	ldr	r1, [pc, #332]	; (8000690 <_ZN15ApplicationMainC1Ev+0x17c>)
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fbfb 	bl	8000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3360      	adds	r3, #96	; 0x60
 800054e:	2240      	movs	r2, #64	; 0x40
 8000550:	494f      	ldr	r1, [pc, #316]	; (8000690 <_ZN15ApplicationMainC1Ev+0x17c>)
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fbf4 	bl	8000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800055e:	2300      	movs	r3, #0
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <_ZN15ApplicationMainC1Ev+0x180>)
 8000564:	2220      	movs	r2, #32
 8000566:	494a      	ldr	r1, [pc, #296]	; (8000690 <_ZN15ApplicationMainC1Ev+0x17c>)
 8000568:	f000 fbd0 	bl	8000d0c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	33b0      	adds	r3, #176	; 0xb0
 8000570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000574:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fbe1 	bl	8000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8000584:	230c      	movs	r3, #12
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4b43      	ldr	r3, [pc, #268]	; (8000698 <_ZN15ApplicationMainC1Ev+0x184>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	4940      	ldr	r1, [pc, #256]	; (8000690 <_ZN15ApplicationMainC1Ev+0x17c>)
 800058e:	f000 fbbd 	bl	8000d0c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000598:	2208      	movs	r2, #8
 800059a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fbce 	bl	8000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80005aa:	2220      	movs	r2, #32
 80005ac:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fbc5 	bl	8000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 80005bc:	2304      	movs	r3, #4
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4b35      	ldr	r3, [pc, #212]	; (8000698 <_ZN15ApplicationMainC1Ev+0x184>)
 80005c2:	2210      	movs	r2, #16
 80005c4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005c8:	f000 fba0 	bl	8000d0c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fbb1 	bl	8000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80005e4:	2300      	movs	r3, #0
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <_ZN15ApplicationMainC1Ev+0x184>)
 80005ea:	2240      	movs	r2, #64	; 0x40
 80005ec:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005f0:	f000 fb8c 	bl	8000d0c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f103 0560 	add.w	r5, r3, #96	; 0x60
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3388      	adds	r3, #136	; 0x88
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	3238      	adds	r2, #56	; 0x38
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	462b      	mov	r3, r5
 800061a:	4622      	mov	r2, r4
 800061c:	f000 f8dc 	bl	80007d8 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_S1_>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f503 700c 	add.w	r0, r3, #560	; 0x230
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f503 7594 	add.w	r5, r3, #296	; 0x128
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	462b      	mov	r3, r5
 800064a:	4622      	mov	r2, r4
 800064c:	f000 f8c4 	bl	80007d8 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_S1_>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f503 71e4 	add.w	r1, r3, #456	; 0x1c8
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3308      	adds	r3, #8
 8000660:	461a      	mov	r2, r3
 8000662:	f000 f9a1 	bl	80009a8 <_ZN4HomeC1EP12DriveControlP8IEncoder>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3320      	adds	r3, #32
 8000676:	461a      	mov	r2, r3
 8000678:	f000 f996 	bl	80009a8 <_ZN4HomeC1EP12DriveControlP8IEncoder>
{
	// TODO Auto-generated constructor stub
}
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop
 8000688:	2000050c 	.word	0x2000050c
 800068c:	20000558 	.word	0x20000558
 8000690:	48000400 	.word	0x48000400
 8000694:	2000063c 	.word	0x2000063c
 8000698:	200005a4 	.word	0x200005a4

0800069c <_ZN15ApplicationMain7StartUpEv>:

void ApplicationMain::StartUp()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2102      	movs	r1, #2
 80006a8:	481a      	ldr	r0, [pc, #104]	; (8000714 <_ZN15ApplicationMain7StartUpEv+0x78>)
 80006aa:	f002 ff81 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2101      	movs	r1, #1
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <_ZN15ApplicationMain7StartUpEv+0x78>)
 80006b4:	f002 ff7c 	bl	80035b0 <HAL_GPIO_WritePin>


	HAL_TIM_Base_MspInit(&htim1);	//Encoder 1
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <_ZN15ApplicationMain7StartUpEv+0x7c>)
 80006ba:	f001 faad 	bl	8001c18 <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim2);	//Encoder 2
 80006be:	4817      	ldr	r0, [pc, #92]	; (800071c <_ZN15ApplicationMain7StartUpEv+0x80>)
 80006c0:	f001 faaa 	bl	8001c18 <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim3);	//PWM
 80006c4:	4816      	ldr	r0, [pc, #88]	; (8000720 <_ZN15ApplicationMain7StartUpEv+0x84>)
 80006c6:	f001 faa7 	bl	8001c18 <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim4);	//task handler timer
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <_ZN15ApplicationMain7StartUpEv+0x88>)
 80006cc:	f001 faa4 	bl	8001c18 <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim17);	//PWM
 80006d0:	4815      	ldr	r0, [pc, #84]	; (8000728 <_ZN15ApplicationMain7StartUpEv+0x8c>)
 80006d2:	f001 faa1 	bl	8001c18 <HAL_TIM_Base_MspInit>


	HAL_TIM_Base_Start_IT(&htim4);
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <_ZN15ApplicationMain7StartUpEv+0x88>)
 80006d8:	f005 fcfa 	bl	80060d0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80006dc:	213c      	movs	r1, #60	; 0x3c
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <_ZN15ApplicationMain7StartUpEv+0x7c>)
 80006e0:	f005 fff4 	bl	80066cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80006e4:	213c      	movs	r1, #60	; 0x3c
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <_ZN15ApplicationMain7StartUpEv+0x80>)
 80006e8:	f005 fff0 	bl	80066cc <HAL_TIM_Encoder_Start>

	driveCoontrolXAxis.Init();
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f895 	bl	8000822 <_ZN12DriveControl4InitEv>
	driveCoontrolYAxis.Init();
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f88f 	bl	8000822 <_ZN12DriveControl4InitEv>

	//ToDo do some initialization here

	Main();
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 f811 	bl	800072c <_ZN15ApplicationMain4MainEv>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	48001400 	.word	0x48001400
 8000718:	2000050c 	.word	0x2000050c
 800071c:	20000558 	.word	0x20000558
 8000720:	200005a4 	.word	0x200005a4
 8000724:	200005f0 	.word	0x200005f0
 8000728:	2000063c 	.word	0x2000063c

0800072c <_ZN15ApplicationMain4MainEv>:

void ApplicationMain::Main()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	while (true) 
	{
		if(taskhandler.IsLedTask())
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fd3e 	bl	80011b8 <_ZN11Taskhandler9IsLedTaskEv>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <_ZN15ApplicationMain4MainEv+0x28>
		{
			HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 8000742:	2101      	movs	r1, #1
 8000744:	4823      	ldr	r0, [pc, #140]	; (80007d4 <_ZN15ApplicationMain4MainEv+0xa8>)
 8000746:	f002 ff4b 	bl	80035e0 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2102      	movs	r1, #2
 800074e:	4821      	ldr	r0, [pc, #132]	; (80007d4 <_ZN15ApplicationMain4MainEv+0xa8>)
 8000750:	f002 ff2e 	bl	80035b0 <HAL_GPIO_WritePin>
		}

		if(taskhandler.IsDriveTask())
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fd0c 	bl	8001174 <_ZN11Taskhandler11IsDriveTaskEv>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d025      	beq.n	80007ae <_ZN15ApplicationMain4MainEv+0x82>
		{
			if(!driveCoontrolXAxis.IsHomingSttus())
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f8f2 	bl	8000952 <_ZN12DriveControl13IsHomingSttusEv>
 800076e:	4603      	mov	r3, r0
 8000770:	f083 0301 	eor.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <_ZN15ApplicationMain4MainEv+0x5c>
			{
				HomeDriveX.HomeDrive(RotationDirection::Left);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f929 	bl	80009da <_ZN4Home9HomeDriveE17RotationDirection>
			}

			if(!driveCoontrolYAxis.IsHomingSttus())
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f8df 	bl	8000952 <_ZN12DriveControl13IsHomingSttusEv>
 8000794:	4603      	mov	r3, r0
 8000796:	f083 0301 	eor.w	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <_ZN15ApplicationMain4MainEv+0x82>
			{
				HomeDriveY.HomeDrive(RotationDirection::Right);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80007a6:	2102      	movs	r1, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f916 	bl	80009da <_ZN4Home9HomeDriveE17RotationDirection>
			}
		}

		if(taskhandler.IsEncoderTask()){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fcf0 	bl	8001196 <_ZN11Taskhandler13IsEncoderTaskEv>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0bb      	beq.n	8000734 <_ZN15ApplicationMain4MainEv+0x8>
			encoder1.Update();
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3308      	adds	r3, #8
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fa3a 	bl	8000c3a <_ZN7AMT102V6UpdateEv>
			encoder2.Update();
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3320      	adds	r3, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa35 	bl	8000c3a <_ZN7AMT102V6UpdateEv>
		if(taskhandler.IsLedTask())
 80007d0:	e7b0      	b.n	8000734 <_ZN15ApplicationMain4MainEv+0x8>
 80007d2:	bf00      	nop
 80007d4:	48001400 	.word	0x48001400

080007d8 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_S1_>:
#include "DriveControl.h"


DriveControl::DriveControl(IOHandle* enLeft, IOHandle* inLeft, IOHandle* enRight, IOHandle* inRight, IOHandle* refSwitch)
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
{
	_enLeft = enLeft;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	64da      	str	r2, [r3, #76]	; 0x4c
	_inLeft = inLeft;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	651a      	str	r2, [r3, #80]	; 0x50
	_enRight = enRight;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	655a      	str	r2, [r3, #84]	; 0x54
	_inRight = inRight;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	659a      	str	r2, [r3, #88]	; 0x58
	_refSwitch = refSwitch;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	69fa      	ldr	r2, [r7, #28]
 8000802:	65da      	str	r2, [r3, #92]	; 0x5c
	_homingSttus = false;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	_rotationDirection = RotationDirection::Undefined;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <_ZN12DriveControl4InitEv>:

void DriveControl::Init()
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	_enLeft->SetFunction(IOFunction::Output);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fb1c 	bl	8000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>
	_enRight->SetFunction(IOFunction::Output);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fb16 	bl	8000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>
	_enLeft->Write(true);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	2101      	movs	r1, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fa92 	bl	8000d72 <_ZN8IOHandle5WriteEb>
	_enRight->Write(true);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fa8c 	bl	8000d72 <_ZN8IOHandle5WriteEb>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_ZN12DriveControl9DriveLeftEt>:


void DriveControl::DriveLeft(uint16_t speed)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	807b      	strh	r3, [r7, #2]
	if (_rotationDirection != RotationDirection::Left) 
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000874:	2b01      	cmp	r3, #1
 8000876:	d015      	beq.n	80008a4 <_ZN12DriveControl9DriveLeftEt+0x42>
	{
		_inLeft->SetFunction(IOFunction::PWM);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800087c:	2103      	movs	r1, #3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 faf5 	bl	8000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->SetFunction(IOFunction::Output);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f000 faef 	bl	8000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->Write(false);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa6b 	bl	8000d72 <_ZN8IOHandle5WriteEb>
		_rotationDirection = RotationDirection::Left;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2201      	movs	r2, #1
 80008a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
	_inLeft->SetPWM(speed);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008a8:	887a      	ldrh	r2, [r7, #2]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fa7f 	bl	8000db0 <_ZN8IOHandle6SetPWMEm>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_ZN12DriveControl10DriveRightEt>:

void DriveControl::DriveRight(uint16_t speed)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	807b      	strh	r3, [r7, #2]
	if (_rotationDirection != RotationDirection::Right)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d015      	beq.n	80008fc <_ZN12DriveControl10DriveRightEt+0x42>
	{
		_inLeft->SetFunction(IOFunction::Output);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fac9 	bl	8000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->SetFunction(IOFunction::PWM);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e0:	2103      	movs	r1, #3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fac3 	bl	8000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inLeft->Write(false);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fa3f 	bl	8000d72 <_ZN8IOHandle5WriteEb>
		_rotationDirection = RotationDirection::Right;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2202      	movs	r2, #2
 80008f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
	_inRight->SetPWM(speed);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	887a      	ldrh	r2, [r7, #2]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fa53 	bl	8000db0 <_ZN8IOHandle6SetPWMEm>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_ZN12DriveControl9DriveStopEv>:

void DriveControl::DriveStop()
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
	_inRight->SetPWM(0);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fa45 	bl	8000db0 <_ZN8IOHandle6SetPWMEm>
	_inLeft->SetPWM(0);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fa3f 	bl	8000db0 <_ZN8IOHandle6SetPWMEm>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_ZN12DriveControl12GetRefSwitchEv>:



IOHandle* DriveControl::GetRefSwitch()
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	return this->_refSwitch;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_ZN12DriveControl13IsHomingSttusEv>:

bool DriveControl::IsHomingSttus()
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	return _homingSttus;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN12DriveControl14SetHomingSttusEb>:

void DriveControl::SetHomingSttus(bool homingSttus) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
	_homingSttus = homingSttus;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	78fa      	ldrb	r2, [r7, #3]
 800097c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_ZN4HomeC1EP12DriveControlP8IEncoder>:

#include "Home.h"
#include "math.h"


Home::Home( DriveControl* driveControl, IEncoder* encoder)
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
{
	_currentHomingState = HomingState::DriveToSwitch;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
	_nextHomingState = HomingState::DriveToSwitch;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2200      	movs	r2, #0
 80009be:	705a      	strb	r2, [r3, #1]
	_encoder = encoder;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	605a      	str	r2, [r3, #4]
	_driveControl = driveControl;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	609a      	str	r2, [r3, #8]
}
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_ZN4Home9HomeDriveE17RotationDirection>:

void Home::HomeDrive(RotationDirection rotationDirection)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]

	switch (_currentHomingState) {
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <_ZN4Home9HomeDriveE17RotationDirection+0x1a>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d01a      	beq.n	8000a28 <_ZN4Home9HomeDriveE17RotationDirection+0x4e>
 80009f2:	e030      	b.n	8000a56 <_ZN4Home9HomeDriveE17RotationDirection+0x7c>
		case HomingState::DriveToSwitch:
			if(DriveToSwitchPos(rotationDirection))
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	4619      	mov	r1, r3
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f83b 	bl	8000a74 <_ZN4Home16DriveToSwitchPosE17RotationDirection>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d02c      	beq.n	8000a5e <_ZN4Home9HomeDriveE17RotationDirection+0x84>
			{
				_driveControl->DriveStop();
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff82 	bl	8000912 <_ZN12DriveControl9DriveStopEv>
				_encoder->ResetValue();
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3310      	adds	r3, #16
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	4798      	blx	r3
				_nextHomingState = HomingState::DriveToCenterPos;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2201      	movs	r2, #1
 8000a24:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000a26:	e01a      	b.n	8000a5e <_ZN4Home9HomeDriveE17RotationDirection+0x84>
		case HomingState::DriveToCenterPos:
			if(DriveToCenterPos(rotationDirection))
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f863 	bl	8000af8 <_ZN4Home16DriveToCenterPosE17RotationDirection>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d014      	beq.n	8000a62 <_ZN4Home9HomeDriveE17RotationDirection+0x88>
			{
				_driveControl->DriveStop();
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff68 	bl	8000912 <_ZN12DriveControl9DriveStopEv>
				_driveControl->SetHomingSttus(true);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2101      	movs	r1, #1
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff8f 	bl	800096c <_ZN12DriveControl14SetHomingSttusEb>
				_nextHomingState = HomingState::DriveToSwitch;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000a54:	e005      	b.n	8000a62 <_ZN4Home9HomeDriveE17RotationDirection+0x88>
		default:
			_nextHomingState = HomingState::DriveToSwitch;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	705a      	strb	r2, [r3, #1]
			break;
 8000a5c:	e002      	b.n	8000a64 <_ZN4Home9HomeDriveE17RotationDirection+0x8a>
			break;
 8000a5e:	bf00      	nop
 8000a60:	e000      	b.n	8000a64 <_ZN4Home9HomeDriveE17RotationDirection+0x8a>
			break;
 8000a62:	bf00      	nop
	}

	_currentHomingState = _nextHomingState;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	785a      	ldrb	r2, [r3, #1]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_ZN4Home16DriveToSwitchPosE17RotationDirection>:

bool Home::DriveToSwitchPos(RotationDirection rotationDirection)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
	IOHandle* refSwitch = _driveControl->GetRefSwitch();
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff58 	bl	800093a <_ZN12DriveControl12GetRefSwitchEv>
 8000a8a:	60f8      	str	r0, [r7, #12]
	if(HAL_GPIO_ReadPin(refSwitch->GetPort(), refSwitch->GetPin()) == GPIO_PIN_SET)
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f000 fae1 	bl	8001054 <_ZN8IOHandle7GetPortEv>
 8000a92:	4604      	mov	r4, r0
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f000 fad1 	bl	800103c <_ZN8IOHandle6GetPinEv>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	f002 fd6d 	bl	8003580 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x52>
	{
		_driveControl->DriveLeft(0);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fed0 	bl	8000862 <_ZN12DriveControl9DriveLeftEt>
		return true;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e014      	b.n	8000af0 <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x7c>
	}

	if(rotationDirection == RotationDirection::Left)
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d106      	bne.n	8000ada <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x66>
	{
		_driveControl->DriveLeft(speed);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fec4 	bl	8000862 <_ZN12DriveControl9DriveLeftEt>
	}

	if(rotationDirection == RotationDirection::Right)
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d106      	bne.n	8000aee <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x7a>
	{
		_driveControl->DriveRight(speed);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fee6 	bl	80008ba <_ZN12DriveControl10DriveRightEt>
	}

	return false;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <_ZN4Home16DriveToCenterPosE17RotationDirection>:

bool Home::DriveToCenterPos(RotationDirection rotationDirection)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	if(abs(_encoder->GetValue()) > 63000)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4610      	mov	r0, r2
 8000b14:	4798      	blx	r3
 8000b16:	4603      	mov	r3, r0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff37 	bl	800098c <_ZSt3absl>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f24f 6218 	movw	r2, #63000	; 0xf618
 8000b24:	4293      	cmp	r3, r2
 8000b26:	bfcc      	ite	gt
 8000b28:	2301      	movgt	r3, #1
 8000b2a:	2300      	movle	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <_ZN4Home16DriveToCenterPosE17RotationDirection+0x4a>
	{
		_driveControl->DriveLeft(0);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe92 	bl	8000862 <_ZN12DriveControl9DriveLeftEt>
		return true;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e014      	b.n	8000b6c <_ZN4Home16DriveToCenterPosE17RotationDirection+0x74>
	}

	if(rotationDirection == RotationDirection::Right)
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d106      	bne.n	8000b56 <_ZN4Home16DriveToCenterPosE17RotationDirection+0x5e>
	{
		_driveControl->DriveLeft(speed);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe86 	bl	8000862 <_ZN12DriveControl9DriveLeftEt>
	}

	if(rotationDirection == RotationDirection::Left)
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d106      	bne.n	8000b6a <_ZN4Home16DriveToCenterPosE17RotationDirection+0x72>
	{
		_driveControl->DriveRight(speed);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fea8 	bl	80008ba <_ZN12DriveControl10DriveRightEt>
	}

	return false;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN8IEncoderD1Ev>:
#include "stdint.h"

class IEncoder
{
    public:
		virtual ~IEncoder() {};
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN8IEncoderD1Ev+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	0800d158 	.word	0x0800d158

08000b94 <_ZN8IEncoderD0Ev>:
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ffe9 	bl	8000b74 <_ZN8IEncoderD1Ev>
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f00c fa01 	bl	800cfac <_ZdlPvj>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_ZN8IEncoderC1Ev>:
class IEncoder
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <_ZN8IEncoderC1Ev+0x1c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	0800d158 	.word	0x0800d158

08000bd4 <_ZN7AMT102VC1EP17TIM_HandleTypeDef>:
#include "AMT102V.h"

AMT102V::AMT102V(TIM_HandleTypeDef* timer)
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffe7 	bl	8000bb4 <_ZN8IEncoderC1Ev>
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_ZN7AMT102VC1EP17TIM_HandleTypeDef+0x28>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	601a      	str	r2, [r3, #0]
{
	this->timer = timer;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
}
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	0800d138 	.word	0x0800d138

08000c00 <_ZN7AMT102V8SetValueEl>:

void AMT102V::SetValue(int32_t value)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	encoderValue = value;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	615a      	str	r2, [r3, #20]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_ZN7AMT102V10ResetValueEv>:

void AMT102V::ResetValue()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	SetValue(0);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	330c      	adds	r3, #12
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	4798      	blx	r3
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_ZN7AMT102V6UpdateEv>:

void AMT102V::Update()
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	currentValue = timer->Instance->CNT;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
	deltaValue = currentValue - lastValue;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	1ad2      	subs	r2, r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	611a      	str	r2, [r3, #16]

	//forward overflow
	if (deltaValue < -32768)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000c66:	da06      	bge.n	8000c76 <_ZN7AMT102V6UpdateEv+0x3c>
	{
		deltaValue = (deltaValue + 65535);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000c70:	33ff      	adds	r3, #255	; 0xff
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	6113      	str	r3, [r2, #16]
	}

	//backwards overflow
	if (deltaValue > 32768)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c7e:	dd06      	ble.n	8000c8e <_ZN7AMT102V6UpdateEv+0x54>
	{
		deltaValue = (deltaValue - 65535);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000c88:	3bff      	subs	r3, #255	; 0xff
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	6113      	str	r3, [r2, #16]
	}

	encoderValue += deltaValue;				//Increase the encoder value by the difference
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	441a      	add	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]
	lastValue = currentValue;						//previous value = current value
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	60da      	str	r2, [r3, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_ZN7AMT102V8GetValueEv>:

int32_t AMT102V::GetValue()
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	return encoderValue;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZN7AMT102VD1Ev>:
#ifndef SRC_AMT102V_H_
#define SRC_AMT102V_H_

#include "../IEncoder.h"

class AMT102V: public IEncoder
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_ZN7AMT102VD1Ev+0x20>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff4b 	bl	8000b74 <_ZN8IEncoderD1Ev>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0800d138 	.word	0x0800d138

08000cec <_ZN7AMT102VD0Ev>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ffe7 	bl	8000cc8 <_ZN7AMT102VD1Ev>
 8000cfa:	2118      	movs	r1, #24
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f00c f955 	bl	800cfac <_ZdlPvj>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>:
#include "IOHandle.h"
#include <stm32g4xx_hal.h>

IOHandle::IOHandle(GPIO_TypeDef* port, uint32_t pin, TIM_HandleTypeDef* timer, uint32_t channel)
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
{
     _port = port;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	605a      	str	r2, [r3, #4]
     _pin = pin;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	609a      	str	r2, [r3, #8]
     _timer = timer;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	60da      	str	r2, [r3, #12]
     _channel = channel;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	611a      	str	r2, [r3, #16]
}
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_ZN8IOHandleC1EP12GPIO_TypeDefm>:

IOHandle::IOHandle(GPIO_TypeDef* port, uint32_t pin)
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
{
     _port = port;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	605a      	str	r2, [r3, #4]
     _pin = pin;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	609a      	str	r2, [r3, #8]
     _timer = nullptr;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
     _channel = 0;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
}
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_ZN8IOHandle5WriteEb>:

void IOHandle::Write(bool status)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]
     if (_IoFunction != IOFunction::Output)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d110      	bne.n	8000da8 <_ZN8IOHandle5WriteEb+0x36>
     {
          return;
     }

     GPIO_PinState state = (status == true ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <_ZN8IOHandle5WriteEb+0x1e>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <_ZN8IOHandle5WriteEb+0x20>
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
     HAL_GPIO_WritePin(_port, _pin, state);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6858      	ldr	r0, [r3, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f002 fc05 	bl	80035b0 <HAL_GPIO_WritePin>
 8000da6:	e000      	b.n	8000daa <_ZN8IOHandle5WriteEb+0x38>
          return;
 8000da8:	bf00      	nop
}
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_ZN8IOHandle6SetPWMEm>:
          HAL_TIM_PWM_Stop(_timer, _channel);
     }
}

void IOHandle::SetPWM(uint32_t pwm)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
     if (!IsPWMFunction())
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f842 	bl	8000e44 <_ZN8IOHandle13IsPWMFunctionEv>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d137      	bne.n	8000e3c <_ZN8IOHandle6SetPWMEm+0x8c>
     {
          return;
     }

     __HAL_TIM_SET_COMPARE(_timer, _channel, pwm);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <_ZN8IOHandle6SetPWMEm+0x30>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dde:	e02e      	b.n	8000e3e <_ZN8IOHandle6SetPWMEm+0x8e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d105      	bne.n	8000df4 <_ZN8IOHandle6SetPWMEm+0x44>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
 8000df2:	e024      	b.n	8000e3e <_ZN8IOHandle6SetPWMEm+0x8e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d105      	bne.n	8000e08 <_ZN8IOHandle6SetPWMEm+0x58>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e06:	e01a      	b.n	8000e3e <_ZN8IOHandle6SetPWMEm+0x8e>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d105      	bne.n	8000e1c <_ZN8IOHandle6SetPWMEm+0x6c>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
 8000e1a:	e010      	b.n	8000e3e <_ZN8IOHandle6SetPWMEm+0x8e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b10      	cmp	r3, #16
 8000e22:	d105      	bne.n	8000e30 <_ZN8IOHandle6SetPWMEm+0x80>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	649a      	str	r2, [r3, #72]	; 0x48
 8000e2e:	e006      	b.n	8000e3e <_ZN8IOHandle6SetPWMEm+0x8e>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e3a:	e000      	b.n	8000e3e <_ZN8IOHandle6SetPWMEm+0x8e>
          return;
 8000e3c:	bf00      	nop

}
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_ZN8IOHandle13IsPWMFunctionEv>:

bool IOHandle::IsPWMFunction() {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
     return (_IoFunction == IOFunction::PWM && _timer != nullptr);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d105      	bne.n	8000e60 <_ZN8IOHandle13IsPWMFunctionEv+0x1c>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <_ZN8IOHandle13IsPWMFunctionEv+0x1c>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <_ZN8IOHandle13IsPWMFunctionEv+0x1e>
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_ZN8IOHandle11SetFunctionE10IOFunction>:

void IOHandle::SetFunction(IOFunction ioFunction)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70fb      	strb	r3, [r7, #3]
     _IoFunction = ioFunction;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	78fa      	ldrb	r2, [r7, #3]
 8000e7e:	701a      	strb	r2, [r3, #0]

     switch (ioFunction)
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d011      	beq.n	8000eaa <_ZN8IOHandle11SetFunctionE10IOFunction+0x3c>
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	dc1d      	bgt.n	8000ec6 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	dc02      	bgt.n	8000e94 <_ZN8IOHandle11SetFunctionE10IOFunction+0x26>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da03      	bge.n	8000e9a <_ZN8IOHandle11SetFunctionE10IOFunction+0x2c>
                    InitAsDigitalIn();
               }

               break;
          default:
               break;
 8000e92:	e018      	b.n	8000ec6 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
     switch (ioFunction)
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d004      	beq.n	8000ea2 <_ZN8IOHandle11SetFunctionE10IOFunction+0x34>
               break;
 8000e98:	e015      	b.n	8000ec6 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
               InitAsDigitalIn();
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f818 	bl	8000ed0 <_ZN8IOHandle15InitAsDigitalInEv>
               break;
 8000ea0:	e012      	b.n	8000ec8 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               InitAsDigitalOut();
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f831 	bl	8000f0a <_ZN8IOHandle16InitAsDigitalOutEv>
               break;
 8000ea8:	e00e      	b.n	8000ec8 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               if (IsPWMFunction()) 
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffca 	bl	8000e44 <_ZN8IOHandle13IsPWMFunctionEv>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <_ZN8IOHandle11SetFunctionE10IOFunction+0x50>
                    InitAsPWMOut();
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f844 	bl	8000f44 <_ZN8IOHandle12InitAsPWMOutEv>
               break;
 8000ebc:	e004      	b.n	8000ec8 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
                    InitAsDigitalIn();
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f806 	bl	8000ed0 <_ZN8IOHandle15InitAsDigitalInEv>
               break;
 8000ec4:	e000      	b.n	8000ec8 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               break;
 8000ec6:	bf00      	nop
     }
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_ZN8IOHandle15InitAsDigitalInEv>:
{
     return _IoFunction;
}

void IOHandle::InitAsDigitalIn() 
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
     GPIO_InitStruct.Pin = _pin;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Digital output mode
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3314      	adds	r3, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4610      	mov	r0, r2
 8000efe:	f002 f9bd 	bl	800327c <HAL_GPIO_Init>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZN8IOHandle16InitAsDigitalOutEv>:

void IOHandle::InitAsDigitalOut() 
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
     GPIO_InitStruct.Pin = _pin;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Digital output mode
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3314      	adds	r3, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4610      	mov	r0, r2
 8000f38:	f002 f9a0 	bl	800327c <HAL_GPIO_Init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN8IOHandle12InitAsPWMOutEv>:

void IOHandle::InitAsPWMOut() 
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]
     HAL_TIM_PWM_Stop(_timer, _channel);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f005 fa72 	bl	8006454 <HAL_TIM_PWM_Stop>

     sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f70:	2360      	movs	r3, #96	; 0x60
 8000f72:	60fb      	str	r3, [r7, #12]
     sConfigOC.Pulse = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
     sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
     sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
     sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
     if (HAL_TIM_PWM_ConfigChannel(_timer, &sConfigOC, _channel) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68d8      	ldr	r0, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f005 fd75 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
     {

     }

     GPIO_InitStruct.Pin = _pin;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2202      	movs	r2, #2
 8000fae:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]

     if(_timer->Instance == TIM17)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <_ZN8IOHandle12InitAsPWMOutEv+0xf0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d102      	bne.n	8000fce <_ZN8IOHandle12InitAsPWMOutEv+0x8a>
         GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	220a      	movs	r2, #10
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24

     if(_timer->Instance == TIM3 && _channel == TIM_CHANNEL_4)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <_ZN8IOHandle12InitAsPWMOutEv+0xf4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d106      	bne.n	8000fe8 <_ZN8IOHandle12InitAsPWMOutEv+0xa4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b0c      	cmp	r3, #12
 8000fe0:	d102      	bne.n	8000fe8 <_ZN8IOHandle12InitAsPWMOutEv+0xa4>
         GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24

     if(_timer->Instance == TIM3 && (_channel == TIM_CHANNEL_1 || _channel == TIM_CHANNEL_2))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_ZN8IOHandle12InitAsPWMOutEv+0xf4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d10a      	bne.n	800100a <_ZN8IOHandle12InitAsPWMOutEv+0xc6>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <_ZN8IOHandle12InitAsPWMOutEv+0xc0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d102      	bne.n	800100a <_ZN8IOHandle12InitAsPWMOutEv+0xc6>
         GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2202      	movs	r2, #2
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3314      	adds	r3, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f002 f931 	bl	800327c <HAL_GPIO_Init>

     HAL_TIM_PWM_Start(_timer, _channel);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f005 f915 	bl	8006254 <HAL_TIM_PWM_Start>
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40014800 	.word	0x40014800
 8001038:	40000400 	.word	0x40000400

0800103c <_ZN8IOHandle6GetPinEv>:

uint32_t IOHandle::GetPin()
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	return _pin;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_ZN8IOHandle7GetPortEv>:

GPIO_TypeDef* IOHandle::GetPort()
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	return _port;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZN11TaskhandlerC1Ev>:
#include "../AppSettings.h"
#include "Taskhandler.h"

Taskhandler::Taskhandler() {}
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	711a      	strb	r2, [r3, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	715a      	strb	r2, [r3, #5]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	719a      	strb	r2, [r3, #6]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	71da      	strb	r2, [r3, #7]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZN11Taskhandler17UpdateTaskhandlerEv>:

void Taskhandler::UpdateTaskhandler()
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
     if(_taskCounter % ErrorUpdateTime == 0)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xc0>)
 80010ae:	fb83 1302 	smull	r1, r3, r3, r2
 80010b2:	1199      	asrs	r1, r3, #6
 80010b4:	17d3      	asrs	r3, r2, #31
 80010b6:	1acb      	subs	r3, r1, r3
 80010b8:	f240 11f3 	movw	r1, #499	; 0x1f3
 80010bc:	fb01 f303 	mul.w	r3, r1, r3
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <_ZN11Taskhandler17UpdateTaskhandlerEv+0x2c>
     {
          _isErrorTaskUpdateRequest = true;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	711a      	strb	r2, [r3, #4]
     }

     if(_taskCounter % DriveUpdateTime == 0)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xc4>)
 80010d2:	fb83 2301 	smull	r2, r3, r3, r1
 80010d6:	105a      	asrs	r2, r3, #1
 80010d8:	17cb      	asrs	r3, r1, #31
 80010da:	1ad2      	subs	r2, r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	1aca      	subs	r2, r1, r3
 80010e8:	2a00      	cmp	r2, #0
 80010ea:	d102      	bne.n	80010f2 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x52>
     {
          _isDriveTaskUpdateRequest = true;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	719a      	strb	r2, [r3, #6]
     }

     if(_taskCounter % EncoderUpdateTime == 0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xc8>)
 80010f8:	fb83 2301 	smull	r2, r3, r3, r1
 80010fc:	105a      	asrs	r2, r3, #1
 80010fe:	17cb      	asrs	r3, r1, #31
 8001100:	1ad2      	subs	r2, r2, r3
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	1aca      	subs	r2, r1, r3
 800110a:	2a00      	cmp	r2, #0
 800110c:	d102      	bne.n	8001114 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x74>
     {
          _isEncoderTaskUpdateRequest = true;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	715a      	strb	r2, [r3, #5]
     }

     if(_taskCounter % LedUpdateTime == 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <_ZN11Taskhandler17UpdateTaskhandlerEv+0xcc>)
 800111a:	fb83 1302 	smull	r1, r3, r3, r2
 800111e:	1199      	asrs	r1, r3, #6
 8001120:	17d3      	asrs	r3, r2, #31
 8001122:	1acb      	subs	r3, r1, r3
 8001124:	f240 1191 	movw	r1, #401	; 0x191
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x98>
     {
          _isLedTaskUpdateRequest = true;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	71da      	strb	r2, [r3, #7]
     }

     _taskCounter++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
	 if(_taskCounter == 11005445+1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xd0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d102      	bne.n	8001152 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xb2>
	 {
		 _taskCounter = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
	 }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20d56b39 	.word	0x20d56b39
 8001164:	2e8ba2e9 	.word	0x2e8ba2e9
 8001168:	66666667 	.word	0x66666667
 800116c:	28db9c69 	.word	0x28db9c69
 8001170:	00a7ee06 	.word	0x00a7ee06

08001174 <_ZN11Taskhandler11IsDriveTaskEv>:
     _isErrorTaskUpdateRequest = false;
     return isTaskUpdateRequest;
}

bool Taskhandler::IsDriveTask()
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
     bool isTaskUpdateRequest = _isDriveTaskUpdateRequest;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	799b      	ldrb	r3, [r3, #6]
 8001180:	73fb      	strb	r3, [r7, #15]
     _isDriveTaskUpdateRequest = false;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	719a      	strb	r2, [r3, #6]
     return isTaskUpdateRequest;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN11Taskhandler13IsEncoderTaskEv>:

bool Taskhandler::IsEncoderTask()
{
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
     bool isTaskUpdateRequest = _isEncoderTaskUpdateRequest;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	795b      	ldrb	r3, [r3, #5]
 80011a2:	73fb      	strb	r3, [r7, #15]
     _isEncoderTaskUpdateRequest = false;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	715a      	strb	r2, [r3, #5]
     return isTaskUpdateRequest;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZN11Taskhandler9IsLedTaskEv>:

bool Taskhandler::IsLedTask()
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
     bool isTaskUpdateRequest = _isLedTaskUpdateRequest;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	79db      	ldrb	r3, [r3, #7]
 80011c4:	73fb      	strb	r3, [r7, #15]
     _isLedTaskUpdateRequest = false;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	71da      	strb	r2, [r3, #7]
     return isTaskUpdateRequest;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00b fef1 	bl	800cfdc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <MX_ADC1_Init+0xe8>)
 80011fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001200:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001208:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <MX_ADC1_Init+0xe8>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <MX_ADC1_Init+0xe8>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001224:	2204      	movs	r2, #4
 8001226:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <MX_ADC1_Init+0xe8>)
 800122a:	2200      	movs	r2, #0
 800122c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001236:	2201      	movs	r2, #1
 8001238:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_ADC1_Init+0xe8>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <MX_ADC1_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001258:	2200      	movs	r2, #0
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_ADC1_Init+0xe8>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001264:	4817      	ldr	r0, [pc, #92]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001266:	f001 f8bb 	bl	80023e0 <HAL_ADC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001270:	f000 f9ae 	bl	80015d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_ADC1_Init+0xe8>)
 8001280:	f001 fe48 	bl	8002f14 <HAL_ADCEx_MultiModeConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800128a:	f000 f9a1 	bl	80015d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_ADC1_Init+0xec>)
 8001290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001292:	2306      	movs	r3, #6
 8001294:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129a:	237f      	movs	r3, #127	; 0x7f
 800129c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800129e:	2304      	movs	r3, #4
 80012a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_ADC1_Init+0xe8>)
 80012ac:	f001 fa1c 	bl	80026e8 <HAL_ADC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012b6:	f000 f98b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	; 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200001f0 	.word	0x200001f0
 80012c8:	0c900008 	.word	0x0c900008

080012cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09a      	sub	sp, #104	; 0x68
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2244      	movs	r2, #68	; 0x44
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b fe75 	bl	800cfdc <memset>
  if(adcHandle->Instance==ADC1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fa:	d134      	bne.n	8001366 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001300:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001302:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4618      	mov	r0, r3
 800130e:	f004 fc97 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001318:	f000 f95a 	bl	80015d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_ADC_MspInit+0xa4>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_ADC_MspInit+0xa4>)
 8001322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_ADC_MspInit+0xa4>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_ADC_MspInit+0xa4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_ADC_MspInit+0xa4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_ADC_MspInit+0xa4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 800134c:	2304      	movs	r3, #4
 800134e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f001 ff8b 	bl	800327c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	3768      	adds	r7, #104	; 0x68
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <MX_GPIO_Init+0x114>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <MX_GPIO_Init+0x114>)
 8001390:	f043 0320 	orr.w	r3, r3, #32
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_GPIO_Init+0x114>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0320 	and.w	r3, r3, #32
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_GPIO_Init+0x114>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a38      	ldr	r2, [pc, #224]	; (8001488 <MX_GPIO_Init+0x114>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_GPIO_Init+0x114>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MX_GPIO_Init+0x114>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a32      	ldr	r2, [pc, #200]	; (8001488 <MX_GPIO_Init+0x114>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_GPIO_Init+0x114>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LEDG_Pin|LEDR_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2103      	movs	r1, #3
 80013d6:	482d      	ldr	r0, [pc, #180]	; (800148c <MX_GPIO_Init+0x118>)
 80013d8:	f002 f8ea 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_MOT_CH2R_Pin|EN_MOT_CH2L_Pin|EN_MOT_CH1L_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f002 f8e3 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOT_CH1R_GPIO_Port, EN_MOT_CH1R_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <MX_GPIO_Init+0x11c>)
 80013f0:	f002 f8de 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LEDG_Pin|LEDR_Pin;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4820      	ldr	r0, [pc, #128]	; (800148c <MX_GPIO_Init+0x118>)
 800140c:	f001 ff36 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REF_MOT2_Pin;
 8001410:	2308      	movs	r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REF_MOT2_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f001 ff29 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN_MOT_CH2R_Pin|EN_MOT_CH2L_Pin|EN_MOT_CH1L_Pin;
 800142a:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f001 ff19 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REF_MOT1_Pin;
 800144a:	2310      	movs	r3, #16
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REF_MOT1_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_GPIO_Init+0x11c>)
 800145e:	f001 ff0d 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_MOT_CH1R_Pin;
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_MOT_CH1R_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_GPIO_Init+0x11c>)
 800147a:	f001 feff 	bl	800327c <HAL_GPIO_Init>

}
 800147e:	bf00      	nop
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	48001400 	.word	0x48001400
 8001490:	48000400 	.word	0x48000400

08001494 <_ZN15ApplicationMainD1Ev>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim15;
extern TIM_HandleTypeDef htim16;

class ApplicationMain
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3320      	adds	r3, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc11 	bl	8000cc8 <_ZN7AMT102VD1Ev>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3308      	adds	r3, #8
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc0c 	bl	8000cc8 <_ZN7AMT102VD1Ev>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fd47 	bl	8001f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f818 	bl	80014f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff54 	bl	8001374 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014cc:	f7ff fe86 	bl	80011dc <MX_ADC1_Init>
  MX_TIM1_Init();
 80014d0:	f000 f92a 	bl	8001728 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014d4:	f000 f982 	bl	80017dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80014d8:	f000 f9d4 	bl	8001884 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014dc:	f000 fa42 	bl	8001964 <MX_TIM4_Init>
  MX_TIM17_Init();
 80014e0:	f000 fa8e 	bl	8001a00 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80014e4:	f000 fc4a 	bl	8001d7c <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 80014e8:	f00b f87a 	bl	800c5e0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  applicationMain.StartUp();
 80014ec:	4801      	ldr	r0, [pc, #4]	; (80014f4 <main+0x38>)
 80014ee:	f7ff f8d5 	bl	800069c <_ZN15ApplicationMain7StartUpEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <main+0x36>
 80014f4:	2000025c 	.word	0x2000025c

080014f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	; 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	2238      	movs	r2, #56	; 0x38
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00b fd68 	bl	800cfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151e:	f003 fdad 	bl	800507c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001522:	2322      	movs	r3, #34	; 0x22
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800153c:	2301      	movs	r3, #1
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001540:	230f      	movs	r3, #15
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fe45 	bl	80051e4 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 800156a:	f000 f831 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2303      	movs	r3, #3
 8001574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2103      	movs	r1, #3
 8001586:	4618      	mov	r0, r3
 8001588:	f004 f93e 	bl	8005808 <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 800159c:	f000 f818 	bl	80015d0 <Error_Handler>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3750      	adds	r7, #80	; 0x50
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d102      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x18>
		applicationMain.taskhandler.UpdateTaskhandler();
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80015bc:	f7ff fd70 	bl	80010a0 <_ZN11Taskhandler17UpdateTaskhandlerEv>
	}

}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40000800 	.word	0x40000800
 80015cc:	2000025c 	.word	0x2000025c

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <_Z41__static_initialization_and_destruction_0ii+0x20>
  ApplicationMain applicationMain = ApplicationMain();
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80015f8:	f7fe ff8c 	bl	8000514 <_ZN15ApplicationMainC1Ev>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001608:	4293      	cmp	r3, r2
 800160a:	d102      	bne.n	8001612 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800160e:	f7ff ff41 	bl	8001494 <_ZN15ApplicationMainD1Ev>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000025c 	.word	0x2000025c

08001620 <_GLOBAL__sub_I_applicationMain>:
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
 8001624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff ffd7 	bl	80015dc <_Z41__static_initialization_and_destruction_0ii>
 800162e:	bd80      	pop	{r7, pc}

08001630 <_GLOBAL__sub_D_applicationMain>:
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
 8001634:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff ffcf 	bl	80015dc <_Z41__static_initialization_and_destruction_0ii>
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x44>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x44>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6613      	str	r3, [r2, #96]	; 0x60
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6593      	str	r3, [r2, #88]	; 0x58
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001676:	f003 fda5 	bl	80051c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 fc90 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USB_LP_IRQHandler+0x10>)
 80016e2:	f002 f887 	bl	80037f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200013f4 	.word	0x200013f4

080016f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM4_IRQHandler+0x10>)
 80016f6:	f005 f877 	bl	80067e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200005f0 	.word	0x200005f0

08001704 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00b fc50 	bl	800cfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <MX_TIM1_Init+0xb0>)
 800174a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_TIM1_Init+0xac>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_TIM1_Init+0xac>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_TIM1_Init+0xac>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_TIM1_Init+0xac>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001772:	2301      	movs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_TIM1_Init+0xac>)
 800179e:	f004 feef 	bl	8006580 <HAL_TIM_Encoder_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80017a8:	f7ff ff12 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM1_Init+0xac>)
 80017be:	f005 ffed 	bl	800779c <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017c8:	f7ff ff02 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000050c 	.word	0x2000050c
 80017d8:	40012c00 	.word	0x40012c00

080017dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00b fbf6 	bl	800cfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_TIM2_Init+0xa4>)
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_TIM2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001822:	2301      	movs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM2_Init+0xa4>)
 800184e:	f004 fe97 	bl	8006580 <HAL_TIM_Encoder_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001858:	f7ff feba 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM2_Init+0xa4>)
 800186a:	f005 ff97 	bl	800779c <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001874:	f7ff feac 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000558 	.word	0x20000558

08001884 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	615a      	str	r2, [r3, #20]
 80018a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_TIM3_Init+0xd8>)
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <MX_TIM3_Init+0xdc>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_TIM3_Init+0xd8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_TIM3_Init+0xd8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5999;
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <MX_TIM3_Init+0xd8>)
 80018bc:	f241 726f 	movw	r2, #5999	; 0x176f
 80018c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <MX_TIM3_Init+0xd8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_TIM3_Init+0xd8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ce:	4823      	ldr	r0, [pc, #140]	; (800195c <MX_TIM3_Init+0xd8>)
 80018d0:	f004 fc68 	bl	80061a4 <HAL_TIM_PWM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80018da:	f7ff fe79 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	481b      	ldr	r0, [pc, #108]	; (800195c <MX_TIM3_Init+0xd8>)
 80018ee:	f005 ff55 	bl	800779c <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80018f8:	f7ff fe6a 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fc:	2360      	movs	r3, #96	; 0x60
 80018fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	4812      	ldr	r0, [pc, #72]	; (800195c <MX_TIM3_Init+0xd8>)
 8001914:	f005 f8b8 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800191e:	f7ff fe57 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	2204      	movs	r2, #4
 8001926:	4619      	mov	r1, r3
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <MX_TIM3_Init+0xd8>)
 800192a:	f005 f8ad 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001934:	f7ff fe4c 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	220c      	movs	r2, #12
 800193c:	4619      	mov	r1, r3
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <MX_TIM3_Init+0xd8>)
 8001940:	f005 f8a2 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800194a:	f7ff fe41 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <MX_TIM3_Init+0xd8>)
 8001950:	f000 f99c 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200005a4 	.word	0x200005a4
 8001960:	40000400 	.word	0x40000400

08001964 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_TIM4_Init+0x94>)
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <MX_TIM4_Init+0x98>)
 8001986:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_TIM4_Init+0x94>)
 800198a:	2201      	movs	r2, #1
 800198c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_TIM4_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_TIM4_Init+0x94>)
 8001996:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800199a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_TIM4_Init+0x94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_TIM4_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019a8:	4813      	ldr	r0, [pc, #76]	; (80019f8 <MX_TIM4_Init+0x94>)
 80019aa:	f004 fb39 	bl	8006020 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80019b4:	f7ff fe0c 	bl	80015d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM4_Init+0x94>)
 80019c6:	f005 f973 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80019d0:	f7ff fdfe 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM4_Init+0x94>)
 80019e2:	f005 fedb 	bl	800779c <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f7ff fdf0 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200005f0 	.word	0x200005f0
 80019fc:	40000800 	.word	0x40000800

08001a00 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2234      	movs	r2, #52	; 0x34
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00b fadb 	bl	800cfdc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a28:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <MX_TIM17_Init+0xf0>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5999;
 8001a38:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a3a:	f241 726f 	movw	r2, #5999	; 0x176f
 8001a3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a52:	4826      	ldr	r0, [pc, #152]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a54:	f004 fae4 	bl	8006020 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001a5e:	f7ff fdb7 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001a62:	4822      	ldr	r0, [pc, #136]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a64:	f004 fb9e 	bl	80061a4 <HAL_TIM_PWM_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001a6e:	f7ff fdaf 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a72:	2360      	movs	r3, #96	; 0x60
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <MX_TIM17_Init+0xec>)
 8001a98:	f004 fff6 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001aa2:	f7ff fd95 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001abe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_TIM17_Init+0xec>)
 8001ace:	f005 fee7 	bl	80078a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001ad8:	f7ff fd7a 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <MX_TIM17_Init+0xec>)
 8001ade:	f000 f8d5 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001ae2:	bf00      	nop
 8001ae4:	3750      	adds	r7, #80	; 0x50
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000063c 	.word	0x2000063c
 8001af0:	40014800 	.word	0x40014800

08001af4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12a      	bne.n	8001b6c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	4a2e      	ldr	r2, [pc, #184]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b20:	6613      	str	r3, [r2, #96]	; 0x60
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_B_Pin|ENCODER1_A_Pin;
 8001b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b58:	2306      	movs	r3, #6
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b66:	f001 fb89 	bl	800327c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b6a:	e02d      	b.n	8001bc8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b74:	d128      	bne.n	8001bc8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6593      	str	r3, [r2, #88]	; 0x58
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc4:	f001 fb5a 	bl	800327c <HAL_GPIO_Init>
}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40012c00 	.word	0x40012c00
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_TIM_PWM_MspInit+0x38>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d10b      	bne.n	8001c02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d114      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_TIM_Base_MspInit+0x6c>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <HAL_TIM_Base_MspInit+0x6c>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_TIM_Base_MspInit+0x6c>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201e      	movs	r0, #30
 8001c48:	f001 fae3 	bl	8003212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c4c:	201e      	movs	r0, #30
 8001c4e:	f001 fafa 	bl	8003246 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001c52:	e010      	b.n	8001c76 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM17)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_TIM_Base_MspInit+0x70>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10b      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_TIM_Base_MspInit+0x6c>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_TIM_Base_MspInit+0x6c>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40000800 	.word	0x40000800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40014800 	.word	0x40014800

08001c8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a30      	ldr	r2, [pc, #192]	; (8001d6c <HAL_TIM_MspPostInit+0xe0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d139      	bne.n	8001d22 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB7     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN_MOT_CH2R_Pin|IN_MOT_CH2L_Pin;
 8001cde:	2350      	movs	r3, #80	; 0x50
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfc:	f001 fabe 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_MOT_CH1L_Pin;
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001d10:	230a      	movs	r3, #10
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN_MOT_CH1L_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4816      	ldr	r0, [pc, #88]	; (8001d74 <HAL_TIM_MspPostInit+0xe8>)
 8001d1c:	f001 faae 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001d20:	e020      	b.n	8001d64 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM17)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_TIM_MspPostInit+0xec>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_TIM_MspPostInit+0xe4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN_MOT_CH1R_Pin;
 8001d44:	2320      	movs	r3, #32
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001d54:	230a      	movs	r3, #10
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN_MOT_CH1R_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_MspPostInit+0xe8>)
 8001d60:	f001 fa8c 	bl	800327c <HAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	40014800 	.word	0x40014800

08001d7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <MX_USART2_UART_Init+0x94>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dc6:	f005 fe3d 	bl	8007a44 <HAL_UART_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001dd0:	f7ff fbfe 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dd8:	f006 fba8 	bl	800852c <HAL_UARTEx_SetTxFifoThreshold>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001de2:	f7ff fbf5 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de6:	2100      	movs	r1, #0
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dea:	f006 fbdd 	bl	80085a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001df4:	f7ff fbec 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_USART2_UART_Init+0x90>)
 8001dfa:	f006 fb5e 	bl	80084ba <HAL_UARTEx_DisableFifoMode>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e04:	f7ff fbe4 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000688 	.word	0x20000688
 8001e10:	40004400 	.word	0x40004400

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b09c      	sub	sp, #112	; 0x70
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	f107 0318 	add.w	r3, r7, #24
 8001e30:	2244      	movs	r2, #68	; 0x44
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00b f8d1 	bl	800cfdc <memset>
  if(uartHandle->Instance==USART2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <HAL_UART_MspInit+0xe0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d153      	bne.n	8001eec <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fef5 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e5c:	f7ff fbb8 	bl	80015d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_UART_MspInit+0xe4>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f001 f9d8 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001edc:	2307      	movs	r3, #7
 8001ede:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_UART_MspInit+0xe8>)
 8001ee8:	f001 f9c8 	bl	800327c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3770      	adds	r7, #112	; 0x70
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40004400 	.word	0x40004400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400

08001f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f04:	f7ff fbfe 	bl	8001704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	; (8001f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <LoopForever+0xe>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	; (8001f4c <LoopForever+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f00b f85d 	bl	800cfec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f32:	f7ff fac3 	bl	80014bc <main>

08001f36 <LoopForever>:

LoopForever:
    b LoopForever
 8001f36:	e7fe      	b.n	8001f36 <LoopForever>
  ldr   r0, =_estack
 8001f38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f44:	0800d1c8 	.word	0x0800d1c8
  ldr r2, =_sbss
 8001f48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f4c:	20001a30 	.word	0x20001a30

08001f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_2_IRQHandler>

08001f52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f001 f94d 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f80e 	bl	8001f84 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	e001      	b.n	8001f78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f74:	f7ff fb64 	bl	8001640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f78:	79fb      	ldrb	r3, [r7, #7]

}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_InitTick+0x68>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d022      	beq.n	8001fde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_InitTick+0x68>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 f958 	bl	8003262 <HAL_SYSTICK_Config>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	d809      	bhi.n	8001fd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc6:	f001 f924 	bl	8003212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_InitTick+0x70>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e007      	b.n	8001fe2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e004      	b.n	8001fe2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e001      	b.n	8001fe2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_IncTick+0x1c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_IncTick+0x20>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4413      	add	r3, r2
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_IncTick+0x1c>)
 8002008:	6013      	str	r3, [r2, #0]
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	2000071c 	.word	0x2000071c
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2000071c 	.word	0x2000071c

08002034 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <LL_ADC_SetOffset+0x44>)
 80020be:	4013      	ands	r3, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	03fff000 	.word	0x03fff000

080020e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3360      	adds	r3, #96	; 0x60
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3360      	adds	r3, #96	; 0x60
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002146:	b480      	push	{r7}
 8002148:	b087      	sub	sp, #28
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	431a      	orrs	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3360      	adds	r3, #96	; 0x60
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	615a      	str	r2, [r3, #20]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3330      	adds	r3, #48	; 0x30
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	4413      	add	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	211f      	movs	r1, #31
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 011f 	and.w	r1, r3, #31
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	431a      	orrs	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002224:	bf00      	nop
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3314      	adds	r3, #20
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	0e5b      	lsrs	r3, r3, #25
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	4413      	add	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	0d1b      	lsrs	r3, r3, #20
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	2107      	movs	r1, #7
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	401a      	ands	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0d1b      	lsrs	r3, r3, #20
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0318 	and.w	r3, r3, #24
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80022ac:	40d9      	lsrs	r1, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	400b      	ands	r3, r1
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	431a      	orrs	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	0007ffff 	.word	0x0007ffff

080022d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6093      	str	r3, [r2, #8]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002308:	d101      	bne.n	800230e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800232c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002330:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002358:	d101      	bne.n	800235e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <LL_ADC_IsEnabled+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_ADC_IsEnabled+0x1a>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d101      	bne.n	80023aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e167      	b.n	80026ca <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe ff5f 	bl	80012cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff67 	bl	80022f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff4d 	bl	80022d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff82 	bl	8002344 <LL_ADC_IsInternalRegulatorEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff66 	bl	800231c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002450:	4ba0      	ldr	r3, [pc, #640]	; (80026d4 <HAL_ADC_Init+0x2f4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	4aa0      	ldr	r2, [pc, #640]	; (80026d8 <HAL_ADC_Init+0x2f8>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002464:	e002      	b.n	800246c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff64 	bl	8002344 <LL_ADC_IsInternalRegulatorEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff75 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8100 	bne.w	80026b8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80fc 	bne.w	80026b8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c8:	f043 0202 	orr.w	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff49 	bl	800236c <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024e4:	f7ff ff42 	bl	800236c <LL_ADC_IsEnabled>
 80024e8:	4604      	mov	r4, r0
 80024ea:	487c      	ldr	r0, [pc, #496]	; (80026dc <HAL_ADC_Init+0x2fc>)
 80024ec:	f7ff ff3e 	bl	800236c <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4323      	orrs	r3, r4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4878      	ldr	r0, [pc, #480]	; (80026e0 <HAL_ADC_Init+0x300>)
 8002500:	f7ff fd98 	bl	8002034 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7f5b      	ldrb	r3, [r3, #29]
 8002508:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002514:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800251a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002522:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	d106      	bne.n	8002540 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	3b01      	subs	r3, #1
 8002538:	045b      	lsls	r3, r3, #17
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b60      	ldr	r3, [pc, #384]	; (80026e4 <HAL_ADC_Init+0x304>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	430b      	orrs	r3, r1
 800256e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff14 	bl	80023b8 <LL_ADC_INJ_IsConversionOngoing>
 8002590:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d16d      	bne.n	8002674 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d16a      	bne.n	8002674 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ba:	f023 0302 	bic.w	r3, r3, #2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6911      	ldr	r1, [r2, #16]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80025fe:	e013      	b.n	8002628 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800260e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002624:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800262e:	2b01      	cmp	r3, #1
 8002630:	d118      	bne.n	8002664 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002654:	430a      	orrs	r2, r1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	e007      	b.n	8002674 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10c      	bne.n	8002696 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f023 010f 	bic.w	r1, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	e007      	b.n	80026a6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020f 	bic.w	r2, r2, #15
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000
 80026d8:	053e2d63 	.word	0x053e2d63
 80026dc:	50000100 	.word	0x50000100
 80026e0:	50000300 	.word	0x50000300
 80026e4:	fff04007 	.word	0xfff04007

080026e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0b6      	sub	sp, #216	; 0xd8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x22>
 8002706:	2302      	movs	r3, #2
 8002708:	e3c8      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x7b4>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fe3b 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 83ad 	bne.w	8002e7e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	f7ff fd51 	bl	80021d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fe29 	bl	8002392 <LL_ADC_REG_IsConversionOngoing>
 8002740:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fe35 	bl	80023b8 <LL_ADC_INJ_IsConversionOngoing>
 800274e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002752:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 81d9 	bne.w	8002b0e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 81d4 	bne.w	8002b0e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800276e:	d10f      	bne.n	8002790 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	4619      	mov	r1, r3
 800277c:	f7ff fd58 	bl	8002230 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd12 	bl	80021b2 <LL_ADC_SetSamplingTimeCommonConfig>
 800278e:	e00e      	b.n	80027ae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	461a      	mov	r2, r3
 800279e:	f7ff fd47 	bl	8002230 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fd02 	bl	80021b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d022      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6919      	ldr	r1, [r3, #16]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027e0:	f7ff fc5c 	bl	800209c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6919      	ldr	r1, [r3, #16]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	461a      	mov	r2, r3
 80027f2:	f7ff fca8 	bl	8002146 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_ADC_ConfigChannel+0x124>
 8002806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280a:	e000      	b.n	800280e <HAL_ADC_ConfigChannel+0x126>
 800280c:	2300      	movs	r3, #0
 800280e:	461a      	mov	r2, r3
 8002810:	f7ff fcb4 	bl	800217c <LL_ADC_SetOffsetSaturation>
 8002814:	e17b      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fc61 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x15a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc56 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	e01e      	b.n	8002880 <HAL_ADC_ConfigChannel+0x198>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fc4b 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e004      	b.n	800287e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x1b0>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	e018      	b.n	80028ca <HAL_ADC_ConfigChannel+0x1e2>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e004      	b.n	80028ca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80028c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc1a 	bl	8002110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fbfe 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x220>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fbf3 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	e01e      	b.n	8002946 <HAL_ADC_ConfigChannel+0x25e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fbe8 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800292a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800292e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800293a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_ConfigChannel+0x276>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	e018      	b.n	8002990 <HAL_ADC_ConfigChannel+0x2a8>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002972:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800297a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e004      	b.n	8002990 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002990:	429a      	cmp	r2, r3
 8002992:	d106      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fbb7 	bl	8002110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fb9b 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x2e6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2102      	movs	r1, #2
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fb90 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	e01e      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x324>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fb85 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x33c>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	e016      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x36a>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e004      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d106      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fb56 	bl	8002110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2103      	movs	r1, #3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fb3a 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x3a8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2103      	movs	r1, #3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fb2f 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 021f 	and.w	r2, r3, #31
 8002a8e:	e017      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x3d8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2103      	movs	r1, #3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fb24 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aaa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x3f0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	e011      	b.n	8002afc <HAL_ADC_ConfigChannel+0x414>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d106      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2103      	movs	r1, #3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fb01 	bl	8002110 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fc2a 	bl	800236c <LL_ADC_IsEnabled>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 8140 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f7ff fbab 	bl	8002288 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a8f      	ldr	r2, [pc, #572]	; (8002d74 <HAL_ADC_ConfigChannel+0x68c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	f040 8131 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x47e>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	3301      	adds	r3, #1
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	bf94      	ite	ls
 8002b5e:	2301      	movls	r3, #1
 8002b60:	2300      	movhi	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e019      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x4b2>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b76:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e003      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	bf94      	ite	ls
 8002b94:	2301      	movls	r3, #1
 8002b96:	2300      	movhi	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d079      	beq.n	8002c92 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x4d2>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb8:	e015      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x4fe>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x51e>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	e017      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x54e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	ea42 0103 	orr.w	r1, r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x574>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	051b      	lsls	r3, r3, #20
 8002c5a:	e018      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x5a6>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	e081      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x5c6>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	069b      	lsls	r3, r3, #26
 8002ca8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cac:	e015      	b.n	8002cda <HAL_ADC_ConfigChannel+0x5f2>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	069b      	lsls	r3, r3, #26
 8002cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x612>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	e017      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x642>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	61fb      	str	r3, [r7, #28]
  return result;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	ea42 0103 	orr.w	r1, r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x66e>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 021f 	and.w	r2, r3, #31
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b1e      	subs	r3, #30
 8002d4e:	051b      	lsls	r3, r3, #20
 8002d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d54:	e01e      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x6ac>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	613b      	str	r3, [r7, #16]
  return result;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e006      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x698>
 8002d72:	bf00      	nop
 8002d74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f003 021f 	and.w	r2, r3, #31
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	051b      	lsls	r3, r3, #20
 8002d90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d94:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7ff fa48 	bl	8002230 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d071      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dac:	483e      	ldr	r0, [pc, #248]	; (8002ea8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dae:	f7ff f967 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002db2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <HAL_ADC_ConfigChannel+0x7c4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_ConfigChannel+0x6e2>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d127      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d121      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dde:	d157      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002de8:	4619      	mov	r1, r3
 8002dea:	482f      	ldr	r0, [pc, #188]	; (8002ea8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dec:	f7ff f935 	bl	800205a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e0a:	e002      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f9      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e18:	e03a      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_ADC_ConfigChannel+0x7d4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d113      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02a      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	4619      	mov	r1, r3
 8002e44:	4818      	ldr	r0, [pc, #96]	; (8002ea8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e46:	f7ff f908 	bl	800205a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4a:	e021      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d11c      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d011      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e74:	4619      	mov	r1, r3
 8002e76:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e78:	f7ff f8ef 	bl	800205a <LL_ADC_SetCommonPathInternalCh>
 8002e7c:	e008      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e98:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	37d8      	adds	r7, #216	; 0xd8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	80080000 	.word	0x80080000
 8002ea8:	50000300 	.word	0x50000300
 8002eac:	c3210000 	.word	0xc3210000
 8002eb0:	90c00010 	.word	0x90c00010
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	053e2d63 	.word	0x053e2d63
 8002ebc:	c7520000 	.word	0xc7520000
 8002ec0:	50000100 	.word	0x50000100
 8002ec4:	cb840000 	.word	0xcb840000

08002ec8 <LL_ADC_IsEnabled>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_IsEnabled+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_IsEnabled+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_REG_IsConversionOngoing>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b0a1      	sub	sp, #132	; 0x84
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e08b      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4a:	d102      	bne.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f4c:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	e001      	b.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e06a      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ffb9 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ffb3 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d14c      	bne.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d149      	bne.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d028      	beq.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb2:	035b      	lsls	r3, r3, #13
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fc0:	f7ff ff82 	bl	8002ec8 <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	4823      	ldr	r0, [pc, #140]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fc8:	f7ff ff7e 	bl	8002ec8 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d133      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fdc:	f023 030f 	bic.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	6811      	ldr	r1, [r2, #0]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff0:	e024      	b.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ffc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003002:	f7ff ff61 	bl	8002ec8 <LL_ADC_IsEnabled>
 8003006:	4604      	mov	r4, r0
 8003008:	4812      	ldr	r0, [pc, #72]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800300a:	f7ff ff5d 	bl	8002ec8 <LL_ADC_IsEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	4323      	orrs	r3, r4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d112      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800301e:	f023 030f 	bic.w	r3, r3, #15
 8003022:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003024:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003026:	e009      	b.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800303a:	e000      	b.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800303c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003046:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800304a:	4618      	mov	r0, r3
 800304c:	3784      	adds	r7, #132	; 0x84
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	50000100 	.word	0x50000100
 8003058:	50000300 	.word	0x50000300

0800305c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <__NVIC_GetPriorityGrouping+0x18>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 0307 	and.w	r3, r3, #7
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db0b      	blt.n	80030ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4907      	ldr	r1, [pc, #28]	; (80030f8 <__NVIC_EnableIRQ+0x38>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2001      	movs	r0, #1
 80030e2:	fa00 f202 	lsl.w	r2, r0, r2
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000e100 	.word	0xe000e100

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db0a      	blt.n	8003126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	490c      	ldr	r1, [pc, #48]	; (8003148 <__NVIC_SetPriority+0x4c>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	440b      	add	r3, r1
 8003120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003124:	e00a      	b.n	800313c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4908      	ldr	r1, [pc, #32]	; (800314c <__NVIC_SetPriority+0x50>)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3b04      	subs	r3, #4
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	440b      	add	r3, r1
 800313a:	761a      	strb	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000e100 	.word	0xe000e100
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	bf28      	it	cs
 800316e:	2304      	movcs	r3, #4
 8003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3304      	adds	r3, #4
 8003176:	2b06      	cmp	r3, #6
 8003178:	d902      	bls.n	8003180 <NVIC_EncodePriority+0x30>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3b03      	subs	r3, #3
 800317e:	e000      	b.n	8003182 <NVIC_EncodePriority+0x32>
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	401a      	ands	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	4313      	orrs	r3, r2
         );
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c8:	d301      	bcc.n	80031ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00f      	b.n	80031ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <SysTick_Config+0x40>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d6:	210f      	movs	r1, #15
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f7ff ff8e 	bl	80030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <SysTick_Config+0x40>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <SysTick_Config+0x40>)
 80031e8:	2207      	movs	r2, #7
 80031ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000e010 	.word	0xe000e010

080031fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff29 	bl	800305c <__NVIC_SetPriorityGrouping>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003220:	f7ff ff40 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8003224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f7ff ff90 	bl	8003150 <NVIC_EncodePriority>
 8003230:	4602      	mov	r2, r0
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff5f 	bl	80030fc <__NVIC_SetPriority>
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff33 	bl	80030c0 <__NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffa4 	bl	80031b8 <SysTick_Config>
 8003270:	4603      	mov	r3, r0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800328a:	e15a      	b.n	8003542 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 814c 	beq.w	800353c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d005      	beq.n	80032bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d130      	bne.n	800331e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032f2:	2201      	movs	r2, #1
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 0201 	and.w	r2, r3, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b03      	cmp	r3, #3
 8003328:	d017      	beq.n	800335a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d123      	bne.n	80033ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	08da      	lsrs	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3208      	adds	r2, #8
 800336e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	220f      	movs	r2, #15
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	6939      	ldr	r1, [r7, #16]
 80033aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a6 	beq.w	800353c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f0:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_GPIO_Init+0x2e4>)
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_GPIO_Init+0x2e4>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6613      	str	r3, [r2, #96]	; 0x60
 80033fc:	4b58      	ldr	r3, [pc, #352]	; (8003560 <HAL_GPIO_Init+0x2e4>)
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003408:	4a56      	ldr	r2, [pc, #344]	; (8003564 <HAL_GPIO_Init+0x2e8>)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	3302      	adds	r3, #2
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003432:	d01f      	beq.n	8003474 <HAL_GPIO_Init+0x1f8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a4c      	ldr	r2, [pc, #304]	; (8003568 <HAL_GPIO_Init+0x2ec>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d019      	beq.n	8003470 <HAL_GPIO_Init+0x1f4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_GPIO_Init+0x2f0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_GPIO_Init+0x1f0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_GPIO_Init+0x2f4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00d      	beq.n	8003468 <HAL_GPIO_Init+0x1ec>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_GPIO_Init+0x2f8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_Init+0x1e8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a48      	ldr	r2, [pc, #288]	; (8003578 <HAL_GPIO_Init+0x2fc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_GPIO_Init+0x1e4>
 800345c:	2305      	movs	r3, #5
 800345e:	e00a      	b.n	8003476 <HAL_GPIO_Init+0x1fa>
 8003460:	2306      	movs	r3, #6
 8003462:	e008      	b.n	8003476 <HAL_GPIO_Init+0x1fa>
 8003464:	2304      	movs	r3, #4
 8003466:	e006      	b.n	8003476 <HAL_GPIO_Init+0x1fa>
 8003468:	2303      	movs	r3, #3
 800346a:	e004      	b.n	8003476 <HAL_GPIO_Init+0x1fa>
 800346c:	2302      	movs	r3, #2
 800346e:	e002      	b.n	8003476 <HAL_GPIO_Init+0x1fa>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_GPIO_Init+0x1fa>
 8003474:	2300      	movs	r3, #0
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	4093      	lsls	r3, r2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003486:	4937      	ldr	r1, [pc, #220]	; (8003564 <HAL_GPIO_Init+0x2e8>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_GPIO_Init+0x300>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43db      	mvns	r3, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b8:	4a30      	ldr	r2, [pc, #192]	; (800357c <HAL_GPIO_Init+0x300>)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034be:	4b2f      	ldr	r3, [pc, #188]	; (800357c <HAL_GPIO_Init+0x300>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <HAL_GPIO_Init+0x300>)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_GPIO_Init+0x300>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800350c:	4a1b      	ldr	r2, [pc, #108]	; (800357c <HAL_GPIO_Init+0x300>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_GPIO_Init+0x300>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003536:	4a11      	ldr	r2, [pc, #68]	; (800357c <HAL_GPIO_Init+0x300>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f ae9d 	bne.w	800328c <HAL_GPIO_Init+0x10>
  }
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40021000 	.word	0x40021000
 8003564:	40010000 	.word	0x40010000
 8003568:	48000400 	.word	0x48000400
 800356c:	48000800 	.word	0x48000800
 8003570:	48000c00 	.word	0x48000c00
 8003574:	48001000 	.word	0x48001000
 8003578:	48001400 	.word	0x48001400
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e001      	b.n	80035a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	041a      	lsls	r2, r3, #16
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43d9      	mvns	r1, r3
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	400b      	ands	r3, r1
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e0c0      	b.n	80037a8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f009 f9b0 	bl	800c9a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2203      	movs	r2, #3
 8003644:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f005 f84e 	bl	80086ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	e03e      	b.n	80036d6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3311      	adds	r3, #17
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3310      	adds	r3, #16
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	3313      	adds	r3, #19
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3320      	adds	r3, #32
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3324      	adds	r3, #36	; 0x24
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	3301      	adds	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	791b      	ldrb	r3, [r3, #4]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3bb      	bcc.n	8003658 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e044      	b.n	8003770 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	3301      	adds	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	791b      	ldrb	r3, [r3, #4]
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3b5      	bcc.n	80036e6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003786:	f004 ffcd 	bl	8008724 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7a9b      	ldrb	r3, [r3, #10]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d102      	bne.n	80037a6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f001 fc41 	bl	8005028 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_PCD_Start+0x16>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e012      	b.n	80037ec <HAL_PCD_Start+0x3c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 ff74 	bl	80086c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f007 fa34 	bl	800ac4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f007 fa39 	bl	800ac78 <USB_ReadInterrupts>
 8003806:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb04 	bl	8003e20 <PCD_EP_ISR_Handler>

    return;
 8003818:	e110      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	b292      	uxth	r2, r2
 8003838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f009 f940 	bl	800cac2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003842:	2100      	movs	r1, #0
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8fc 	bl	8003a42 <HAL_PCD_SetAddress>

    return;
 800384a:	e0f7      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003868:	b292      	uxth	r2, r2
 800386a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800386e:	e0e5      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388c:	b292      	uxth	r2, r2
 800388e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003892:	e0d3      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d034      	beq.n	8003908 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0204 	bic.w	r2, r2, #4
 80038b0:	b292      	uxth	r2, r2
 80038b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	b292      	uxth	r2, r2
 80038ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038e0:	2100      	movs	r1, #0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f009 fae0 	bl	800cea8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f009 f923 	bl	800cb34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003900:	b292      	uxth	r2, r2
 8003902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003906:	e099      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390e:	2b00      	cmp	r3, #0
 8003910:	d027      	beq.n	8003962 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0208 	orr.w	r2, r2, #8
 8003924:	b292      	uxth	r2, r2
 8003926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393c:	b292      	uxth	r2, r2
 800393e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0204 	orr.w	r2, r2, #4
 8003954:	b292      	uxth	r2, r2
 8003956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f009 f8d0 	bl	800cb00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003960:	e06c      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d040      	beq.n	80039ee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397e:	b292      	uxth	r2, r2
 8003980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d12b      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0204 	orr.w	r2, r2, #4
 80039a0:	b292      	uxth	r2, r2
 80039a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0208 	orr.w	r2, r2, #8
 80039b8:	b292      	uxth	r2, r2
 80039ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039dc:	2101      	movs	r1, #1
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f009 fa62 	bl	800cea8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80039e4:	e02a      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f009 f88a 	bl	800cb00 <HAL_PCD_SuspendCallback>
    return;
 80039ec:	e026      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00f      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f009 f848 	bl	800caa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a16:	e011      	b.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a34:	b292      	uxth	r2, r2
 8003a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a3a:	bf00      	nop
  }
}
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_PCD_SetAddress+0x1a>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e012      	b.n	8003a82 <HAL_PCD_SetAddress+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f007 f8d5 	bl	800ac22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	4608      	mov	r0, r1
 8003a94:	4611      	mov	r1, r2
 8003a96:	461a      	mov	r2, r3
 8003a98:	4603      	mov	r3, r0
 8003a9a:	70fb      	strb	r3, [r7, #3]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	803b      	strh	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da0e      	bge.n	8003ace <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	3310      	adds	r3, #16
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	705a      	strb	r2, [r3, #1]
 8003acc:	e00e      	b.n	8003aec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 0207 	and.w	r2, r3, #7
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003af8:	883a      	ldrh	r2, [r7, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	78ba      	ldrb	r2, [r7, #2]
 8003b02:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b04:	78bb      	ldrb	r3, [r7, #2]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d102      	bne.n	8003b10 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_PCD_EP_Open+0x94>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e00e      	b.n	8003b3c <HAL_PCD_EP_Open+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 fe17 	bl	8008760 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da0e      	bge.n	8003b76 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 0207 	and.w	r2, r3, #7
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	3310      	adds	r3, #16
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
 8003b74:	e00e      	b.n	8003b94 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	f003 0207 	and.w	r2, r3, #7
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_PCD_EP_Close+0x6a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e00e      	b.n	8003bcc <HAL_PCD_EP_Close+0x88>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f005 f993 	bl	8008ee8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	f003 0207 	and.w	r2, r3, #7
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2200      	movs	r2, #0
 8003c12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f005 fb4b 	bl	80092c2 <USB_EPStartXfer>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 0207 	and.w	r2, r3, #7
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	440b      	add	r3, r1
 8003c54:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003c58:	681b      	ldr	r3, [r3, #0]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	460b      	mov	r3, r1
 8003c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	f003 0207 	and.w	r2, r3, #7
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	3310      	adds	r3, #16
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6979      	ldr	r1, [r7, #20]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 fafc 	bl	80092c2 <USB_EPStartXfer>

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	7912      	ldrb	r2, [r2, #4]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e03e      	b.n	8003d70 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da0e      	bge.n	8003d18 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 0207 	and.w	r2, r3, #7
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	3310      	adds	r3, #16
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	705a      	strb	r2, [r3, #1]
 8003d16:	e00c      	b.n	8003d32 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_EP_SetStall+0x7e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e00e      	b.n	8003d70 <HAL_PCD_EP_SetStall+0x9c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f006 fe5f 	bl	800aa24 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	7912      	ldrb	r2, [r2, #4]
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e040      	b.n	8003e18 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da0e      	bge.n	8003dbc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 0207 	and.w	r2, r3, #7
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	3310      	adds	r3, #16
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	705a      	strb	r2, [r3, #1]
 8003dba:	e00e      	b.n	8003dda <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 0207 	and.w	r2, r3, #7
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_PCD_EP_ClrStall+0x82>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e00e      	b.n	8003e18 <HAL_PCD_EP_ClrStall+0xa0>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f006 fe5c 	bl	800aac6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b096      	sub	sp, #88	; 0x58
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e28:	e3ae      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003e44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f040 8170 	bne.w	800412e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d14d      	bne.n	8003ef6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	81fb      	strh	r3, [r7, #14]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	89fb      	ldrh	r3, [r7, #14]
 8003e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3310      	adds	r3, #16
 8003e82:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eaa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f008 fdd8 	bl	800ca72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7b1b      	ldrb	r3, [r3, #12]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 835d 	beq.w	8004588 <PCD_EP_ISR_Handler+0x768>
 8003ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 8358 	bne.w	8004588 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7b1b      	ldrb	r3, [r3, #12]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	731a      	strb	r2, [r3, #12]
 8003ef4:	e348      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003efc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d032      	beq.n	8003f7a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f48:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f006 fee4 	bl	800ad1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f60:	4013      	ands	r3, r2
 8003f62:	823b      	strh	r3, [r7, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	8a3a      	ldrh	r2, [r7, #16]
 8003f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f008 fd50 	bl	800ca18 <HAL_PCD_SetupStageCallback>
 8003f78:	e306      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f7a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f280 8302 	bge.w	8004588 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f90:	4013      	ands	r3, r2
 8003f92:	83fb      	strh	r3, [r7, #30]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	8bfa      	ldrh	r2, [r7, #30]
 8003f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <PCD_EP_ISR_Handler+0x1e6>
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe0:	6959      	ldr	r1, [r3, #20]
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f006 fe96 	bl	800ad1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f008 fd1b 	bl	800ca3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 82b5 	bne.w	8004588 <PCD_EP_ISR_Handler+0x768>
 800401e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004022:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800402a:	f000 82ad 	beq.w	8004588 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403c:	b29b      	uxth	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4413      	add	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004058:	b29a      	uxth	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b3e      	cmp	r3, #62	; 0x3e
 8004064:	d91d      	bls.n	80040a2 <PCD_EP_ISR_Handler+0x282>
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
 800406e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <PCD_EP_ISR_Handler+0x260>
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	3b01      	subs	r3, #1
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29a      	uxth	r2, r3
 8004086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004088:	b29b      	uxth	r3, r3
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	b29b      	uxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409a:	b29a      	uxth	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	e026      	b.n	80040f0 <PCD_EP_ISR_Handler+0x2d0>
 80040a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <PCD_EP_ISR_Handler+0x2a0>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	e017      	b.n	80040f0 <PCD_EP_ISR_Handler+0x2d0>
 80040c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	647b      	str	r3, [r7, #68]	; 0x44
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <PCD_EP_ISR_Handler+0x2ba>
 80040d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d6:	3301      	adds	r3, #1
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	827b      	strh	r3, [r7, #18]
 8004102:	8a7b      	ldrh	r3, [r7, #18]
 8004104:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004108:	827b      	strh	r3, [r7, #18]
 800410a:	8a7b      	ldrh	r3, [r7, #18]
 800410c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004110:	827b      	strh	r3, [r7, #18]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	8a7b      	ldrh	r3, [r7, #18]
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
 800412c:	e22c      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004142:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004146:	2b00      	cmp	r3, #0
 8004148:	f280 80f6 	bge.w	8004338 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29a      	uxth	r2, r3
 800415e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004162:	4013      	ands	r3, r2
 8004164:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800417a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800417e:	b292      	uxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004182:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419a:	7b1b      	ldrb	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d123      	bne.n	80041e8 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80041c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 808e 	beq.w	80042ee <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	6959      	ldr	r1, [r3, #20]
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	88da      	ldrh	r2, [r3, #6]
 80041de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041e2:	f006 fd9b 	bl	800ad1c <USB_ReadPMA>
 80041e6:	e082      	b.n	80042ee <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ea:	78db      	ldrb	r3, [r3, #3]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d10a      	bne.n	8004206 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041f4:	461a      	mov	r2, r3
 80041f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f9d3 	bl	80045a4 <HAL_PCD_EP_DB_Receive>
 80041fe:	4603      	mov	r3, r0
 8004200:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004204:	e073      	b.n	80042ee <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004220:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d022      	beq.n	80042aa <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4413      	add	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	4413      	add	r3, r2
 800427e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004288:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800428c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02c      	beq.n	80042ee <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429a:	6959      	ldr	r1, [r3, #20]
 800429c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429e:	891a      	ldrh	r2, [r3, #8]
 80042a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042a4:	f006 fd3a 	bl	800ad1c <USB_ReadPMA>
 80042a8:	e021      	b.n	80042ee <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80042d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e0:	6959      	ldr	r1, [r3, #20]
 80042e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e4:	895a      	ldrh	r2, [r3, #10]
 80042e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042ea:	f006 fd17 	bl	800ad1c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042f6:	441a      	add	r2, r3
 80042f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004304:	441a      	add	r2, r3
 8004306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004308:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800430a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <PCD_EP_ISR_Handler+0x4fe>
 8004312:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	d206      	bcs.n	800432c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800431e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f008 fb89 	bl	800ca3c <HAL_PCD_DataOutStageCallback>
 800432a:	e005      	b.n	8004338 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004332:	4618      	mov	r0, r3
 8004334:	f004 ffc5 	bl	80092c2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004338:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8121 	beq.w	8004588 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004346:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	3310      	adds	r3, #16
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29b      	uxth	r3, r3
 8004394:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004398:	78db      	ldrb	r3, [r3, #3]
 800439a:	2b01      	cmp	r3, #1
 800439c:	f040 80a2 	bne.w	80044e4 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80043a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a2:	2200      	movs	r2, #0
 80043a4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	7b1b      	ldrb	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8093 	beq.w	80044d6 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d046      	beq.n	800444a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d126      	bne.n	8004412 <PCD_EP_ISR_Handler+0x5f2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	4413      	add	r3, r2
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	00da      	lsls	r2, r3, #3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	4413      	add	r3, r2
 80043e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440a:	b29a      	uxth	r2, r3
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e061      	b.n	80044d6 <PCD_EP_ISR_Handler+0x6b6>
 8004412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d15d      	bne.n	80044d6 <PCD_EP_ISR_Handler+0x6b6>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	4413      	add	r3, r2
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	4413      	add	r3, r2
 800443c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	2200      	movs	r2, #0
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e045      	b.n	80044d6 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d126      	bne.n	80044a6 <PCD_EP_ISR_Handler+0x686>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004466:	b29b      	uxth	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	4413      	add	r3, r2
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
 8004470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	00da      	lsls	r2, r3, #3
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	4413      	add	r3, r2
 800447a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800448a:	b29a      	uxth	r2, r3
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e017      	b.n	80044d6 <PCD_EP_ISR_Handler+0x6b6>
 80044a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d113      	bne.n	80044d6 <PCD_EP_ISR_Handler+0x6b6>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	4413      	add	r3, r2
 80044be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	00da      	lsls	r2, r3, #3
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	4413      	add	r3, r2
 80044ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2200      	movs	r2, #0
 80044d4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f008 fac8 	bl	800ca72 <HAL_PCD_DataInStageCallback>
 80044e2:	e051      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d144      	bne.n	800457a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	4413      	add	r3, r2
 800450a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004514:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004520:	429a      	cmp	r2, r3
 8004522:	d907      	bls.n	8004534 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004530:	619a      	str	r2, [r3, #24]
 8004532:	e002      	b.n	800453a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004536:	2200      	movs	r2, #0
 8004538:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f008 fa92 	bl	800ca72 <HAL_PCD_DataInStageCallback>
 800454e:	e01b      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004558:	441a      	add	r2, r3
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800455e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004566:	441a      	add	r2, r3
 8004568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004572:	4618      	mov	r0, r3
 8004574:	f004 fea5 	bl	80092c2 <USB_EPStartXfer>
 8004578:	e006      	b.n	8004588 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800457a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800457e:	461a      	mov	r2, r3
 8004580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f917 	bl	80047b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004590:	b29b      	uxth	r3, r3
 8004592:	b21b      	sxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	f6ff ac48 	blt.w	8003e2a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3758      	adds	r7, #88	; 0x58
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d07c      	beq.n	80046b6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	4413      	add	r3, r2
 80045d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d306      	bcc.n	80045fa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	8b7b      	ldrh	r3, [r7, #26]
 80045f2:	1ad2      	subs	r2, r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	619a      	str	r2, [r3, #24]
 80045f8:	e002      	b.n	8004600 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2200      	movs	r2, #0
 80045fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d123      	bne.n	8004650 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	833b      	strh	r3, [r7, #24]
 8004624:	8b3b      	ldrh	r3, [r7, #24]
 8004626:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800462a:	833b      	strh	r3, [r7, #24]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	8b3b      	ldrh	r3, [r7, #24]
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01f      	beq.n	800469a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	82fb      	strh	r3, [r7, #22]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	8afb      	ldrh	r3, [r7, #22]
 8004686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004696:	b29b      	uxth	r3, r3
 8004698:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800469a:	8b7b      	ldrh	r3, [r7, #26]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8085 	beq.w	80047ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6959      	ldr	r1, [r3, #20]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	891a      	ldrh	r2, [r3, #8]
 80046ae:	8b7b      	ldrh	r3, [r7, #26]
 80046b0:	f006 fb34 	bl	800ad1c <USB_ReadPMA>
 80046b4:	e07a      	b.n	80047ac <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	4413      	add	r3, r2
 80046d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	8b7b      	ldrh	r3, [r7, #26]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d306      	bcc.n	80046f4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	8b7b      	ldrh	r3, [r7, #26]
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	619a      	str	r2, [r3, #24]
 80046f2:	e002      	b.n	80046fa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d123      	bne.n	800474a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	83fb      	strh	r3, [r7, #30]
 800471e:	8bfb      	ldrh	r3, [r7, #30]
 8004720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004724:	83fb      	strh	r3, [r7, #30]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11f      	bne.n	8004794 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	83bb      	strh	r3, [r7, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	8bbb      	ldrh	r3, [r7, #28]
 8004780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004794:	8b7b      	ldrh	r3, [r7, #26]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6959      	ldr	r1, [r3, #20]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	895a      	ldrh	r2, [r3, #10]
 80047a6:	8b7b      	ldrh	r3, [r7, #26]
 80047a8:	f006 fab8 	bl	800ad1c <USB_ReadPMA>
    }
  }

  return count;
 80047ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b0a4      	sub	sp, #144	; 0x90
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 81db 	beq.w	8004b86 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004800:	429a      	cmp	r2, r3
 8004802:	d907      	bls.n	8004814 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800480c:	1ad2      	subs	r2, r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	619a      	str	r2, [r3, #24]
 8004812:	e002      	b.n	800481a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 80b9 	bne.w	8004996 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d126      	bne.n	800487a <HAL_PCD_EP_DB_Transmit+0xc4>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	4413      	add	r3, r2
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	00da      	lsls	r2, r3, #3
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	4413      	add	r3, r2
 800484e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800485e:	b29a      	uxth	r2, r3
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	801a      	strh	r2, [r3, #0]
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004872:	b29a      	uxth	r2, r3
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e01a      	b.n	80048b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d116      	bne.n	80048b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004890:	b29b      	uxth	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	4413      	add	r3, r2
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	00da      	lsls	r2, r3, #3
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	4413      	add	r3, r2
 80048a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2200      	movs	r2, #0
 80048ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	785b      	ldrb	r3, [r3, #1]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d126      	bne.n	800490c <HAL_PCD_EP_DB_Transmit+0x156>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	00da      	lsls	r2, r3, #3
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004904:	b29a      	uxth	r2, r3
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	801a      	strh	r2, [r3, #0]
 800490a:	e017      	b.n	800493c <HAL_PCD_EP_DB_Transmit+0x186>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d113      	bne.n	800493c <HAL_PCD_EP_DB_Transmit+0x186>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800491c:	b29b      	uxth	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	4413      	add	r3, r2
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	00da      	lsls	r2, r3, #3
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	4413      	add	r3, r2
 8004930:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2200      	movs	r2, #0
 800493a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f008 f895 	bl	800ca72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 82fa 	beq.w	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	82fb      	strh	r3, [r7, #22]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	441a      	add	r2, r3
 800497e:	8afb      	ldrh	r3, [r7, #22]
 8004980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]
 8004994:	e2d8      	b.n	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d021      	beq.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	f040 82ac 	bne.w	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049f8:	441a      	add	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a06:	441a      	add	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d30b      	bcc.n	8004a30 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a28:	1ad2      	subs	r2, r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	621a      	str	r2, [r3, #32]
 8004a2e:	e017      	b.n	8004a60 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d108      	bne.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004a38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a48:	e00a      	b.n	8004a60 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d165      	bne.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	4413      	add	r3, r2
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	00da      	lsls	r2, r3, #3
 8004a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a88:	4413      	add	r3, r2
 8004a8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8004aa6:	d91d      	bls.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	029b      	lsls	r3, r3, #10
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	e044      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	e035      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x366>
 8004b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b18:	3301      	adds	r3, #1
 8004b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	029b      	lsls	r3, r3, #10
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	801a      	strh	r2, [r3, #0]
 8004b32:	e01c      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d118      	bne.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	647b      	str	r3, [r7, #68]	; 0x44
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b50:	4413      	add	r3, r2
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	00da      	lsls	r2, r3, #3
 8004b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b62:	643b      	str	r3, [r7, #64]	; 0x40
 8004b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6959      	ldr	r1, [r3, #20]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	891a      	ldrh	r2, [r3, #8]
 8004b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f006 f88a 	bl	800ac98 <USB_WritePMA>
 8004b84:	e1e0      	b.n	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004baa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d307      	bcc.n	8004bca <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	619a      	str	r2, [r3, #24]
 8004bc8:	e002      	b.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 80c0 	bne.w	8004d5a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d126      	bne.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	00da      	lsls	r2, r3, #3
 8004c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c02:	4413      	add	r3, r2
 8004c04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	e01a      	b.n	8004c66 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d116      	bne.n	8004c66 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c4c:	4413      	add	r3, r2
 8004c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	00da      	lsls	r2, r3, #3
 8004c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c58:	4413      	add	r3, r2
 8004c5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	677b      	str	r3, [r7, #116]	; 0x74
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d12b      	bne.n	8004ccc <HAL_PCD_EP_DB_Transmit+0x516>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c88:	4413      	add	r3, r2
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	00da      	lsls	r2, r3, #3
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e017      	b.n	8004cfc <HAL_PCD_EP_DB_Transmit+0x546>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d113      	bne.n	8004cfc <HAL_PCD_EP_DB_Transmit+0x546>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce2:	4413      	add	r3, r2
 8004ce4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	00da      	lsls	r2, r3, #3
 8004cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cee:	4413      	add	r3, r2
 8004cf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f007 feb5 	bl	800ca72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 811a 	bne.w	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]
 8004d58:	e0f6      	b.n	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d121      	bne.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	f040 80ca 	bne.w	8004f48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dbc:	441a      	add	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dca:	441a      	add	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d30b      	bcc.n	8004df4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dec:	1ad2      	subs	r2, r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	621a      	str	r2, [r3, #32]
 8004df2:	e017      	b.n	8004e24 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004dfc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e0c:	e00a      	b.n	8004e24 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	657b      	str	r3, [r7, #84]	; 0x54
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d165      	bne.n	8004efe <HAL_PCD_EP_DB_Transmit+0x748>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e46:	4413      	add	r3, r2
 8004e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	00da      	lsls	r2, r3, #3
 8004e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e58:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e70:	d91d      	bls.n	8004eae <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	e041      	b.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_PCD_EP_DB_Transmit+0x716>
 8004eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	e032      	b.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x730>
 8004ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	029b      	lsls	r3, r3, #10
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	e019      	b.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d115      	bne.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f14:	4413      	add	r3, r2
 8004f16:	657b      	str	r3, [r7, #84]	; 0x54
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	00da      	lsls	r2, r3, #3
 8004f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f26:	653b      	str	r3, [r7, #80]	; 0x50
 8004f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f30:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6959      	ldr	r1, [r3, #20]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	895a      	ldrh	r2, [r3, #10]
 8004f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f005 fea8 	bl	800ac98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f62:	82bb      	strh	r3, [r7, #20]
 8004f64:	8abb      	ldrh	r3, [r7, #20]
 8004f66:	f083 0310 	eor.w	r3, r3, #16
 8004f6a:	82bb      	strh	r3, [r7, #20]
 8004f6c:	8abb      	ldrh	r3, [r7, #20]
 8004f6e:	f083 0320 	eor.w	r3, r3, #32
 8004f72:	82bb      	strh	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	8abb      	ldrh	r3, [r7, #20]
 8004f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3790      	adds	r7, #144	; 0x90
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	817b      	strh	r3, [r7, #10]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004fb4:	897b      	ldrh	r3, [r7, #10]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc0:	897b      	ldrh	r3, [r7, #10]
 8004fc2:	f003 0207 	and.w	r2, r3, #7
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	3310      	adds	r3, #16
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e009      	b.n	8004fec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fd8:	897a      	ldrh	r2, [r7, #10]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004fec:	893b      	ldrh	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	80da      	strh	r2, [r3, #6]
 8005000:	e00b      	b.n	800501a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2201      	movs	r2, #1
 8005006:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	b29a      	uxth	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0c1b      	lsrs	r3, r3, #16
 8005014:	b29a      	uxth	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800504c:	b29b      	uxth	r3, r3
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005060:	b29b      	uxth	r3, r3
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d141      	bne.n	800510e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800508a:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005096:	d131      	bne.n	80050fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005098:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509e:	4a46      	ldr	r2, [pc, #280]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050a8:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b0:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050b8:	4b40      	ldr	r3, [pc, #256]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2232      	movs	r2, #50	; 0x32
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	4a3f      	ldr	r2, [pc, #252]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	0c9b      	lsrs	r3, r3, #18
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ce:	e002      	b.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e2:	d102      	bne.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f2      	bne.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ea:	4b33      	ldr	r3, [pc, #204]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d158      	bne.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e057      	b.n	80051ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050fc:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005102:	4a2d      	ldr	r2, [pc, #180]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800510c:	e04d      	b.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d141      	bne.n	800519a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d131      	bne.n	8005188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005124:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512a:	4a23      	ldr	r2, [pc, #140]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005134:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800513c:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005144:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2232      	movs	r2, #50	; 0x32
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	0c9b      	lsrs	r3, r3, #18
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800515a:	e002      	b.n	8005162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3b01      	subs	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516e:	d102      	bne.n	8005176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f2      	bne.n	800515c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d112      	bne.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e011      	b.n	80051ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005198:	e007      	b.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800519a:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051a2:	4a05      	ldr	r2, [pc, #20]	; (80051b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40007000 	.word	0x40007000
 80051bc:	20000000 	.word	0x20000000
 80051c0:	431bde83 	.word	0x431bde83

080051c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d2:	6093      	str	r3, [r2, #8]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40007000 	.word	0x40007000

080051e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e2fe      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d075      	beq.n	80052ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005202:	4b97      	ldr	r3, [pc, #604]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800520c:	4b94      	ldr	r3, [pc, #592]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b0c      	cmp	r3, #12
 800521a:	d102      	bne.n	8005222 <HAL_RCC_OscConfig+0x3e>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d002      	beq.n	8005228 <HAL_RCC_OscConfig+0x44>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d10b      	bne.n	8005240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005228:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d05b      	beq.n	80052ec <HAL_RCC_OscConfig+0x108>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d157      	bne.n	80052ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e2d9      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d106      	bne.n	8005258 <HAL_RCC_OscConfig+0x74>
 800524a:	4b85      	ldr	r3, [pc, #532]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a84      	ldr	r2, [pc, #528]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e01d      	b.n	8005294 <HAL_RCC_OscConfig+0xb0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0x98>
 8005262:	4b7f      	ldr	r3, [pc, #508]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7e      	ldr	r2, [pc, #504]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4b7c      	ldr	r3, [pc, #496]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7b      	ldr	r2, [pc, #492]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e00b      	b.n	8005294 <HAL_RCC_OscConfig+0xb0>
 800527c:	4b78      	ldr	r3, [pc, #480]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a77      	ldr	r2, [pc, #476]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	4b75      	ldr	r3, [pc, #468]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a74      	ldr	r2, [pc, #464]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800528e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d013      	beq.n	80052c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fc febe 	bl	800201c <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fc feba 	bl	800201c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e29e      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052b6:	4b6a      	ldr	r3, [pc, #424]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0xc0>
 80052c2:	e014      	b.n	80052ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fc feaa 	bl	800201c <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fc fea6 	bl	800201c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e28a      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052de:	4b60      	ldr	r3, [pc, #384]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0xe8>
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d075      	beq.n	80053e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fa:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005304:	4b56      	ldr	r3, [pc, #344]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d102      	bne.n	800531a <HAL_RCC_OscConfig+0x136>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d002      	beq.n	8005320 <HAL_RCC_OscConfig+0x13c>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d11f      	bne.n	8005360 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005320:	4b4f      	ldr	r3, [pc, #316]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_OscConfig+0x154>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e25d      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	4b49      	ldr	r3, [pc, #292]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	4946      	ldr	r1, [pc, #280]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800534c:	4b45      	ldr	r3, [pc, #276]	; (8005464 <HAL_RCC_OscConfig+0x280>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f7fc fe17 	bl	8001f84 <HAL_InitTick>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d043      	beq.n	80053e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e249      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d023      	beq.n	80053b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005368:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a3c      	ldr	r2, [pc, #240]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800536e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc fe52 	bl	800201c <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800537c:	f7fc fe4e 	bl	800201c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e232      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800538e:	4b34      	ldr	r3, [pc, #208]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	061b      	lsls	r3, r3, #24
 80053a8:	492d      	ldr	r1, [pc, #180]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	604b      	str	r3, [r1, #4]
 80053ae:	e01a      	b.n	80053e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b0:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fc fe2e 	bl	800201c <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fc fe2a 	bl	800201c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e20e      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1e0>
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d041      	beq.n	8005476 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01c      	beq.n	8005434 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 80053fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540a:	f7fc fe07 	bl	800201c <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005412:	f7fc fe03 	bl	800201c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e1e7      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ef      	beq.n	8005412 <HAL_RCC_OscConfig+0x22e>
 8005432:	e020      	b.n	8005476 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 8005436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <HAL_RCC_OscConfig+0x27c>)
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fc fdea 	bl	800201c <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800544a:	e00d      	b.n	8005468 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800544c:	f7fc fde6 	bl	800201c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d906      	bls.n	8005468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e1ca      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
 8005464:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005468:	4b8c      	ldr	r3, [pc, #560]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ea      	bne.n	800544c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80a6 	beq.w	80055d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005488:	4b84      	ldr	r3, [pc, #528]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_OscConfig+0x2b4>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x2b6>
 8005498:	2300      	movs	r3, #0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549e:	4b7f      	ldr	r3, [pc, #508]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	4a7e      	ldr	r2, [pc, #504]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80054a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a8:	6593      	str	r3, [r2, #88]	; 0x58
 80054aa:	4b7c      	ldr	r3, [pc, #496]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054b6:	2301      	movs	r3, #1
 80054b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ba:	4b79      	ldr	r3, [pc, #484]	; (80056a0 <HAL_RCC_OscConfig+0x4bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d118      	bne.n	80054f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCC_OscConfig+0x4bc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a75      	ldr	r2, [pc, #468]	; (80056a0 <HAL_RCC_OscConfig+0x4bc>)
 80054cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d2:	f7fc fda3 	bl	800201c <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054da:	f7fc fd9f 	bl	800201c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e183      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ec:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <HAL_RCC_OscConfig+0x4bc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d108      	bne.n	8005512 <HAL_RCC_OscConfig+0x32e>
 8005500:	4b66      	ldr	r3, [pc, #408]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005510:	e024      	b.n	800555c <HAL_RCC_OscConfig+0x378>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b05      	cmp	r3, #5
 8005518:	d110      	bne.n	800553c <HAL_RCC_OscConfig+0x358>
 800551a:	4b60      	ldr	r3, [pc, #384]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	4a5e      	ldr	r2, [pc, #376]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f043 0304 	orr.w	r3, r3, #4
 8005526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800552a:	4b5c      	ldr	r3, [pc, #368]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	4a5a      	ldr	r2, [pc, #360]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800553a:	e00f      	b.n	800555c <HAL_RCC_OscConfig+0x378>
 800553c:	4b57      	ldr	r3, [pc, #348]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	4a56      	ldr	r2, [pc, #344]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800554c:	4b53      	ldr	r3, [pc, #332]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	4a52      	ldr	r2, [pc, #328]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d016      	beq.n	8005592 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fc fd5a 	bl	800201c <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fc fd56 	bl	800201c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e138      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005582:	4b46      	ldr	r3, [pc, #280]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ed      	beq.n	800556c <HAL_RCC_OscConfig+0x388>
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005592:	f7fc fd43 	bl	800201c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fc fd3f 	bl	800201c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e121      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b0:	4b3a      	ldr	r3, [pc, #232]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ed      	bne.n	800559a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055be:	7ffb      	ldrb	r3, [r7, #31]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	4a34      	ldr	r2, [pc, #208]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d03c      	beq.n	8005656 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01c      	beq.n	800561e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055e4:	4b2d      	ldr	r3, [pc, #180]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fc fd12 	bl	800201c <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055fc:	f7fc fd0e 	bl	800201c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0f2      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <HAL_RCC_OscConfig+0x418>
 800561c:	e01b      	b.n	8005656 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005624:	4a1d      	ldr	r2, [pc, #116]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fc fcf5 	bl	800201c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005636:	f7fc fcf1 	bl	800201c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0d5      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800564a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ef      	bne.n	8005636 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80c9 	beq.w	80057f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 030c 	and.w	r3, r3, #12
 8005668:	2b0c      	cmp	r3, #12
 800566a:	f000 8083 	beq.w	8005774 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d15e      	bne.n	8005734 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a08      	ldr	r2, [pc, #32]	; (800569c <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fc fccb 	bl	800201c <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005688:	e00c      	b.n	80056a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568a:	f7fc fcc7 	bl	800201c <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d905      	bls.n	80056a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e0ab      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
 800569c:	40021000 	.word	0x40021000
 80056a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a4:	4b55      	ldr	r3, [pc, #340]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ec      	bne.n	800568a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b0:	4b52      	ldr	r3, [pc, #328]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	4b52      	ldr	r3, [pc, #328]	; (8005800 <HAL_RCC_OscConfig+0x61c>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6a11      	ldr	r1, [r2, #32]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056c0:	3a01      	subs	r2, #1
 80056c2:	0112      	lsls	r2, r2, #4
 80056c4:	4311      	orrs	r1, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056ca:	0212      	lsls	r2, r2, #8
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056d2:	0852      	lsrs	r2, r2, #1
 80056d4:	3a01      	subs	r2, #1
 80056d6:	0552      	lsls	r2, r2, #21
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056de:	0852      	lsrs	r2, r2, #1
 80056e0:	3a01      	subs	r2, #1
 80056e2:	0652      	lsls	r2, r2, #25
 80056e4:	4311      	orrs	r1, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056ea:	06d2      	lsls	r2, r2, #27
 80056ec:	430a      	orrs	r2, r1
 80056ee:	4943      	ldr	r1, [pc, #268]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f4:	4b41      	ldr	r3, [pc, #260]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a40      	ldr	r2, [pc, #256]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a3d      	ldr	r2, [pc, #244]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 8005706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800570a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fc fc86 	bl	800201c <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005714:	f7fc fc82 	bl	800201c <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e066      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005726:	4b35      	ldr	r3, [pc, #212]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0x530>
 8005732:	e05e      	b.n	80057f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005734:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 800573a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800573e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fc fc6c 	bl	800201c <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005748:	f7fc fc68 	bl	800201c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e04c      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575a:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005766:	4b25      	ldr	r3, [pc, #148]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	4924      	ldr	r1, [pc, #144]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 800576c:	4b25      	ldr	r3, [pc, #148]	; (8005804 <HAL_RCC_OscConfig+0x620>)
 800576e:	4013      	ands	r3, r2
 8005770:	60cb      	str	r3, [r1, #12]
 8005772:	e03e      	b.n	80057f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e039      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <HAL_RCC_OscConfig+0x618>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f003 0203 	and.w	r2, r3, #3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	429a      	cmp	r2, r3
 8005792:	d12c      	bne.n	80057ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	3b01      	subs	r3, #1
 80057a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d123      	bne.n	80057ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d11b      	bne.n	80057ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d113      	bne.n	80057ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	3b01      	subs	r3, #1
 80057d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d109      	bne.n	80057ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d001      	beq.n	80057f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40021000 	.word	0x40021000
 8005800:	019f800c 	.word	0x019f800c
 8005804:	feeefffc 	.word	0xfeeefffc

08005808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e11e      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b91      	ldr	r3, [pc, #580]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b8e      	ldr	r3, [pc, #568]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 020f 	bic.w	r2, r3, #15
 8005836:	498c      	ldr	r1, [pc, #560]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e106      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d073      	beq.n	8005944 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d129      	bne.n	80058b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005864:	4b81      	ldr	r3, [pc, #516]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0f4      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005874:	f000 f99e 	bl	8005bb4 <RCC_GetSysClockFreqFromPLLSource>
 8005878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4a7c      	ldr	r2, [pc, #496]	; (8005a70 <HAL_RCC_ClockConfig+0x268>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d93f      	bls.n	8005902 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005882:	4b7a      	ldr	r3, [pc, #488]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d033      	beq.n	8005902 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d12f      	bne.n	8005902 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058a2:	4b72      	ldr	r3, [pc, #456]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058aa:	4a70      	ldr	r2, [pc, #448]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e024      	b.n	8005902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058c0:	4b6a      	ldr	r3, [pc, #424]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0c6      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d0:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0be      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058e0:	f000 f8ce 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a61      	ldr	r2, [pc, #388]	; (8005a70 <HAL_RCC_ClockConfig+0x268>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d909      	bls.n	8005902 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ee:	4b5f      	ldr	r3, [pc, #380]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f6:	4a5d      	ldr	r2, [pc, #372]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80058f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005902:	4b5a      	ldr	r3, [pc, #360]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 0203 	bic.w	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4957      	ldr	r1, [pc, #348]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005910:	4313      	orrs	r3, r2
 8005912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fc fb82 	bl	800201c <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	e00a      	b.n	8005932 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800591c:	f7fc fb7e 	bl	800201c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e095      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 020c 	and.w	r2, r3, #12
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	429a      	cmp	r2, r3
 8005942:	d1eb      	bne.n	800591c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d023      	beq.n	8005998 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800595c:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4a42      	ldr	r2, [pc, #264]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005966:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005974:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800597c:	4a3b      	ldr	r2, [pc, #236]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 800597e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b39      	ldr	r3, [pc, #228]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4936      	ldr	r1, [pc, #216]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
 8005996:	e008      	b.n	80059aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d105      	bne.n	80059aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800599e:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4a32      	ldr	r2, [pc, #200]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 80059a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059aa:	4b2f      	ldr	r3, [pc, #188]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d21d      	bcs.n	80059f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b8:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f023 020f 	bic.w	r2, r3, #15
 80059c0:	4929      	ldr	r1, [pc, #164]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059c8:	f7fc fb28 	bl	800201c <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fc fb24 	bl	800201c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e03b      	b.n	8005a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <HAL_RCC_ClockConfig+0x260>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1ed      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4917      	ldr	r1, [pc, #92]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	490f      	ldr	r1, [pc, #60]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a32:	f000 f825 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <HAL_RCC_ClockConfig+0x264>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	490c      	ldr	r1, [pc, #48]	; (8005a74 <HAL_RCC_ClockConfig+0x26c>)
 8005a44:	5ccb      	ldrb	r3, [r1, r3]
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <HAL_RCC_ClockConfig+0x270>)
 8005a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCC_ClockConfig+0x274>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fc fa94 	bl	8001f84 <HAL_InitTick>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40022000 	.word	0x40022000
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	04c4b400 	.word	0x04c4b400
 8005a74:	0800d170 	.word	0x0800d170
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	20000004 	.word	0x20000004

08005a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a86:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d102      	bne.n	8005a98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a92:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	e047      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d102      	bne.n	8005aaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005aa4:	4b26      	ldr	r3, [pc, #152]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	e03e      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d136      	bne.n	8005b24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ab6:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	3301      	adds	r3, #1
 8005acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d10c      	bne.n	8005aee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad4:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ade:	68d2      	ldr	r2, [r2, #12]
 8005ae0:	0a12      	lsrs	r2, r2, #8
 8005ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	617b      	str	r3, [r7, #20]
      break;
 8005aec:	e00c      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aee:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	0a12      	lsrs	r2, r2, #8
 8005afc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b00:	fb02 f303 	mul.w	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
      break;
 8005b06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	0e5b      	lsrs	r3, r3, #25
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	3301      	adds	r3, #1
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e001      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b28:	693b      	ldr	r3, [r7, #16]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	007a1200 	.word	0x007a1200

08005b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000000 	.word	0x20000000

08005b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b60:	f7ff fff0 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b64:	4602      	mov	r2, r0
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	4904      	ldr	r1, [pc, #16]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b72:	5ccb      	ldrb	r3, [r1, r3]
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000
 8005b84:	0800d180 	.word	0x0800d180

08005b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b8c:	f7ff ffda 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0adb      	lsrs	r3, r3, #11
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	0800d180 	.word	0x0800d180

08005bb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bba:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc4:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	3301      	adds	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d10c      	bne.n	8005bf2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bd8:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be2:	68d2      	ldr	r2, [r2, #12]
 8005be4:	0a12      	lsrs	r2, r2, #8
 8005be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	617b      	str	r3, [r7, #20]
    break;
 8005bf0:	e00c      	b.n	8005c0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	4a0e      	ldr	r2, [pc, #56]	; (8005c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bfc:	68d2      	ldr	r2, [r2, #12]
 8005bfe:	0a12      	lsrs	r2, r2, #8
 8005c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c04:	fb02 f303 	mul.w	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]
    break;
 8005c0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	0e5b      	lsrs	r3, r3, #25
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c26:	687b      	ldr	r3, [r7, #4]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40021000 	.word	0x40021000
 8005c38:	007a1200 	.word	0x007a1200
 8005c3c:	00f42400 	.word	0x00f42400

08005c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c48:	2300      	movs	r3, #0
 8005c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8098 	beq.w	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10d      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6e:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c72:	4a3f      	ldr	r2, [pc, #252]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6593      	str	r3, [r2, #88]	; 0x58
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c86:	2301      	movs	r3, #1
 8005c88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8a:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a39      	ldr	r2, [pc, #228]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c96:	f7fc f9c1 	bl	800201c <HAL_GetTick>
 8005c9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c9c:	e009      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9e:	f7fc f9bd 	bl	800201c <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d902      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	74fb      	strb	r3, [r7, #19]
        break;
 8005cb0:	e005      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb2:	4b30      	ldr	r3, [pc, #192]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ef      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d159      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cc4:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01e      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d019      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ce0:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cfc:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d0c:	4a18      	ldr	r2, [pc, #96]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d016      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fc f97d 	bl	800201c <HAL_GetTick>
 8005d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d24:	e00b      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fc f979 	bl	800201c <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d902      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8005d3c:	e006      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ec      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	4903      	ldr	r1, [pc, #12]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d68:	e008      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	74bb      	strb	r3, [r7, #18]
 8005d6e:	e005      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d70:	40021000 	.word	0x40021000
 8005d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d7c:	7c7b      	ldrb	r3, [r7, #17]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d105      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d82:	4ba6      	ldr	r3, [pc, #664]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	4aa5      	ldr	r2, [pc, #660]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d9a:	4ba0      	ldr	r3, [pc, #640]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f023 0203 	bic.w	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	499c      	ldr	r1, [pc, #624]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dbc:	4b97      	ldr	r3, [pc, #604]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f023 020c 	bic.w	r2, r3, #12
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	4994      	ldr	r1, [pc, #592]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dde:	4b8f      	ldr	r3, [pc, #572]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	498b      	ldr	r1, [pc, #556]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e00:	4b86      	ldr	r3, [pc, #536]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	4983      	ldr	r1, [pc, #524]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e22:	4b7e      	ldr	r3, [pc, #504]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	497a      	ldr	r1, [pc, #488]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e44:	4b75      	ldr	r3, [pc, #468]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	4972      	ldr	r1, [pc, #456]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e66:	4b6d      	ldr	r3, [pc, #436]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4969      	ldr	r1, [pc, #420]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e88:	4b64      	ldr	r3, [pc, #400]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	4961      	ldr	r1, [pc, #388]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eaa:	4b5c      	ldr	r3, [pc, #368]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	4958      	ldr	r1, [pc, #352]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ecc:	4b53      	ldr	r3, [pc, #332]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	4950      	ldr	r1, [pc, #320]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eec:	4b4b      	ldr	r3, [pc, #300]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a4a      	ldr	r2, [pc, #296]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ef6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f04:	4b45      	ldr	r3, [pc, #276]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	4942      	ldr	r1, [pc, #264]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f22:	d105      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f24:	4b3d      	ldr	r3, [pc, #244]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a3c      	ldr	r2, [pc, #240]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f3c:	4b37      	ldr	r3, [pc, #220]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4934      	ldr	r1, [pc, #208]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5c:	4b2f      	ldr	r3, [pc, #188]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4a2e      	ldr	r2, [pc, #184]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f74:	4b29      	ldr	r3, [pc, #164]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	4926      	ldr	r1, [pc, #152]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f94:	4b21      	ldr	r3, [pc, #132]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	4918      	ldr	r1, [pc, #96]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a12      	ldr	r2, [pc, #72]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	490a      	ldr	r1, [pc, #40]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006010:	7cbb      	ldrb	r3, [r7, #18]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000

08006020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e049      	b.n	80060c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb fde6 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f000 ff48 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d001      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e04a      	b.n	800617e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a21      	ldr	r2, [pc, #132]	; (800618c <HAL_TIM_Base_Start_IT+0xbc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d013      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <HAL_TIM_Base_Start_IT+0xc0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_TIM_Base_Start_IT+0xc4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_TIM_Base_Start_IT+0xc8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x6c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a19      	ldr	r2, [pc, #100]	; (800619c <HAL_TIM_Base_Start_IT+0xcc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d115      	bne.n	8006168 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b06      	cmp	r3, #6
 800614c:	d015      	beq.n	800617a <HAL_TIM_Base_Start_IT+0xaa>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d011      	beq.n	800617a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006166:	e008      	b.n	800617a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e000      	b.n	800617c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40013400 	.word	0x40013400
 800619c:	40014000 	.word	0x40014000
 80061a0:	00010007 	.word	0x00010007

080061a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e049      	b.n	800624a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb fd04 	bl	8001bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fe86 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d109      	bne.n	8006278 <HAL_TIM_PWM_Start+0x24>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	e03c      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b04      	cmp	r3, #4
 800627c:	d109      	bne.n	8006292 <HAL_TIM_PWM_Start+0x3e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b01      	cmp	r3, #1
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e02f      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d109      	bne.n	80062ac <HAL_TIM_PWM_Start+0x58>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e022      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d109      	bne.n	80062c6 <HAL_TIM_PWM_Start+0x72>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	bf14      	ite	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	2300      	moveq	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	e015      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d109      	bne.n	80062e0 <HAL_TIM_PWM_Start+0x8c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e008      	b.n	80062f2 <HAL_TIM_PWM_Start+0x9e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e097      	b.n	800642a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start+0xb6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	e023      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start+0xc6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006318:	e01b      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b08      	cmp	r3, #8
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start+0xd6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006328:	e013      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Start+0xe6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006338:	e00b      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b10      	cmp	r3, #16
 800633e:	d104      	bne.n	800634a <HAL_TIM_PWM_Start+0xf6>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	e003      	b.n	8006352 <HAL_TIM_PWM_Start+0xfe>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f001 f9f8 	bl	8007750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a33      	ldr	r2, [pc, #204]	; (8006434 <HAL_TIM_PWM_Start+0x1e0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a32      	ldr	r2, [pc, #200]	; (8006438 <HAL_TIM_PWM_Start+0x1e4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a30      	ldr	r2, [pc, #192]	; (800643c <HAL_TIM_PWM_Start+0x1e8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d009      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <HAL_TIM_PWM_Start+0x1ec>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIM_PWM_Start+0x13e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <HAL_TIM_PWM_Start+0x1f0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_Start+0x142>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <HAL_TIM_PWM_Start+0x144>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a20      	ldr	r2, [pc, #128]	; (8006434 <HAL_TIM_PWM_Start+0x1e0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d018      	beq.n	80063e8 <HAL_TIM_PWM_Start+0x194>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063be:	d013      	beq.n	80063e8 <HAL_TIM_PWM_Start+0x194>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a20      	ldr	r2, [pc, #128]	; (8006448 <HAL_TIM_PWM_Start+0x1f4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00e      	beq.n	80063e8 <HAL_TIM_PWM_Start+0x194>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1f      	ldr	r2, [pc, #124]	; (800644c <HAL_TIM_PWM_Start+0x1f8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d009      	beq.n	80063e8 <HAL_TIM_PWM_Start+0x194>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a17      	ldr	r2, [pc, #92]	; (8006438 <HAL_TIM_PWM_Start+0x1e4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_TIM_PWM_Start+0x194>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <HAL_TIM_PWM_Start+0x1e8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d115      	bne.n	8006414 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	4b18      	ldr	r3, [pc, #96]	; (8006450 <HAL_TIM_PWM_Start+0x1fc>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d015      	beq.n	8006426 <HAL_TIM_PWM_Start+0x1d2>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d011      	beq.n	8006426 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	e008      	b.n	8006426 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e000      	b.n	8006428 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40012c00 	.word	0x40012c00
 8006438:	40013400 	.word	0x40013400
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800
 8006448:	40000400 	.word	0x40000400
 800644c:	40000800 	.word	0x40000800
 8006450:	00010007 	.word	0x00010007

08006454 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f001 f972 	bl	8007750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a3e      	ldr	r2, [pc, #248]	; (800656c <HAL_TIM_PWM_Stop+0x118>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <HAL_TIM_PWM_Stop+0x4a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a3d      	ldr	r2, [pc, #244]	; (8006570 <HAL_TIM_PWM_Stop+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIM_PWM_Stop+0x4a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a3b      	ldr	r2, [pc, #236]	; (8006574 <HAL_TIM_PWM_Stop+0x120>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIM_PWM_Stop+0x4a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3a      	ldr	r2, [pc, #232]	; (8006578 <HAL_TIM_PWM_Stop+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIM_PWM_Stop+0x4a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a38      	ldr	r2, [pc, #224]	; (800657c <HAL_TIM_PWM_Stop+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_TIM_PWM_Stop+0x4e>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <HAL_TIM_PWM_Stop+0x50>
 80064a2:	2300      	movs	r3, #0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6a1a      	ldr	r2, [r3, #32]
 80064ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <HAL_TIM_PWM_Stop+0x84>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f244 4344 	movw	r3, #17476	; 0x4444
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_PWM_Stop+0x84>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	f241 1311 	movw	r3, #4369	; 0x1111
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10f      	bne.n	8006508 <HAL_TIM_PWM_Stop+0xb4>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	f244 4344 	movw	r3, #17476	; 0x4444
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d107      	bne.n	8006508 <HAL_TIM_PWM_Stop+0xb4>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_TIM_PWM_Stop+0xc4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006516:	e023      	b.n	8006560 <HAL_TIM_PWM_Stop+0x10c>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d104      	bne.n	8006528 <HAL_TIM_PWM_Stop+0xd4>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006526:	e01b      	b.n	8006560 <HAL_TIM_PWM_Stop+0x10c>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d104      	bne.n	8006538 <HAL_TIM_PWM_Stop+0xe4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006536:	e013      	b.n	8006560 <HAL_TIM_PWM_Stop+0x10c>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b0c      	cmp	r3, #12
 800653c:	d104      	bne.n	8006548 <HAL_TIM_PWM_Stop+0xf4>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006546:	e00b      	b.n	8006560 <HAL_TIM_PWM_Stop+0x10c>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b10      	cmp	r3, #16
 800654c:	d104      	bne.n	8006558 <HAL_TIM_PWM_Stop+0x104>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006556:	e003      	b.n	8006560 <HAL_TIM_PWM_Stop+0x10c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40013400 	.word	0x40013400
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800

08006580 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e097      	b.n	80066c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7fb faa3 	bl	8001af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 fc8d 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	4313      	orrs	r3, r2
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006620:	f023 030c 	bic.w	r3, r3, #12
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800662c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	4313      	orrs	r3, r2
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	011a      	lsls	r2, r3, #4
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	4313      	orrs	r3, r2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	4313      	orrs	r3, r2
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d110      	bne.n	800671e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d102      	bne.n	8006708 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006702:	7b7b      	ldrb	r3, [r7, #13]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d001      	beq.n	800670c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e069      	b.n	80067e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800671c:	e031      	b.n	8006782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d110      	bne.n	8006746 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d102      	bne.n	8006730 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800672a:	7b3b      	ldrb	r3, [r7, #12]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d001      	beq.n	8006734 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e055      	b.n	80067e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006744:	e01d      	b.n	8006782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d108      	bne.n	800675e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d105      	bne.n	800675e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006752:	7b7b      	ldrb	r3, [r7, #13]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d102      	bne.n	800675e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006758:	7b3b      	ldrb	r3, [r7, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d001      	beq.n	8006762 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e03e      	b.n	80067e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_TIM_Encoder_Start+0xc4>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d008      	beq.n	80067a0 <HAL_TIM_Encoder_Start+0xd4>
 800678e:	e00f      	b.n	80067b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2201      	movs	r2, #1
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f000 ffd9 	bl	8007750 <TIM_CCxChannelCmd>
      break;
 800679e:	e016      	b.n	80067ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	2104      	movs	r1, #4
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 ffd1 	bl	8007750 <TIM_CCxChannelCmd>
      break;
 80067ae:	e00e      	b.n	80067ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 ffc9 	bl	8007750 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2201      	movs	r2, #1
 80067c4:	2104      	movs	r1, #4
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 ffc2 	bl	8007750 <TIM_CCxChannelCmd>
      break;
 80067cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01b      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0202 	mvn.w	r2, #2
 800681c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb40 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006838:	e005      	b.n	8006846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb32 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb43 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d020      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0204 	mvn.w	r2, #4
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fb1a 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb0c 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fb1d 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0208 	mvn.w	r2, #8
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 faf4 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fae6 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 faf7 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 face 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fac0 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fad1 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0201 	mvn.w	r2, #1
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa fe2a 	bl	80015a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f825 	bl	80079cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f81d 	bl	80079e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa8b 	bl	8006ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0220 	mvn.w	r2, #32
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 ffe5 	bl	80079b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00c      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fff1 	bl	80079f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 ffe9 	bl	8007a08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 ffe1 	bl	8007a1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00c      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 ffd9 	bl	8007a30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e0ff      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b14      	cmp	r3, #20
 8006ab2:	f200 80f0 	bhi.w	8006c96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006c97 	.word	0x08006c97
 8006ac4:	08006c97 	.word	0x08006c97
 8006ac8:	08006c97 	.word	0x08006c97
 8006acc:	08006b51 	.word	0x08006b51
 8006ad0:	08006c97 	.word	0x08006c97
 8006ad4:	08006c97 	.word	0x08006c97
 8006ad8:	08006c97 	.word	0x08006c97
 8006adc:	08006b93 	.word	0x08006b93
 8006ae0:	08006c97 	.word	0x08006c97
 8006ae4:	08006c97 	.word	0x08006c97
 8006ae8:	08006c97 	.word	0x08006c97
 8006aec:	08006bd3 	.word	0x08006bd3
 8006af0:	08006c97 	.word	0x08006c97
 8006af4:	08006c97 	.word	0x08006c97
 8006af8:	08006c97 	.word	0x08006c97
 8006afc:	08006c15 	.word	0x08006c15
 8006b00:	08006c97 	.word	0x08006c97
 8006b04:	08006c97 	.word	0x08006c97
 8006b08:	08006c97 	.word	0x08006c97
 8006b0c:	08006c55 	.word	0x08006c55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fa88 	bl	800702c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0208 	orr.w	r2, r2, #8
 8006b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0204 	bic.w	r2, r2, #4
 8006b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6999      	ldr	r1, [r3, #24]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	691a      	ldr	r2, [r3, #16]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	619a      	str	r2, [r3, #24]
      break;
 8006b4e:	e0a5      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 faf8 	bl	800714c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6999      	ldr	r1, [r3, #24]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	021a      	lsls	r2, r3, #8
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	619a      	str	r2, [r3, #24]
      break;
 8006b90:	e084      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fb61 	bl	8007260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0208 	orr.w	r2, r2, #8
 8006bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0204 	bic.w	r2, r2, #4
 8006bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69d9      	ldr	r1, [r3, #28]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	61da      	str	r2, [r3, #28]
      break;
 8006bd0:	e064      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fbc9 	bl	8007370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69d9      	ldr	r1, [r3, #28]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	021a      	lsls	r2, r3, #8
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	61da      	str	r2, [r3, #28]
      break;
 8006c12:	e043      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fc32 	bl	8007484 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0208 	orr.w	r2, r2, #8
 8006c2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0204 	bic.w	r2, r2, #4
 8006c3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c52:	e023      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fc76 	bl	800754c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c94:	e002      	b.n	8006c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIM_ConfigClockSource+0x1c>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e0de      	b.n	8006e8a <HAL_TIM_ConfigClockSource+0x1da>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a63      	ldr	r2, [pc, #396]	; (8006e94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	f000 80a9 	beq.w	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d0c:	4a61      	ldr	r2, [pc, #388]	; (8006e94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f200 80ae 	bhi.w	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d14:	4a60      	ldr	r2, [pc, #384]	; (8006e98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	f000 80a1 	beq.w	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d1c:	4a5e      	ldr	r2, [pc, #376]	; (8006e98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f200 80a6 	bhi.w	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d24:	4a5d      	ldr	r2, [pc, #372]	; (8006e9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	f000 8099 	beq.w	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d2c:	4a5b      	ldr	r2, [pc, #364]	; (8006e9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	f200 809e 	bhi.w	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d34:	4a5a      	ldr	r2, [pc, #360]	; (8006ea0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	f000 8091 	beq.w	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d3c:	4a58      	ldr	r2, [pc, #352]	; (8006ea0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f200 8096 	bhi.w	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d48:	f000 8089 	beq.w	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d50:	f200 808e 	bhi.w	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d58:	d03e      	beq.n	8006dd8 <HAL_TIM_ConfigClockSource+0x128>
 8006d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5e:	f200 8087 	bhi.w	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	f000 8086 	beq.w	8006e76 <HAL_TIM_ConfigClockSource+0x1c6>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6e:	d87f      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d70:	2b70      	cmp	r3, #112	; 0x70
 8006d72:	d01a      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0xfa>
 8006d74:	2b70      	cmp	r3, #112	; 0x70
 8006d76:	d87b      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d78:	2b60      	cmp	r3, #96	; 0x60
 8006d7a:	d050      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0x16e>
 8006d7c:	2b60      	cmp	r3, #96	; 0x60
 8006d7e:	d877      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d80:	2b50      	cmp	r3, #80	; 0x50
 8006d82:	d03c      	beq.n	8006dfe <HAL_TIM_ConfigClockSource+0x14e>
 8006d84:	2b50      	cmp	r3, #80	; 0x50
 8006d86:	d873      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d058      	beq.n	8006e3e <HAL_TIM_ConfigClockSource+0x18e>
 8006d8c:	2b40      	cmp	r3, #64	; 0x40
 8006d8e:	d86f      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d90:	2b30      	cmp	r3, #48	; 0x30
 8006d92:	d064      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d94:	2b30      	cmp	r3, #48	; 0x30
 8006d96:	d86b      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d060      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d867      	bhi.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d05c      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d05a      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006da8:	e062      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dba:	f000 fca9 	bl	8007710 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	609a      	str	r2, [r3, #8]
      break;
 8006dd6:	e04f      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006de8:	f000 fc92 	bl	8007710 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dfa:	609a      	str	r2, [r3, #8]
      break;
 8006dfc:	e03c      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f000 fc04 	bl	8007618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2150      	movs	r1, #80	; 0x50
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fc5d 	bl	80076d6 <TIM_ITRx_SetConfig>
      break;
 8006e1c:	e02c      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f000 fc23 	bl	8007676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2160      	movs	r1, #96	; 0x60
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fc4d 	bl	80076d6 <TIM_ITRx_SetConfig>
      break;
 8006e3c:	e01c      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f000 fbe4 	bl	8007618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2140      	movs	r1, #64	; 0x40
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fc3d 	bl	80076d6 <TIM_ITRx_SetConfig>
      break;
 8006e5c:	e00c      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	f000 fc34 	bl	80076d6 <TIM_ITRx_SetConfig>
      break;
 8006e6e:	e003      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
      break;
 8006e74:	e000      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	00100070 	.word	0x00100070
 8006e98:	00100040 	.word	0x00100040
 8006e9c:	00100030 	.word	0x00100030
 8006ea0:	00100020 	.word	0x00100020

08006ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a42      	ldr	r2, [pc, #264]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00f      	beq.n	8006f2c <TIM_Base_SetConfig+0x38>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f12:	d00b      	beq.n	8006f2c <TIM_Base_SetConfig+0x38>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3f      	ldr	r2, [pc, #252]	; (8007014 <TIM_Base_SetConfig+0x120>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_Base_SetConfig+0x38>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3e      	ldr	r2, [pc, #248]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_Base_SetConfig+0x38>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a3d      	ldr	r2, [pc, #244]	; (800701c <TIM_Base_SetConfig+0x128>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d108      	bne.n	8006f3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a33      	ldr	r2, [pc, #204]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01b      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d017      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a30      	ldr	r2, [pc, #192]	; (8007014 <TIM_Base_SetConfig+0x120>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2f      	ldr	r2, [pc, #188]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00f      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2e      	ldr	r2, [pc, #184]	; (800701c <TIM_Base_SetConfig+0x128>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <TIM_Base_SetConfig+0x12c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a2c      	ldr	r2, [pc, #176]	; (8007024 <TIM_Base_SetConfig+0x130>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_Base_SetConfig+0x8a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <TIM_Base_SetConfig+0x134>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d108      	bne.n	8006f90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a16      	ldr	r2, [pc, #88]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00f      	beq.n	8006fdc <TIM_Base_SetConfig+0xe8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a17      	ldr	r2, [pc, #92]	; (800701c <TIM_Base_SetConfig+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00b      	beq.n	8006fdc <TIM_Base_SetConfig+0xe8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	; (8007020 <TIM_Base_SetConfig+0x12c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d007      	beq.n	8006fdc <TIM_Base_SetConfig+0xe8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a15      	ldr	r2, [pc, #84]	; (8007024 <TIM_Base_SetConfig+0x130>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_Base_SetConfig+0xe8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a14      	ldr	r2, [pc, #80]	; (8007028 <TIM_Base_SetConfig+0x134>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d105      	bne.n	8007002 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	611a      	str	r2, [r3, #16]
  }
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40013400 	.word	0x40013400
 8007020:	40014000 	.word	0x40014000
 8007024:	40014400 	.word	0x40014400
 8007028:	40014800 	.word	0x40014800

0800702c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f023 0201 	bic.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0303 	bic.w	r3, r3, #3
 8007066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f023 0302 	bic.w	r3, r3, #2
 8007078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a2c      	ldr	r2, [pc, #176]	; (8007138 <TIM_OC1_SetConfig+0x10c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00f      	beq.n	80070ac <TIM_OC1_SetConfig+0x80>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a2b      	ldr	r2, [pc, #172]	; (800713c <TIM_OC1_SetConfig+0x110>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00b      	beq.n	80070ac <TIM_OC1_SetConfig+0x80>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a2a      	ldr	r2, [pc, #168]	; (8007140 <TIM_OC1_SetConfig+0x114>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d007      	beq.n	80070ac <TIM_OC1_SetConfig+0x80>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a29      	ldr	r2, [pc, #164]	; (8007144 <TIM_OC1_SetConfig+0x118>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC1_SetConfig+0x80>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a28      	ldr	r2, [pc, #160]	; (8007148 <TIM_OC1_SetConfig+0x11c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d10c      	bne.n	80070c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 0308 	bic.w	r3, r3, #8
 80070b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 0304 	bic.w	r3, r3, #4
 80070c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a1b      	ldr	r2, [pc, #108]	; (8007138 <TIM_OC1_SetConfig+0x10c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00f      	beq.n	80070ee <TIM_OC1_SetConfig+0xc2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1a      	ldr	r2, [pc, #104]	; (800713c <TIM_OC1_SetConfig+0x110>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00b      	beq.n	80070ee <TIM_OC1_SetConfig+0xc2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a19      	ldr	r2, [pc, #100]	; (8007140 <TIM_OC1_SetConfig+0x114>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d007      	beq.n	80070ee <TIM_OC1_SetConfig+0xc2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a18      	ldr	r2, [pc, #96]	; (8007144 <TIM_OC1_SetConfig+0x118>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_OC1_SetConfig+0xc2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <TIM_OC1_SetConfig+0x11c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d111      	bne.n	8007112 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800

0800714c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f023 0210 	bic.w	r2, r3, #16
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0320 	bic.w	r3, r3, #32
 800719a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a28      	ldr	r2, [pc, #160]	; (800724c <TIM_OC2_SetConfig+0x100>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_OC2_SetConfig+0x6c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a27      	ldr	r2, [pc, #156]	; (8007250 <TIM_OC2_SetConfig+0x104>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d10d      	bne.n	80071d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a1d      	ldr	r2, [pc, #116]	; (800724c <TIM_OC2_SetConfig+0x100>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00f      	beq.n	80071fc <TIM_OC2_SetConfig+0xb0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <TIM_OC2_SetConfig+0x104>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00b      	beq.n	80071fc <TIM_OC2_SetConfig+0xb0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <TIM_OC2_SetConfig+0x108>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d007      	beq.n	80071fc <TIM_OC2_SetConfig+0xb0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <TIM_OC2_SetConfig+0x10c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC2_SetConfig+0xb0>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <TIM_OC2_SetConfig+0x110>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d113      	bne.n	8007224 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40013400 	.word	0x40013400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800

08007260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0303 	bic.w	r3, r3, #3
 800729a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a27      	ldr	r2, [pc, #156]	; (800735c <TIM_OC3_SetConfig+0xfc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_OC3_SetConfig+0x6a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a26      	ldr	r2, [pc, #152]	; (8007360 <TIM_OC3_SetConfig+0x100>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d10d      	bne.n	80072e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a1c      	ldr	r2, [pc, #112]	; (800735c <TIM_OC3_SetConfig+0xfc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00f      	beq.n	800730e <TIM_OC3_SetConfig+0xae>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <TIM_OC3_SetConfig+0x100>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00b      	beq.n	800730e <TIM_OC3_SetConfig+0xae>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <TIM_OC3_SetConfig+0x104>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d007      	beq.n	800730e <TIM_OC3_SetConfig+0xae>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a19      	ldr	r2, [pc, #100]	; (8007368 <TIM_OC3_SetConfig+0x108>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_OC3_SetConfig+0xae>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a18      	ldr	r2, [pc, #96]	; (800736c <TIM_OC3_SetConfig+0x10c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d113      	bne.n	8007336 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800731c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40013400 	.word	0x40013400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a28      	ldr	r2, [pc, #160]	; (8007470 <TIM_OC4_SetConfig+0x100>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_OC4_SetConfig+0x6c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a27      	ldr	r2, [pc, #156]	; (8007474 <TIM_OC4_SetConfig+0x104>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d10d      	bne.n	80073f8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	031b      	lsls	r3, r3, #12
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <TIM_OC4_SetConfig+0x100>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00f      	beq.n	8007420 <TIM_OC4_SetConfig+0xb0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <TIM_OC4_SetConfig+0x104>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00b      	beq.n	8007420 <TIM_OC4_SetConfig+0xb0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <TIM_OC4_SetConfig+0x108>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d007      	beq.n	8007420 <TIM_OC4_SetConfig+0xb0>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1a      	ldr	r2, [pc, #104]	; (800747c <TIM_OC4_SetConfig+0x10c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_OC4_SetConfig+0xb0>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <TIM_OC4_SetConfig+0x110>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d113      	bne.n	8007448 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007426:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800742e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	019b      	lsls	r3, r3, #6
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	019b      	lsls	r3, r3, #6
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40013400 	.word	0x40013400
 8007478:	40014000 	.word	0x40014000
 800747c:	40014400 	.word	0x40014400
 8007480:	40014800 	.word	0x40014800

08007484 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a17      	ldr	r2, [pc, #92]	; (8007538 <TIM_OC5_SetConfig+0xb4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00f      	beq.n	80074fe <TIM_OC5_SetConfig+0x7a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a16      	ldr	r2, [pc, #88]	; (800753c <TIM_OC5_SetConfig+0xb8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00b      	beq.n	80074fe <TIM_OC5_SetConfig+0x7a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a15      	ldr	r2, [pc, #84]	; (8007540 <TIM_OC5_SetConfig+0xbc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d007      	beq.n	80074fe <TIM_OC5_SetConfig+0x7a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a14      	ldr	r2, [pc, #80]	; (8007544 <TIM_OC5_SetConfig+0xc0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d003      	beq.n	80074fe <TIM_OC5_SetConfig+0x7a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a13      	ldr	r2, [pc, #76]	; (8007548 <TIM_OC5_SetConfig+0xc4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d109      	bne.n	8007512 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	621a      	str	r2, [r3, #32]
}
 800752c:	bf00      	nop
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	40012c00 	.word	0x40012c00
 800753c:	40013400 	.word	0x40013400
 8007540:	40014000 	.word	0x40014000
 8007544:	40014400 	.word	0x40014400
 8007548:	40014800 	.word	0x40014800

0800754c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800757a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	051b      	lsls	r3, r3, #20
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <TIM_OC6_SetConfig+0xb8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00f      	beq.n	80075c8 <TIM_OC6_SetConfig+0x7c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <TIM_OC6_SetConfig+0xbc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_OC6_SetConfig+0x7c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a16      	ldr	r2, [pc, #88]	; (800760c <TIM_OC6_SetConfig+0xc0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_OC6_SetConfig+0x7c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a15      	ldr	r2, [pc, #84]	; (8007610 <TIM_OC6_SetConfig+0xc4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_OC6_SetConfig+0x7c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a14      	ldr	r2, [pc, #80]	; (8007614 <TIM_OC6_SetConfig+0xc8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d109      	bne.n	80075dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	029b      	lsls	r3, r3, #10
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40013400 	.word	0x40013400
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800

08007618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f023 0201 	bic.w	r2, r3, #1
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f023 030a 	bic.w	r3, r3, #10
 8007654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	f023 0210 	bic.w	r2, r3, #16
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	031b      	lsls	r3, r3, #12
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80076ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f043 0307 	orr.w	r3, r3, #7
 80076fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	609a      	str	r2, [r3, #8]
}
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800772a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	021a      	lsls	r2, r3, #8
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	431a      	orrs	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4313      	orrs	r3, r2
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	609a      	str	r2, [r3, #8]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f003 031f 	and.w	r3, r3, #31
 8007762:	2201      	movs	r2, #1
 8007764:	fa02 f303 	lsl.w	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1a      	ldr	r2, [r3, #32]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	43db      	mvns	r3, r3
 8007772:	401a      	ands	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a1a      	ldr	r2, [r3, #32]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	621a      	str	r2, [r3, #32]
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e065      	b.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a2c      	ldr	r2, [pc, #176]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a2b      	ldr	r2, [pc, #172]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d108      	bne.n	80077fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1b      	ldr	r2, [pc, #108]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d018      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782a:	d013      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a18      	ldr	r2, [pc, #96]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00e      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a17      	ldr	r2, [pc, #92]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a12      	ldr	r2, [pc, #72]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a13      	ldr	r2, [pc, #76]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10c      	bne.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	4313      	orrs	r3, r2
 8007864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40013400 	.word	0x40013400
 8007894:	40000400 	.word	0x40000400
 8007898:	40000800 	.word	0x40000800
 800789c:	40014000 	.word	0x40014000

080078a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e073      	b.n	80079a4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	041b      	lsls	r3, r3, #16
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a19      	ldr	r2, [pc, #100]	; (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d11c      	bne.n	8007992 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	051b      	lsls	r3, r3, #20
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	40012c00 	.word	0x40012c00
 80079b4:	40013400 	.word	0x40013400

080079b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e042      	b.n	8007adc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7fa f9d3 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2224      	movs	r2, #36	; 0x24
 8007a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 faf4 	bl	800807c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f825 	bl	8007ae4 <UART_SetConfig>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e01b      	b.n	8007adc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb73 	bl	80081c0 <UART_CheckIdleState>
 8007ada:	4603      	mov	r3, r0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ae8:	b08c      	sub	sp, #48	; 0x30
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4bab      	ldr	r3, [pc, #684]	; (8007dc0 <UART_SetConfig+0x2dc>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4aa0      	ldr	r2, [pc, #640]	; (8007dc4 <UART_SetConfig+0x2e0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f023 010f 	bic.w	r1, r3, #15
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a91      	ldr	r2, [pc, #580]	; (8007dc8 <UART_SetConfig+0x2e4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d125      	bne.n	8007bd4 <UART_SetConfig+0xf0>
 8007b88:	4b90      	ldr	r3, [pc, #576]	; (8007dcc <UART_SetConfig+0x2e8>)
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d81a      	bhi.n	8007bcc <UART_SetConfig+0xe8>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <UART_SetConfig+0xb8>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bb5 	.word	0x08007bb5
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	2301      	movs	r3, #1
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb2:	e0d6      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bba:	e0d2      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	e0ce      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bca:	e0ca      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e0c6      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a7d      	ldr	r2, [pc, #500]	; (8007dd0 <UART_SetConfig+0x2ec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d138      	bne.n	8007c50 <UART_SetConfig+0x16c>
 8007bde:	4b7b      	ldr	r3, [pc, #492]	; (8007dcc <UART_SetConfig+0x2e8>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f003 030c 	and.w	r3, r3, #12
 8007be8:	2b0c      	cmp	r3, #12
 8007bea:	d82d      	bhi.n	8007c48 <UART_SetConfig+0x164>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x110>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c29 	.word	0x08007c29
 8007bf8:	08007c49 	.word	0x08007c49
 8007bfc:	08007c49 	.word	0x08007c49
 8007c00:	08007c49 	.word	0x08007c49
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c49 	.word	0x08007c49
 8007c0c:	08007c49 	.word	0x08007c49
 8007c10:	08007c49 	.word	0x08007c49
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c49 	.word	0x08007c49
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2e:	e098      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c30:	2302      	movs	r3, #2
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c36:	e094      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3e:	e090      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c46:	e08c      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4e:	e088      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a5f      	ldr	r2, [pc, #380]	; (8007dd4 <UART_SetConfig+0x2f0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d125      	bne.n	8007ca6 <UART_SetConfig+0x1c2>
 8007c5a:	4b5c      	ldr	r3, [pc, #368]	; (8007dcc <UART_SetConfig+0x2e8>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c64:	2b30      	cmp	r3, #48	; 0x30
 8007c66:	d016      	beq.n	8007c96 <UART_SetConfig+0x1b2>
 8007c68:	2b30      	cmp	r3, #48	; 0x30
 8007c6a:	d818      	bhi.n	8007c9e <UART_SetConfig+0x1ba>
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d00a      	beq.n	8007c86 <UART_SetConfig+0x1a2>
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d814      	bhi.n	8007c9e <UART_SetConfig+0x1ba>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <UART_SetConfig+0x19a>
 8007c78:	2b10      	cmp	r3, #16
 8007c7a:	d008      	beq.n	8007c8e <UART_SetConfig+0x1aa>
 8007c7c:	e00f      	b.n	8007c9e <UART_SetConfig+0x1ba>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c84:	e06d      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c86:	2302      	movs	r3, #2
 8007c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8c:	e069      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c8e:	2304      	movs	r3, #4
 8007c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c94:	e065      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c96:	2308      	movs	r3, #8
 8007c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9c:	e061      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007c9e:	2310      	movs	r3, #16
 8007ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca4:	e05d      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a4b      	ldr	r2, [pc, #300]	; (8007dd8 <UART_SetConfig+0x2f4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d125      	bne.n	8007cfc <UART_SetConfig+0x218>
 8007cb0:	4b46      	ldr	r3, [pc, #280]	; (8007dcc <UART_SetConfig+0x2e8>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cba:	2bc0      	cmp	r3, #192	; 0xc0
 8007cbc:	d016      	beq.n	8007cec <UART_SetConfig+0x208>
 8007cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8007cc0:	d818      	bhi.n	8007cf4 <UART_SetConfig+0x210>
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d00a      	beq.n	8007cdc <UART_SetConfig+0x1f8>
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	d814      	bhi.n	8007cf4 <UART_SetConfig+0x210>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <UART_SetConfig+0x1f0>
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d008      	beq.n	8007ce4 <UART_SetConfig+0x200>
 8007cd2:	e00f      	b.n	8007cf4 <UART_SetConfig+0x210>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cda:	e042      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce2:	e03e      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cea:	e03a      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf2:	e036      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfa:	e032      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a30      	ldr	r2, [pc, #192]	; (8007dc4 <UART_SetConfig+0x2e0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d12a      	bne.n	8007d5c <UART_SetConfig+0x278>
 8007d06:	4b31      	ldr	r3, [pc, #196]	; (8007dcc <UART_SetConfig+0x2e8>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d14:	d01a      	beq.n	8007d4c <UART_SetConfig+0x268>
 8007d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1a:	d81b      	bhi.n	8007d54 <UART_SetConfig+0x270>
 8007d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d20:	d00c      	beq.n	8007d3c <UART_SetConfig+0x258>
 8007d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d26:	d815      	bhi.n	8007d54 <UART_SetConfig+0x270>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <UART_SetConfig+0x250>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d008      	beq.n	8007d44 <UART_SetConfig+0x260>
 8007d32:	e00f      	b.n	8007d54 <UART_SetConfig+0x270>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3a:	e012      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d42:	e00e      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007d44:	2304      	movs	r3, #4
 8007d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4a:	e00a      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d52:	e006      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007d54:	2310      	movs	r3, #16
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5a:	e002      	b.n	8007d62 <UART_SetConfig+0x27e>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a17      	ldr	r2, [pc, #92]	; (8007dc4 <UART_SetConfig+0x2e0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	f040 80a8 	bne.w	8007ebe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d72:	2b08      	cmp	r3, #8
 8007d74:	d834      	bhi.n	8007de0 <UART_SetConfig+0x2fc>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <UART_SetConfig+0x298>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007de1 	.word	0x08007de1
 8007d84:	08007da9 	.word	0x08007da9
 8007d88:	08007de1 	.word	0x08007de1
 8007d8c:	08007daf 	.word	0x08007daf
 8007d90:	08007de1 	.word	0x08007de1
 8007d94:	08007de1 	.word	0x08007de1
 8007d98:	08007de1 	.word	0x08007de1
 8007d9c:	08007db7 	.word	0x08007db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da0:	f7fd fedc 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8007da4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007da6:	e021      	b.n	8007dec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <UART_SetConfig+0x2f8>)
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dac:	e01e      	b.n	8007dec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dae:	f7fd fe67 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8007db2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007db4:	e01a      	b.n	8007dec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dbc:	e016      	b.n	8007dec <UART_SetConfig+0x308>
 8007dbe:	bf00      	nop
 8007dc0:	cfff69f3 	.word	0xcfff69f3
 8007dc4:	40008000 	.word	0x40008000
 8007dc8:	40013800 	.word	0x40013800
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	40004400 	.word	0x40004400
 8007dd4:	40004800 	.word	0x40004800
 8007dd8:	40004c00 	.word	0x40004c00
 8007ddc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007dea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 812a 	beq.w	8008048 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	4a9e      	ldr	r2, [pc, #632]	; (8008074 <UART_SetConfig+0x590>)
 8007dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	4413      	add	r3, r2
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d305      	bcc.n	8007e24 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d903      	bls.n	8007e2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e2a:	e10d      	b.n	8008048 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	2200      	movs	r2, #0
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	60fa      	str	r2, [r7, #12]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	4a8e      	ldr	r2, [pc, #568]	; (8008074 <UART_SetConfig+0x590>)
 8007e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2200      	movs	r2, #0
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e4e:	f7f8 f9e3 	bl	8000218 <__aeabi_uldivmod>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4610      	mov	r0, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	020b      	lsls	r3, r1, #8
 8007e64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e68:	0202      	lsls	r2, r0, #8
 8007e6a:	6979      	ldr	r1, [r7, #20]
 8007e6c:	6849      	ldr	r1, [r1, #4]
 8007e6e:	0849      	lsrs	r1, r1, #1
 8007e70:	2000      	movs	r0, #0
 8007e72:	460c      	mov	r4, r1
 8007e74:	4605      	mov	r5, r0
 8007e76:	eb12 0804 	adds.w	r8, r2, r4
 8007e7a:	eb43 0905 	adc.w	r9, r3, r5
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	469a      	mov	sl, r3
 8007e86:	4693      	mov	fp, r2
 8007e88:	4652      	mov	r2, sl
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4649      	mov	r1, r9
 8007e90:	f7f8 f9c2 	bl	8000218 <__aeabi_uldivmod>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4613      	mov	r3, r2
 8007e9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea2:	d308      	bcc.n	8007eb6 <UART_SetConfig+0x3d2>
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eaa:	d204      	bcs.n	8007eb6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a3a      	ldr	r2, [r7, #32]
 8007eb2:	60da      	str	r2, [r3, #12]
 8007eb4:	e0c8      	b.n	8008048 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ebc:	e0c4      	b.n	8008048 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec6:	d167      	bne.n	8007f98 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d828      	bhi.n	8007f22 <UART_SetConfig+0x43e>
 8007ed0:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x3f4>)
 8007ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed6:	bf00      	nop
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f05 	.word	0x08007f05
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f23 	.word	0x08007f23
 8007ee8:	08007f13 	.word	0x08007f13
 8007eec:	08007f23 	.word	0x08007f23
 8007ef0:	08007f23 	.word	0x08007f23
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f1b 	.word	0x08007f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7fd fe2e 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f02:	e014      	b.n	8007f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fd fe40 	bl	8005b88 <HAL_RCC_GetPCLK2Freq>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f0a:	e010      	b.n	8007f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f0c:	4b5a      	ldr	r3, [pc, #360]	; (8008078 <UART_SetConfig+0x594>)
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f10:	e00d      	b.n	8007f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f12:	f7fd fdb5 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f18:	e009      	b.n	8007f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f20:	e005      	b.n	8007f2e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8089 	beq.w	8008048 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a4e      	ldr	r2, [pc, #312]	; (8008074 <UART_SetConfig+0x590>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f48:	005a      	lsls	r2, r3, #1
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	441a      	add	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d916      	bls.n	8007f90 <UART_SetConfig+0x4ac>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d212      	bcs.n	8007f90 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f023 030f 	bic.w	r3, r3, #15
 8007f72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	8bfa      	ldrh	r2, [r7, #30]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e05b      	b.n	8008048 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f96:	e057      	b.n	8008048 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d828      	bhi.n	8007ff2 <UART_SetConfig+0x50e>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x4c4>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fdd 	.word	0x08007fdd
 8007fb4:	08007ff3 	.word	0x08007ff3
 8007fb8:	08007fe3 	.word	0x08007fe3
 8007fbc:	08007ff3 	.word	0x08007ff3
 8007fc0:	08007ff3 	.word	0x08007ff3
 8007fc4:	08007ff3 	.word	0x08007ff3
 8007fc8:	08007feb 	.word	0x08007feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fcc:	f7fd fdc6 	bl	8005b5c <HAL_RCC_GetPCLK1Freq>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fd2:	e014      	b.n	8007ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fd4:	f7fd fdd8 	bl	8005b88 <HAL_RCC_GetPCLK2Freq>
 8007fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fda:	e010      	b.n	8007ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fdc:	4b26      	ldr	r3, [pc, #152]	; (8008078 <UART_SetConfig+0x594>)
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fe0:	e00d      	b.n	8007ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fe2:	f7fd fd4d 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe8:	e009      	b.n	8007ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff0:	e005      	b.n	8007ffe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d021      	beq.n	8008048 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <UART_SetConfig+0x590>)
 800800a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800e:	461a      	mov	r2, r3
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	fbb3 f2f2 	udiv	r2, r3, r2
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	441a      	add	r2, r3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	fbb2 f3f3 	udiv	r3, r2, r3
 8008026:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b0f      	cmp	r3, #15
 800802c:	d909      	bls.n	8008042 <UART_SetConfig+0x55e>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008034:	d205      	bcs.n	8008042 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	b29a      	uxth	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	e002      	b.n	8008048 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2201      	movs	r2, #1
 800804c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2201      	movs	r2, #1
 8008054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2200      	movs	r2, #0
 800805c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2200      	movs	r2, #0
 8008062:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008064:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008068:	4618      	mov	r0, r3
 800806a:	3730      	adds	r7, #48	; 0x30
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008072:	bf00      	nop
 8008074:	0800d188 	.word	0x0800d188
 8008078:	00f42400 	.word	0x00f42400

0800807c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01a      	beq.n	8008192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817a:	d10a      	bne.n	8008192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	605a      	str	r2, [r3, #4]
  }
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b098      	sub	sp, #96	; 0x60
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d0:	f7f9 ff24 	bl	800201c <HAL_GetTick>
 80081d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d12f      	bne.n	8008244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ec:	2200      	movs	r2, #0
 80081ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f88e 	bl	8008314 <UART_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d022      	beq.n	8008244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008212:	653b      	str	r3, [r7, #80]	; 0x50
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
 800821e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e6      	bne.n	80081fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e063      	b.n	800830c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b04      	cmp	r3, #4
 8008250:	d149      	bne.n	80082e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825a:	2200      	movs	r2, #0
 800825c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f857 	bl	8008314 <UART_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d03c      	beq.n	80082e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	623b      	str	r3, [r7, #32]
   return(result);
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828a:	633b      	str	r3, [r7, #48]	; 0x30
 800828c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e6      	bne.n	800826c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3308      	adds	r3, #8
 80082bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082be:	61fa      	str	r2, [r7, #28]
 80082c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	69b9      	ldr	r1, [r7, #24]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	617b      	str	r3, [r7, #20]
   return(result);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e5      	bne.n	800829e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e012      	b.n	800830c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3758      	adds	r7, #88	; 0x58
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008324:	e04f      	b.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832c:	d04b      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800832e:	f7f9 fe75 	bl	800201c <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	429a      	cmp	r2, r3
 800833c:	d302      	bcc.n	8008344 <UART_WaitOnFlagUntilTimeout+0x30>
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e04e      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d037      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b80      	cmp	r3, #128	; 0x80
 800835a:	d034      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d031      	beq.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d110      	bne.n	8008392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2208      	movs	r2, #8
 8008376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f838 	bl	80083ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2208      	movs	r2, #8
 8008382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e029      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a0:	d111      	bne.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f81e 	bl	80083ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e00f      	b.n	80083e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4013      	ands	r3, r2
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d0a0      	beq.n	8008326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b095      	sub	sp, #84	; 0x54
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008414:	643b      	str	r3, [r7, #64]	; 0x40
 8008416:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800841a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e6      	bne.n	80083f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3308      	adds	r3, #8
 800842e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	61fb      	str	r3, [r7, #28]
   return(result);
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800843e:	f023 0301 	bic.w	r3, r3, #1
 8008442:	64bb      	str	r3, [r7, #72]	; 0x48
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800844e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e3      	bne.n	8008428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008464:	2b01      	cmp	r3, #1
 8008466:	d118      	bne.n	800849a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	60bb      	str	r3, [r7, #8]
   return(result);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f023 0310 	bic.w	r3, r3, #16
 800847c:	647b      	str	r3, [r7, #68]	; 0x44
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6979      	ldr	r1, [r7, #20]
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	613b      	str	r3, [r7, #16]
   return(result);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e6      	bne.n	8008468 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80084ae:	bf00      	nop
 80084b0:	3754      	adds	r7, #84	; 0x54
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e027      	b.n	8008520 <HAL_UARTEx_DisableFifoMode+0x66>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2224      	movs	r2, #36	; 0x24
 80084dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0201 	bic.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008540:	2302      	movs	r3, #2
 8008542:	e02d      	b.n	80085a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2224      	movs	r2, #36	; 0x24
 8008550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f84f 	bl	8008624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085bc:	2302      	movs	r3, #2
 80085be:	e02d      	b.n	800861c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2224      	movs	r2, #36	; 0x24
 80085cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0201 	bic.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f811 	bl	8008624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008630:	2b00      	cmp	r3, #0
 8008632:	d108      	bne.n	8008646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008644:	e031      	b.n	80086aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008646:	2308      	movs	r3, #8
 8008648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800864a:	2308      	movs	r3, #8
 800864c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	0e5b      	lsrs	r3, r3, #25
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	0f5b      	lsrs	r3, r3, #29
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	7b3a      	ldrb	r2, [r7, #12]
 8008672:	4911      	ldr	r1, [pc, #68]	; (80086b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008674:	5c8a      	ldrb	r2, [r1, r2]
 8008676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800867a:	7b3a      	ldrb	r2, [r7, #12]
 800867c:	490f      	ldr	r1, [pc, #60]	; (80086bc <UARTEx_SetNbDataToProcess+0x98>)
 800867e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008680:	fb93 f3f2 	sdiv	r3, r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	7b7a      	ldrb	r2, [r7, #13]
 8008690:	4909      	ldr	r1, [pc, #36]	; (80086b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008692:	5c8a      	ldrb	r2, [r1, r2]
 8008694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008698:	7b7a      	ldrb	r2, [r7, #13]
 800869a:	4908      	ldr	r1, [pc, #32]	; (80086bc <UARTEx_SetNbDataToProcess+0x98>)
 800869c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800869e:	fb93 f3f2 	sdiv	r3, r3, r2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	0800d1a0 	.word	0x0800d1a0
 80086bc:	0800d1a8 	.word	0x0800d1a8

080086c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80086d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80086fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	b29b      	uxth	r3, r3
 8008708:	43db      	mvns	r3, r3
 800870a:	b29b      	uxth	r3, r3
 800870c:	4013      	ands	r3, r2
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	1d3b      	adds	r3, r7, #4
 800872e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008760:	b480      	push	{r7}
 8008762:	b09d      	sub	sp, #116	; 0x74
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29b      	uxth	r3, r3
 800877e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	78db      	ldrb	r3, [r3, #3]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d81f      	bhi.n	80087d2 <USB_ActivateEndpoint+0x72>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USB_ActivateEndpoint+0x38>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087db 	.word	0x080087db
 80087a4:	080087b7 	.word	0x080087b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80087a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087b4:	e012      	b.n	80087dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80087b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80087be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087c2:	e00b      	b.n	80087dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80087c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087d0:	e004      	b.n	80087dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80087d8:	e000      	b.n	80087dc <USB_ActivateEndpoint+0x7c>
      break;
 80087da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	441a      	add	r2, r3
 80087e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	b21b      	sxth	r3, r3
 800880e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008816:	b21a      	sxth	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b21b      	sxth	r3, r3
 800881e:	4313      	orrs	r3, r2
 8008820:	b21b      	sxth	r3, r3
 8008822:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	441a      	add	r2, r3
 8008830:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008844:	b29b      	uxth	r3, r3
 8008846:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	7b1b      	ldrb	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f040 8178 	bne.w	8008b42 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8084 	beq.w	8008964 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	61bb      	str	r3, [r7, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008866:	b29b      	uxth	r3, r3
 8008868:	461a      	mov	r2, r3
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	4413      	add	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	00da      	lsls	r2, r3, #3
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	88db      	ldrh	r3, [r3, #6]
 8008884:	085b      	lsrs	r3, r3, #1
 8008886:	b29b      	uxth	r3, r3
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	827b      	strh	r3, [r7, #18]
 800889e:	8a7b      	ldrh	r3, [r7, #18]
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d01b      	beq.n	80088e0 <USB_ActivateEndpoint+0x180>
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	823b      	strh	r3, [r7, #16]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	441a      	add	r2, r3
 80088ca:	8a3b      	ldrh	r3, [r7, #16]
 80088cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088dc:	b29b      	uxth	r3, r3
 80088de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	78db      	ldrb	r3, [r3, #3]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d020      	beq.n	800892a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fe:	81bb      	strh	r3, [r7, #12]
 8008900:	89bb      	ldrh	r3, [r7, #12]
 8008902:	f083 0320 	eor.w	r3, r3, #32
 8008906:	81bb      	strh	r3, [r7, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	441a      	add	r2, r3
 8008912:	89bb      	ldrh	r3, [r7, #12]
 8008914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008924:	b29b      	uxth	r3, r3
 8008926:	8013      	strh	r3, [r2, #0]
 8008928:	e2d5      	b.n	8008ed6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008940:	81fb      	strh	r3, [r7, #14]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	441a      	add	r2, r3
 800894c:	89fb      	ldrh	r3, [r7, #14]
 800894e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800895a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895e:	b29b      	uxth	r3, r3
 8008960:	8013      	strh	r3, [r2, #0]
 8008962:	e2b8      	b.n	8008ed6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	633b      	str	r3, [r7, #48]	; 0x30
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	4413      	add	r3, r2
 8008976:	633b      	str	r3, [r7, #48]	; 0x30
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	00da      	lsls	r2, r3, #3
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	4413      	add	r3, r2
 8008982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	88db      	ldrh	r3, [r3, #6]
 800898c:	085b      	lsrs	r3, r3, #1
 800898e:	b29b      	uxth	r3, r3
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	4413      	add	r3, r2
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	00da      	lsls	r2, r3, #3
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	4413      	add	r3, r2
 80089b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b3e      	cmp	r3, #62	; 0x3e
 80089d2:	d91d      	bls.n	8008a10 <USB_ActivateEndpoint+0x2b0>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	66bb      	str	r3, [r7, #104]	; 0x68
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f003 031f 	and.w	r3, r3, #31
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <USB_ActivateEndpoint+0x28e>
 80089e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ea:	3b01      	subs	r3, #1
 80089ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	029b      	lsls	r3, r3, #10
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	4313      	orrs	r3, r2
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e026      	b.n	8008a5e <USB_ActivateEndpoint+0x2fe>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <USB_ActivateEndpoint+0x2ce>
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e017      	b.n	8008a5e <USB_ActivateEndpoint+0x2fe>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <USB_ActivateEndpoint+0x2e8>
 8008a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a44:	3301      	adds	r3, #1
 8008a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	029b      	lsls	r3, r3, #10
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01b      	beq.n	8008aae <USB_ActivateEndpoint+0x34e>
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8c:	843b      	strh	r3, [r7, #32]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	441a      	add	r2, r3
 8008a98:	8c3b      	ldrh	r3, [r7, #32]
 8008a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d124      	bne.n	8008b00 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008acc:	83bb      	strh	r3, [r7, #28]
 8008ace:	8bbb      	ldrh	r3, [r7, #28]
 8008ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ad4:	83bb      	strh	r3, [r7, #28]
 8008ad6:	8bbb      	ldrh	r3, [r7, #28]
 8008ad8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008adc:	83bb      	strh	r3, [r7, #28]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	8bbb      	ldrh	r3, [r7, #28]
 8008aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	8013      	strh	r3, [r2, #0]
 8008afe:	e1ea      	b.n	8008ed6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	83fb      	strh	r3, [r7, #30]
 8008b18:	8bfb      	ldrh	r3, [r7, #30]
 8008b1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b1e:	83fb      	strh	r3, [r7, #30]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	441a      	add	r2, r3
 8008b2a:	8bfb      	ldrh	r3, [r7, #30]
 8008b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	8013      	strh	r3, [r2, #0]
 8008b40:	e1c9      	b.n	8008ed6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	78db      	ldrb	r3, [r3, #3]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d11e      	bne.n	8008b88 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	441a      	add	r2, r3
 8008b6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	8013      	strh	r3, [r2, #0]
 8008b86:	e01d      	b.n	8008bc4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	441a      	add	r2, r3
 8008bac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd4:	4413      	add	r3, r2
 8008bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	00da      	lsls	r2, r3, #3
 8008bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	891b      	ldrh	r3, [r3, #8]
 8008bec:	085b      	lsrs	r3, r3, #1
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bf6:	801a      	strh	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c08:	4413      	add	r3, r2
 8008c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	00da      	lsls	r2, r3, #3
 8008c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c14:	4413      	add	r3, r2
 8008c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	895b      	ldrh	r3, [r3, #10]
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c2a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f040 8093 	bne.w	8008d5c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008c46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01b      	beq.n	8008c8a <USB_ActivateEndpoint+0x52a>
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	441a      	add	r2, r3
 8008c74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008c98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01b      	beq.n	8008cda <USB_ActivateEndpoint+0x57a>
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	441a      	add	r2, r3
 8008cc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf0:	873b      	strh	r3, [r7, #56]	; 0x38
 8008cf2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008cf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8008cfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d00:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	441a      	add	r2, r3
 8008d0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	441a      	add	r2, r3
 8008d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	8013      	strh	r3, [r2, #0]
 8008d5a:	e0bc      	b.n	8008ed6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01d      	beq.n	8008db4 <USB_ActivateEndpoint+0x654>
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	441a      	add	r2, r3
 8008d9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008dc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01d      	beq.n	8008e0c <USB_ActivateEndpoint+0x6ac>
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	78db      	ldrb	r3, [r3, #3]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d024      	beq.n	8008e5e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e32:	f083 0320 	eor.w	r3, r3, #32
 8008e36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	441a      	add	r2, r3
 8008e44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	8013      	strh	r3, [r2, #0]
 8008e5c:	e01d      	b.n	8008e9a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	441a      	add	r2, r3
 8008e82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	441a      	add	r2, r3
 8008ebe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008ed6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3774      	adds	r7, #116	; 0x74
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop

08008ee8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b08d      	sub	sp, #52	; 0x34
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	7b1b      	ldrb	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f040 808e 	bne.w	8009018 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d044      	beq.n	8008f8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	81bb      	strh	r3, [r7, #12]
 8008f12:	89bb      	ldrh	r3, [r7, #12]
 8008f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01b      	beq.n	8008f54 <USB_DeactivateEndpoint+0x6c>
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	817b      	strh	r3, [r7, #10]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	441a      	add	r2, r3
 8008f3e:	897b      	ldrh	r3, [r7, #10]
 8008f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6a:	813b      	strh	r3, [r7, #8]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	441a      	add	r2, r3
 8008f76:	893b      	ldrh	r3, [r7, #8]
 8008f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	8013      	strh	r3, [r2, #0]
 8008f8c:	e192      	b.n	80092b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	827b      	strh	r3, [r7, #18]
 8008f9c:	8a7b      	ldrh	r3, [r7, #18]
 8008f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01b      	beq.n	8008fde <USB_DeactivateEndpoint+0xf6>
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbc:	823b      	strh	r3, [r7, #16]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	441a      	add	r2, r3
 8008fc8:	8a3b      	ldrh	r3, [r7, #16]
 8008fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff4:	81fb      	strh	r3, [r7, #14]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	441a      	add	r2, r3
 8009000:	89fb      	ldrh	r3, [r7, #14]
 8009002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	8013      	strh	r3, [r2, #0]
 8009016:	e14d      	b.n	80092b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 80a5 	bne.w	800916c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	843b      	strh	r3, [r7, #32]
 8009030:	8c3b      	ldrh	r3, [r7, #32]
 8009032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01b      	beq.n	8009072 <USB_DeactivateEndpoint+0x18a>
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800904c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009050:	83fb      	strh	r3, [r7, #30]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	441a      	add	r2, r3
 800905c:	8bfb      	ldrh	r3, [r7, #30]
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800906a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	83bb      	strh	r3, [r7, #28]
 8009080:	8bbb      	ldrh	r3, [r7, #28]
 8009082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01b      	beq.n	80090c2 <USB_DeactivateEndpoint+0x1da>
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800909c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a0:	837b      	strh	r3, [r7, #26]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	441a      	add	r2, r3
 80090ac:	8b7b      	ldrh	r3, [r7, #26]
 80090ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d8:	833b      	strh	r3, [r7, #24]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	441a      	add	r2, r3
 80090e4:	8b3b      	ldrh	r3, [r7, #24]
 80090e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800910c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009110:	82fb      	strh	r3, [r7, #22]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	441a      	add	r2, r3
 800911c:	8afb      	ldrh	r3, [r7, #22]
 800911e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800912a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912e:	b29b      	uxth	r3, r3
 8009130:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009148:	82bb      	strh	r3, [r7, #20]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	441a      	add	r2, r3
 8009154:	8abb      	ldrh	r3, [r7, #20]
 8009156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800915a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009166:	b29b      	uxth	r3, r3
 8009168:	8013      	strh	r3, [r2, #0]
 800916a:	e0a3      	b.n	80092b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800917a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800917c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01b      	beq.n	80091bc <USB_DeactivateEndpoint+0x2d4>
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	441a      	add	r2, r3
 80091a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80091ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01b      	beq.n	800920c <USB_DeactivateEndpoint+0x324>
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	441a      	add	r2, r3
 80091f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009208:	b29b      	uxth	r3, r3
 800920a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800921e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009222:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	441a      	add	r2, r3
 800922e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	b29b      	uxth	r3, r3
 8009242:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	441a      	add	r2, r3
 8009266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800926c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009278:	b29b      	uxth	r3, r3
 800927a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800928e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009292:	847b      	strh	r3, [r7, #34]	; 0x22
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	441a      	add	r2, r3
 800929e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3734      	adds	r7, #52	; 0x34
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b0c2      	sub	sp, #264	; 0x108
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d0:	6018      	str	r0, [r3, #0]
 80092d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092da:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f040 86b7 	bne.w	800a05c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	d908      	bls.n	800931c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800930a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800931a:	e007      	b.n	800932c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800931c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800932c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	7b1b      	ldrb	r3, [r3, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d13a      	bne.n	80093b2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800933c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6959      	ldr	r1, [r3, #20]
 8009348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	88da      	ldrh	r2, [r3, #6]
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009358:	b29b      	uxth	r3, r3
 800935a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800935e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	f001 fc98 	bl	800ac98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	613b      	str	r3, [r7, #16]
 8009374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	4413      	add	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	00da      	lsls	r2, r3, #3
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	4413      	add	r3, r2
 800939e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	801a      	strh	r2, [r3, #0]
 80093ae:	f000 be1f 	b.w	8009ff0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80093b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	78db      	ldrb	r3, [r3, #3]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	f040 8462 	bne.w	8009c88 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80093c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6a1a      	ldr	r2, [r3, #32]
 80093d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	f240 83df 	bls.w	8009ba0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009408:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800940c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	441a      	add	r2, r3
 8009426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800942a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009432:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943a:	b29b      	uxth	r3, r3
 800943c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6a1a      	ldr	r2, [r3, #32]
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800945c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 81c7 	beq.w	8009812 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	633b      	str	r3, [r7, #48]	; 0x30
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d177      	bne.n	8009590 <USB_EPStartXfer+0x2ce>
 80094a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c0:	4413      	add	r3, r2
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80094c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	00da      	lsls	r2, r3, #3
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	4413      	add	r3, r2
 80094d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	801a      	strh	r2, [r3, #0]
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f0:	2b3e      	cmp	r3, #62	; 0x3e
 80094f2:	d921      	bls.n	8009538 <USB_EPStartXfer+0x276>
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f8:	095b      	lsrs	r3, r3, #5
 80094fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	f003 031f 	and.w	r3, r3, #31
 8009506:	2b00      	cmp	r3, #0
 8009508:	d104      	bne.n	8009514 <USB_EPStartXfer+0x252>
 800950a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800950e:	3b01      	subs	r3, #1
 8009510:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	b29a      	uxth	r2, r3
 800951a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800951e:	b29b      	uxth	r3, r3
 8009520:	029b      	lsls	r3, r3, #10
 8009522:	b29b      	uxth	r3, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	b29b      	uxth	r3, r3
 8009528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800952c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009530:	b29a      	uxth	r2, r3
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	e050      	b.n	80095da <USB_EPStartXfer+0x318>
 8009538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <USB_EPStartXfer+0x294>
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	b29b      	uxth	r3, r3
 8009546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800954a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954e:	b29a      	uxth	r2, r3
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	801a      	strh	r2, [r3, #0]
 8009554:	e041      	b.n	80095da <USB_EPStartXfer+0x318>
 8009556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <USB_EPStartXfer+0x2b4>
 800956c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009570:	3301      	adds	r3, #1
 8009572:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b29a      	uxth	r2, r3
 800957c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009580:	b29b      	uxth	r3, r3
 8009582:	029b      	lsls	r3, r3, #10
 8009584:	b29b      	uxth	r3, r3
 8009586:	4313      	orrs	r3, r2
 8009588:	b29a      	uxth	r2, r3
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	801a      	strh	r2, [r3, #0]
 800958e:	e024      	b.n	80095da <USB_EPStartXfer+0x318>
 8009590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d11c      	bne.n	80095da <USB_EPStartXfer+0x318>
 80095a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	461a      	mov	r2, r3
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	4413      	add	r3, r2
 80095b6:	633b      	str	r3, [r7, #48]	; 0x30
 80095b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	00da      	lsls	r2, r3, #3
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	4413      	add	r3, r2
 80095ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	895b      	ldrh	r3, [r3, #10]
 80095e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6959      	ldr	r1, [r3, #20]
 80095f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009600:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009604:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009608:	6800      	ldr	r0, [r0, #0]
 800960a:	f001 fb45 	bl	800ac98 <USB_WritePMA>
            ep->xfer_buff += len;
 800960e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695a      	ldr	r2, [r3, #20]
 800961a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961e:	441a      	add	r2, r3
 8009620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800962c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6a1a      	ldr	r2, [r3, #32]
 8009638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	429a      	cmp	r2, r3
 8009646:	d90f      	bls.n	8009668 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6a1a      	ldr	r2, [r3, #32]
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009658:	1ad2      	subs	r2, r2, r3
 800965a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	621a      	str	r2, [r3, #32]
 8009666:	e00e      	b.n	8009686 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2200      	movs	r2, #0
 8009684:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d177      	bne.n	8009786 <USB_EPStartXfer+0x4c4>
 8009696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	4413      	add	r3, r2
 80096b8:	61bb      	str	r3, [r7, #24]
 80096ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	00da      	lsls	r2, r3, #3
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	4413      	add	r3, r2
 80096cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096dc:	b29a      	uxth	r2, r3
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	801a      	strh	r2, [r3, #0]
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e6:	2b3e      	cmp	r3, #62	; 0x3e
 80096e8:	d921      	bls.n	800972e <USB_EPStartXfer+0x46c>
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <USB_EPStartXfer+0x448>
 8009700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009704:	3b01      	subs	r3, #1
 8009706:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	b29a      	uxth	r2, r3
 8009710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009714:	b29b      	uxth	r3, r3
 8009716:	029b      	lsls	r3, r3, #10
 8009718:	b29b      	uxth	r3, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	b29b      	uxth	r3, r3
 800971e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009726:	b29a      	uxth	r2, r3
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	e056      	b.n	80097dc <USB_EPStartXfer+0x51a>
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <USB_EPStartXfer+0x48a>
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009744:	b29a      	uxth	r2, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	e047      	b.n	80097dc <USB_EPStartXfer+0x51a>
 800974c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <USB_EPStartXfer+0x4aa>
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009766:	3301      	adds	r3, #1
 8009768:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	b29a      	uxth	r2, r3
 8009772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009776:	b29b      	uxth	r3, r3
 8009778:	029b      	lsls	r3, r3, #10
 800977a:	b29b      	uxth	r3, r3
 800977c:	4313      	orrs	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e02a      	b.n	80097dc <USB_EPStartXfer+0x51a>
 8009786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d122      	bne.n	80097dc <USB_EPStartXfer+0x51a>
 8009796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	623b      	str	r3, [r7, #32]
 80097a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	4413      	add	r3, r2
 80097b8:	623b      	str	r3, [r7, #32]
 80097ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	00da      	lsls	r2, r3, #3
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	4413      	add	r3, r2
 80097cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097d0:	61fb      	str	r3, [r7, #28]
 80097d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	891b      	ldrh	r3, [r3, #8]
 80097e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6959      	ldr	r1, [r3, #20]
 80097f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009802:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009806:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	f001 fa44 	bl	800ac98 <USB_WritePMA>
 8009810:	e3ee      	b.n	8009ff0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d177      	bne.n	8009912 <USB_EPStartXfer+0x650>
 8009822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	64bb      	str	r3, [r7, #72]	; 0x48
 800982e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983c:	b29b      	uxth	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009842:	4413      	add	r3, r2
 8009844:	64bb      	str	r3, [r7, #72]	; 0x48
 8009846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	00da      	lsls	r2, r3, #3
 8009854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009856:	4413      	add	r3, r2
 8009858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800985c:	647b      	str	r3, [r7, #68]	; 0x44
 800985e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	b29b      	uxth	r3, r3
 8009864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009868:	b29a      	uxth	r2, r3
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	801a      	strh	r2, [r3, #0]
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009872:	2b3e      	cmp	r3, #62	; 0x3e
 8009874:	d921      	bls.n	80098ba <USB_EPStartXfer+0x5f8>
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009884:	f003 031f 	and.w	r3, r3, #31
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <USB_EPStartXfer+0x5d4>
 800988c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009890:	3b01      	subs	r3, #1
 8009892:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	b29a      	uxth	r2, r3
 800989c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	029b      	lsls	r3, r3, #10
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4313      	orrs	r3, r2
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b6:	801a      	strh	r2, [r3, #0]
 80098b8:	e056      	b.n	8009968 <USB_EPStartXfer+0x6a6>
 80098ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <USB_EPStartXfer+0x616>
 80098c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d4:	801a      	strh	r2, [r3, #0]
 80098d6:	e047      	b.n	8009968 <USB_EPStartXfer+0x6a6>
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098dc:	085b      	lsrs	r3, r3, #1
 80098de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <USB_EPStartXfer+0x636>
 80098ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098f2:	3301      	adds	r3, #1
 80098f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009902:	b29b      	uxth	r3, r3
 8009904:	029b      	lsls	r3, r3, #10
 8009906:	b29b      	uxth	r3, r3
 8009908:	4313      	orrs	r3, r2
 800990a:	b29a      	uxth	r2, r3
 800990c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800990e:	801a      	strh	r2, [r3, #0]
 8009910:	e02a      	b.n	8009968 <USB_EPStartXfer+0x6a6>
 8009912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d122      	bne.n	8009968 <USB_EPStartXfer+0x6a6>
 8009922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	653b      	str	r3, [r7, #80]	; 0x50
 800992e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800993c:	b29b      	uxth	r3, r3
 800993e:	461a      	mov	r2, r3
 8009940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009942:	4413      	add	r3, r2
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
 8009946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	00da      	lsls	r2, r3, #3
 8009954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009956:	4413      	add	r3, r2
 8009958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800995c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009962:	b29a      	uxth	r2, r3
 8009964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009966:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	891b      	ldrh	r3, [r3, #8]
 8009974:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6959      	ldr	r1, [r3, #20]
 8009984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009988:	b29b      	uxth	r3, r3
 800998a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800998e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009992:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009996:	6800      	ldr	r0, [r0, #0]
 8009998:	f001 f97e 	bl	800ac98 <USB_WritePMA>
            ep->xfer_buff += len;
 800999c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	695a      	ldr	r2, [r3, #20]
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ac:	441a      	add	r2, r3
 80099ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6a1a      	ldr	r2, [r3, #32]
 80099c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d90f      	bls.n	80099f6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80099d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	621a      	str	r2, [r3, #32]
 80099f4:	e00e      	b.n	8009a14 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80099f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2200      	movs	r2, #0
 8009a12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	785b      	ldrb	r3, [r3, #1]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d177      	bne.n	8009b20 <USB_EPStartXfer+0x85e>
 8009a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	4413      	add	r3, r2
 8009a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	00da      	lsls	r2, r3, #3
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	4413      	add	r3, r2
 8009a66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7a:	801a      	strh	r2, [r3, #0]
 8009a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a80:	2b3e      	cmp	r3, #62	; 0x3e
 8009a82:	d921      	bls.n	8009ac8 <USB_EPStartXfer+0x806>
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a92:	f003 031f 	and.w	r3, r3, #31
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d104      	bne.n	8009aa4 <USB_EPStartXfer+0x7e2>
 8009a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	029b      	lsls	r3, r3, #10
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	e050      	b.n	8009b6a <USB_EPStartXfer+0x8a8>
 8009ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <USB_EPStartXfer+0x824>
 8009ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	e041      	b.n	8009b6a <USB_EPStartXfer+0x8a8>
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aea:	085b      	lsrs	r3, r3, #1
 8009aec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <USB_EPStartXfer+0x844>
 8009afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b00:	3301      	adds	r3, #1
 8009b02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	029b      	lsls	r3, r3, #10
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e024      	b.n	8009b6a <USB_EPStartXfer+0x8a8>
 8009b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d11c      	bne.n	8009b6a <USB_EPStartXfer+0x8a8>
 8009b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b44:	4413      	add	r3, r2
 8009b46:	643b      	str	r3, [r7, #64]	; 0x40
 8009b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	00da      	lsls	r2, r3, #3
 8009b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b58:	4413      	add	r3, r2
 8009b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	895b      	ldrh	r3, [r3, #10]
 8009b76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6959      	ldr	r1, [r3, #20]
 8009b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009b94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b98:	6800      	ldr	r0, [r0, #0]
 8009b9a:	f001 f87d 	bl	800ac98 <USB_WritePMA>
 8009b9e:	e227      	b.n	8009ff0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	441a      	add	r2, r3
 8009bf4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c2c:	4413      	add	r3, r2
 8009c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	00da      	lsls	r2, r3, #3
 8009c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c40:	4413      	add	r3, r2
 8009c42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c46:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	891b      	ldrh	r3, [r3, #8]
 8009c5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6959      	ldr	r1, [r3, #20]
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009c78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c80:	6800      	ldr	r0, [r0, #0]
 8009c82:	f001 f809 	bl	800ac98 <USB_WritePMA>
 8009c86:	e1b3      	b.n	8009ff0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6a1a      	ldr	r2, [r3, #32]
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c98:	1ad2      	subs	r2, r2, r3
 8009c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80c6 	beq.w	8009e5a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8009cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	785b      	ldrb	r3, [r3, #1]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d177      	bne.n	8009dda <USB_EPStartXfer+0xb18>
 8009cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d0a:	4413      	add	r3, r2
 8009d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	00da      	lsls	r2, r3, #3
 8009d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d1e:	4413      	add	r3, r2
 8009d20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d24:	667b      	str	r3, [r7, #100]	; 0x64
 8009d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d34:	801a      	strh	r2, [r3, #0]
 8009d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8009d3c:	d921      	bls.n	8009d82 <USB_EPStartXfer+0xac0>
 8009d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4c:	f003 031f 	and.w	r3, r3, #31
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d104      	bne.n	8009d5e <USB_EPStartXfer+0xa9c>
 8009d54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	029b      	lsls	r3, r3, #10
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	e050      	b.n	8009e24 <USB_EPStartXfer+0xb62>
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <USB_EPStartXfer+0xade>
 8009d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d9c:	801a      	strh	r2, [r3, #0]
 8009d9e:	e041      	b.n	8009e24 <USB_EPStartXfer+0xb62>
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d004      	beq.n	8009dc0 <USB_EPStartXfer+0xafe>
 8009db6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dba:	3301      	adds	r3, #1
 8009dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	029b      	lsls	r3, r3, #10
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd6:	801a      	strh	r2, [r3, #0]
 8009dd8:	e024      	b.n	8009e24 <USB_EPStartXfer+0xb62>
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d11c      	bne.n	8009e24 <USB_EPStartXfer+0xb62>
 8009dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dfe:	4413      	add	r3, r2
 8009e00:	673b      	str	r3, [r7, #112]	; 0x70
 8009e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	00da      	lsls	r2, r3, #3
 8009e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e12:	4413      	add	r3, r2
 8009e14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	895b      	ldrh	r3, [r3, #10]
 8009e30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6959      	ldr	r1, [r3, #20]
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e52:	6800      	ldr	r0, [r0, #0]
 8009e54:	f000 ff20 	bl	800ac98 <USB_WritePMA>
 8009e58:	e0ca      	b.n	8009ff0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d177      	bne.n	8009f5a <USB_EPStartXfer+0xc98>
 8009e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e8a:	4413      	add	r3, r2
 8009e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	00da      	lsls	r2, r3, #3
 8009e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eb4:	801a      	strh	r2, [r3, #0]
 8009eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eba:	2b3e      	cmp	r3, #62	; 0x3e
 8009ebc:	d921      	bls.n	8009f02 <USB_EPStartXfer+0xc40>
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec2:	095b      	lsrs	r3, r3, #5
 8009ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ecc:	f003 031f 	and.w	r3, r3, #31
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <USB_EPStartXfer+0xc1c>
 8009ed4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	029b      	lsls	r3, r3, #10
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e05c      	b.n	8009fbc <USB_EPStartXfer+0xcfa>
 8009f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <USB_EPStartXfer+0xc5e>
 8009f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	e04d      	b.n	8009fbc <USB_EPStartXfer+0xcfa>
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <USB_EPStartXfer+0xc7e>
 8009f36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f56:	801a      	strh	r2, [r3, #0]
 8009f58:	e030      	b.n	8009fbc <USB_EPStartXfer+0xcfa>
 8009f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d128      	bne.n	8009fbc <USB_EPStartXfer+0xcfa>
 8009f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	461a      	mov	r2, r3
 8009f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f8e:	4413      	add	r3, r2
 8009f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	00da      	lsls	r2, r3, #3
 8009fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	891b      	ldrh	r3, [r3, #8]
 8009fc8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6959      	ldr	r1, [r3, #20]
 8009fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fe2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009fe6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	f000 fe54 	bl	800ac98 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a016:	817b      	strh	r3, [r7, #10]
 800a018:	897b      	ldrh	r3, [r7, #10]
 800a01a:	f083 0310 	eor.w	r3, r3, #16
 800a01e:	817b      	strh	r3, [r7, #10]
 800a020:	897b      	ldrh	r3, [r7, #10]
 800a022:	f083 0320 	eor.w	r3, r3, #32
 800a026:	817b      	strh	r3, [r7, #10]
 800a028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	441a      	add	r2, r3
 800a042:	897b      	ldrh	r3, [r7, #10]
 800a044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a04c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a054:	b29b      	uxth	r3, r3
 800a056:	8013      	strh	r3, [r2, #0]
 800a058:	f000 bcde 	b.w	800aa18 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	7b1b      	ldrb	r3, [r3, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f040 80bb 	bne.w	800a1e4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a07e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	429a      	cmp	r2, r3
 800a088:	d917      	bls.n	800a0ba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0aa:	1ad2      	subs	r2, r2, r3
 800a0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	619a      	str	r2, [r3, #24]
 800a0b8:	e00e      	b.n	800a0d8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	00da      	lsls	r2, r3, #3
 800a110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a114:	4413      	add	r3, r2
 800a116:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a11a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a11e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a130:	801a      	strh	r2, [r3, #0]
 800a132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a136:	2b3e      	cmp	r3, #62	; 0x3e
 800a138:	d924      	bls.n	800a184 <USB_EPStartXfer+0xec2>
 800a13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13e:	095b      	lsrs	r3, r3, #5
 800a140:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a148:	f003 031f 	and.w	r3, r3, #31
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d104      	bne.n	800a15a <USB_EPStartXfer+0xe98>
 800a150:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a154:	3b01      	subs	r3, #1
 800a156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a15a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	b29a      	uxth	r2, r3
 800a162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a166:	b29b      	uxth	r3, r3
 800a168:	029b      	lsls	r3, r3, #10
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4313      	orrs	r3, r2
 800a16e:	b29b      	uxth	r3, r3
 800a170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a178:	b29a      	uxth	r2, r3
 800a17a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	f000 bc10 	b.w	800a9a4 <USB_EPStartXfer+0x16e2>
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10c      	bne.n	800a1a6 <USB_EPStartXfer+0xee4>
 800a18c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	b29b      	uxth	r3, r3
 800a194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	e3fe      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
 800a1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d004      	beq.n	800a1c6 <USB_EPStartXfer+0xf04>
 800a1bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	029b      	lsls	r3, r3, #10
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1e0:	801a      	strh	r2, [r3, #0]
 800a1e2:	e3df      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	78db      	ldrb	r3, [r3, #3]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	f040 8218 	bne.w	800a626 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f040 809d 	bne.w	800a342 <USB_EPStartXfer+0x1080>
 800a208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a224:	b29b      	uxth	r3, r3
 800a226:	461a      	mov	r2, r3
 800a228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a22c:	4413      	add	r3, r2
 800a22e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	00da      	lsls	r2, r3, #3
 800a240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a244:	4413      	add	r3, r2
 800a246:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a24a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a24e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a260:	801a      	strh	r2, [r3, #0]
 800a262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b3e      	cmp	r3, #62	; 0x3e
 800a270:	d92b      	bls.n	800a2ca <USB_EPStartXfer+0x1008>
 800a272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	2b00      	cmp	r3, #0
 800a296:	d104      	bne.n	800a2a2 <USB_EPStartXfer+0xfe0>
 800a298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29c:	3b01      	subs	r3, #1
 800a29e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	029b      	lsls	r3, r3, #10
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2c6:	801a      	strh	r2, [r3, #0]
 800a2c8:	e070      	b.n	800a3ac <USB_EPStartXfer+0x10ea>
 800a2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10c      	bne.n	800a2f4 <USB_EPStartXfer+0x1032>
 800a2da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2f0:	801a      	strh	r2, [r3, #0]
 800a2f2:	e05b      	b.n	800a3ac <USB_EPStartXfer+0x10ea>
 800a2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	085b      	lsrs	r3, r3, #1
 800a302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <USB_EPStartXfer+0x1062>
 800a31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31e:	3301      	adds	r3, #1
 800a320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a330:	b29b      	uxth	r3, r3
 800a332:	029b      	lsls	r3, r3, #10
 800a334:	b29b      	uxth	r3, r3
 800a336:	4313      	orrs	r3, r2
 800a338:	b29a      	uxth	r2, r3
 800a33a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a33e:	801a      	strh	r2, [r3, #0]
 800a340:	e034      	b.n	800a3ac <USB_EPStartXfer+0x10ea>
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d12c      	bne.n	800a3ac <USB_EPStartXfer+0x10ea>
 800a352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a36e:	b29b      	uxth	r3, r3
 800a370:	461a      	mov	r2, r3
 800a372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a376:	4413      	add	r3, r2
 800a378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	00da      	lsls	r2, r3, #3
 800a38a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a38e:	4413      	add	r3, r2
 800a390:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3aa:	801a      	strh	r2, [r3, #0]
 800a3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f040 809d 	bne.w	800a506 <USB_EPStartXfer+0x1244>
 800a3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	00da      	lsls	r2, r3, #3
 800a404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a408:	4413      	add	r3, r2
 800a40a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a40e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a412:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a41e:	b29a      	uxth	r2, r3
 800a420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a424:	801a      	strh	r2, [r3, #0]
 800a426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b3e      	cmp	r3, #62	; 0x3e
 800a434:	d92b      	bls.n	800a48e <USB_EPStartXfer+0x11cc>
 800a436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	095b      	lsrs	r3, r3, #5
 800a444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f003 031f 	and.w	r3, r3, #31
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <USB_EPStartXfer+0x11a4>
 800a45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a460:	3b01      	subs	r3, #1
 800a462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a466:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a472:	b29b      	uxth	r3, r3
 800a474:	029b      	lsls	r3, r3, #10
 800a476:	b29b      	uxth	r3, r3
 800a478:	4313      	orrs	r3, r2
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a484:	b29a      	uxth	r2, r3
 800a486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a48a:	801a      	strh	r2, [r3, #0]
 800a48c:	e069      	b.n	800a562 <USB_EPStartXfer+0x12a0>
 800a48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10c      	bne.n	800a4b8 <USB_EPStartXfer+0x11f6>
 800a49e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4b4:	801a      	strh	r2, [r3, #0]
 800a4b6:	e054      	b.n	800a562 <USB_EPStartXfer+0x12a0>
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <USB_EPStartXfer+0x1226>
 800a4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	029b      	lsls	r3, r3, #10
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a502:	801a      	strh	r2, [r3, #0]
 800a504:	e02d      	b.n	800a562 <USB_EPStartXfer+0x12a0>
 800a506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d125      	bne.n	800a562 <USB_EPStartXfer+0x12a0>
 800a516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a524:	b29b      	uxth	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a52c:	4413      	add	r3, r2
 800a52e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	00da      	lsls	r2, r3, #3
 800a540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a544:	4413      	add	r3, r2
 800a546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a54a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a560:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 8218 	beq.w	800a9a4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a594:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <USB_EPStartXfer+0x12ea>
 800a5a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10d      	bne.n	800a5c8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 81f5 	bne.w	800a9a4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f040 81ee 	bne.w	800a9a4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ee:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	441a      	add	r2, r3
 800a60c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a61c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a620:	b29b      	uxth	r3, r3
 800a622:	8013      	strh	r3, [r2, #0]
 800a624:	e1be      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	78db      	ldrb	r3, [r3, #3]
 800a632:	2b01      	cmp	r3, #1
 800a634:	f040 81b4 	bne.w	800a9a0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	429a      	cmp	r2, r3
 800a652:	d917      	bls.n	800a684 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	699a      	ldr	r2, [r3, #24]
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a674:	1ad2      	subs	r2, r2, r3
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	619a      	str	r2, [r3, #24]
 800a682:	e00e      	b.n	800a6a2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f040 8085 	bne.w	800a7be <USB_EPStartXfer+0x14fc>
 800a6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6d8:	4413      	add	r3, r2
 800a6da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	00da      	lsls	r2, r3, #3
 800a6ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	b29b      	uxth	r3, r3
 800a702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a706:	b29a      	uxth	r2, r3
 800a708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a70c:	801a      	strh	r2, [r3, #0]
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a712:	2b3e      	cmp	r3, #62	; 0x3e
 800a714:	d923      	bls.n	800a75e <USB_EPStartXfer+0x149c>
 800a716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71a:	095b      	lsrs	r3, r3, #5
 800a71c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a724:	f003 031f 	and.w	r3, r3, #31
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <USB_EPStartXfer+0x1474>
 800a72c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a730:	3b01      	subs	r3, #1
 800a732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a742:	b29b      	uxth	r3, r3
 800a744:	029b      	lsls	r3, r3, #10
 800a746:	b29b      	uxth	r3, r3
 800a748:	4313      	orrs	r3, r2
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a754:	b29a      	uxth	r2, r3
 800a756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a75a:	801a      	strh	r2, [r3, #0]
 800a75c:	e060      	b.n	800a820 <USB_EPStartXfer+0x155e>
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10c      	bne.n	800a780 <USB_EPStartXfer+0x14be>
 800a766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a776:	b29a      	uxth	r2, r3
 800a778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	e04f      	b.n	800a820 <USB_EPStartXfer+0x155e>
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <USB_EPStartXfer+0x14de>
 800a796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a79a:	3301      	adds	r3, #1
 800a79c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	029b      	lsls	r3, r3, #10
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	e030      	b.n	800a820 <USB_EPStartXfer+0x155e>
 800a7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	785b      	ldrb	r3, [r3, #1]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d128      	bne.n	800a820 <USB_EPStartXfer+0x155e>
 800a7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	00da      	lsls	r2, r3, #3
 800a806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a80a:	4413      	add	r3, r2
 800a80c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a818:	b29a      	uxth	r2, r3
 800a81a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a81e:	801a      	strh	r2, [r3, #0]
 800a820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 8085 	bne.w	800a94a <USB_EPStartXfer+0x1688>
 800a840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	461a      	mov	r2, r3
 800a860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a864:	4413      	add	r3, r2
 800a866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	00da      	lsls	r2, r3, #3
 800a878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a87c:	4413      	add	r3, r2
 800a87e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a892:	b29a      	uxth	r2, r3
 800a894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a898:	801a      	strh	r2, [r3, #0]
 800a89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89e:	2b3e      	cmp	r3, #62	; 0x3e
 800a8a0:	d923      	bls.n	800a8ea <USB_EPStartXfer+0x1628>
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a6:	095b      	lsrs	r3, r3, #5
 800a8a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b0:	f003 031f 	and.w	r3, r3, #31
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d104      	bne.n	800a8c2 <USB_EPStartXfer+0x1600>
 800a8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	029b      	lsls	r3, r3, #10
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8e6:	801a      	strh	r2, [r3, #0]
 800a8e8:	e05c      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10c      	bne.n	800a90c <USB_EPStartXfer+0x164a>
 800a8f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a902:	b29a      	uxth	r2, r3
 800a904:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e04b      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a910:	085b      	lsrs	r3, r3, #1
 800a912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <USB_EPStartXfer+0x166a>
 800a922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a926:	3301      	adds	r3, #1
 800a928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a92c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29a      	uxth	r2, r3
 800a934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a938:	b29b      	uxth	r3, r3
 800a93a:	029b      	lsls	r3, r3, #10
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	b29a      	uxth	r2, r3
 800a942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a946:	801a      	strh	r2, [r3, #0]
 800a948:	e02c      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
 800a94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	785b      	ldrb	r3, [r3, #1]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d124      	bne.n	800a9a4 <USB_EPStartXfer+0x16e2>
 800a95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a968:	b29b      	uxth	r3, r3
 800a96a:	461a      	mov	r2, r3
 800a96c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a970:	4413      	add	r3, r2
 800a972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	00da      	lsls	r2, r3, #3
 800a984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a988:	4413      	add	r3, r2
 800a98a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a98e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a996:	b29a      	uxth	r2, r3
 800a998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a99c:	801a      	strh	r2, [r3, #0]
 800a99e:	e001      	b.n	800a9a4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e03a      	b.n	800aa1a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a9ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a9d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a9da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a9de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	441a      	add	r2, r3
 800aa00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aa04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d020      	beq.n	800aa78 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa4c:	81bb      	strh	r3, [r7, #12]
 800aa4e:	89bb      	ldrh	r3, [r7, #12]
 800aa50:	f083 0310 	eor.w	r3, r3, #16
 800aa54:	81bb      	strh	r3, [r7, #12]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	441a      	add	r2, r3
 800aa60:	89bb      	ldrh	r3, [r7, #12]
 800aa62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	8013      	strh	r3, [r2, #0]
 800aa76:	e01f      	b.n	800aab8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8e:	81fb      	strh	r3, [r7, #14]
 800aa90:	89fb      	ldrh	r3, [r7, #14]
 800aa92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa96:	81fb      	strh	r3, [r7, #14]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	441a      	add	r2, r3
 800aaa2:	89fb      	ldrh	r3, [r7, #14]
 800aaa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b087      	sub	sp, #28
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	7b1b      	ldrb	r3, [r3, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 809d 	bne.w	800ac14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d04c      	beq.n	800ab7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	823b      	strh	r3, [r7, #16]
 800aaf0:	8a3b      	ldrh	r3, [r7, #16]
 800aaf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d01b      	beq.n	800ab32 <USB_EPClearStall+0x6c>
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab10:	81fb      	strh	r3, [r7, #14]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	441a      	add	r2, r3
 800ab1c:	89fb      	ldrh	r3, [r7, #14]
 800ab1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	78db      	ldrb	r3, [r3, #3]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d06c      	beq.n	800ac14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab50:	81bb      	strh	r3, [r7, #12]
 800ab52:	89bb      	ldrh	r3, [r7, #12]
 800ab54:	f083 0320 	eor.w	r3, r3, #32
 800ab58:	81bb      	strh	r3, [r7, #12]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	441a      	add	r2, r3
 800ab64:	89bb      	ldrh	r3, [r7, #12]
 800ab66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	8013      	strh	r3, [r2, #0]
 800ab7a:	e04b      	b.n	800ac14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	82fb      	strh	r3, [r7, #22]
 800ab8a:	8afb      	ldrh	r3, [r7, #22]
 800ab8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01b      	beq.n	800abcc <USB_EPClearStall+0x106>
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abaa:	82bb      	strh	r3, [r7, #20]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	441a      	add	r2, r3
 800abb6:	8abb      	ldrh	r3, [r7, #20]
 800abb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc8:	b29b      	uxth	r3, r3
 800abca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe2:	827b      	strh	r3, [r7, #18]
 800abe4:	8a7b      	ldrh	r3, [r7, #18]
 800abe6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abea:	827b      	strh	r3, [r7, #18]
 800abec:	8a7b      	ldrh	r3, [r7, #18]
 800abee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800abf2:	827b      	strh	r3, [r7, #18]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	441a      	add	r2, r3
 800abfe:	8a7b      	ldrh	r3, [r7, #18]
 800ac00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2280      	movs	r2, #128	; 0x80
 800ac38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b083      	sub	sp, #12
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b08b      	sub	sp, #44	; 0x2c
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4611      	mov	r1, r2
 800aca4:	461a      	mov	r2, r3
 800aca6:	460b      	mov	r3, r1
 800aca8:	80fb      	strh	r3, [r7, #6]
 800acaa:	4613      	mov	r3, r2
 800acac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acae:	88bb      	ldrh	r3, [r7, #4]
 800acb0:	3301      	adds	r3, #1
 800acb2:	085b      	lsrs	r3, r3, #1
 800acb4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acbe:	88fa      	ldrh	r2, [r7, #6]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
 800acce:	e01b      	b.n	800ad08 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	3301      	adds	r3, #1
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	b21a      	sxth	r2, r3
 800ace0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	8a7a      	ldrh	r2, [r7, #18]
 800acee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	3302      	adds	r3, #2
 800acf4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	3301      	adds	r3, #1
 800acfa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	3301      	adds	r3, #1
 800ad00:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	3b01      	subs	r3, #1
 800ad06:	627b      	str	r3, [r7, #36]	; 0x24
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e0      	bne.n	800acd0 <USB_WritePMA+0x38>
  }
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	372c      	adds	r7, #44	; 0x2c
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b08b      	sub	sp, #44	; 0x2c
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	4611      	mov	r1, r2
 800ad28:	461a      	mov	r2, r3
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	80fb      	strh	r3, [r7, #6]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ad32:	88bb      	ldrh	r3, [r7, #4]
 800ad34:	085b      	lsrs	r3, r3, #1
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad42:	88fa      	ldrh	r2, [r7, #6]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
 800ad52:	e018      	b.n	800ad86 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	3302      	adds	r3, #2
 800ad60:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	3b01      	subs	r3, #1
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e3      	bne.n	800ad54 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ad8c:	88bb      	ldrh	r3, [r7, #4]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	701a      	strb	r2, [r3, #0]
  }
}
 800ada8:	bf00      	nop
 800adaa:	372c      	adds	r7, #44	; 0x2c
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800adc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800adc4:	f002 f8a6 	bl	800cf14 <USBD_static_malloc>
 800adc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d105      	bne.n	800addc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800add8:	2302      	movs	r3, #2
 800adda:	e066      	b.n	800aeaa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7c1b      	ldrb	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d119      	bne.n	800ae20 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adf0:	2202      	movs	r2, #2
 800adf2:	2181      	movs	r1, #129	; 0x81
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 ff34 	bl	800cc62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae04:	2202      	movs	r2, #2
 800ae06:	2101      	movs	r1, #1
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 ff2a 	bl	800cc62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2210      	movs	r2, #16
 800ae1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ae1e:	e016      	b.n	800ae4e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae20:	2340      	movs	r3, #64	; 0x40
 800ae22:	2202      	movs	r2, #2
 800ae24:	2181      	movs	r1, #129	; 0x81
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 ff1b 	bl	800cc62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae32:	2340      	movs	r3, #64	; 0x40
 800ae34:	2202      	movs	r2, #2
 800ae36:	2101      	movs	r1, #1
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 ff12 	bl	800cc62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2210      	movs	r2, #16
 800ae4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae4e:	2308      	movs	r3, #8
 800ae50:	2203      	movs	r2, #3
 800ae52:	2182      	movs	r1, #130	; 0x82
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 ff04 	bl	800cc62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7c1b      	ldrb	r3, [r3, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d109      	bne.n	800ae98 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae8e:	2101      	movs	r1, #1
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f001 ffd5 	bl	800ce40 <USBD_LL_PrepareReceive>
 800ae96:	e007      	b.n	800aea8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae9e:	2340      	movs	r3, #64	; 0x40
 800aea0:	2101      	movs	r1, #1
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 ffcc 	bl	800ce40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aebe:	2181      	movs	r1, #129	; 0x81
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 fef4 	bl	800ccae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aecc:	2101      	movs	r1, #1
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f001 feed 	bl	800ccae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aedc:	2182      	movs	r1, #130	; 0x82
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f001 fee5 	bl	800ccae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00e      	beq.n	800af1c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af0e:	4618      	mov	r0, r3
 800af10:	f002 f80e 	bl	800cf30 <USBD_static_free>
    pdev->pClassData = NULL;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e0af      	b.n	800b0b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d03f      	beq.n	800afdc <USBD_CDC_Setup+0xb4>
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	f040 809f 	bne.w	800b0a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	88db      	ldrh	r3, [r3, #6]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d02e      	beq.n	800afc8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	b25b      	sxtb	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	da16      	bge.n	800afa2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800af80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	88d2      	ldrh	r2, [r2, #6]
 800af86:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	88db      	ldrh	r3, [r3, #6]
 800af8c:	2b07      	cmp	r3, #7
 800af8e:	bf28      	it	cs
 800af90:	2307      	movcs	r3, #7
 800af92:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	89fa      	ldrh	r2, [r7, #14]
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f001 fa9f 	bl	800c4de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800afa0:	e085      	b.n	800b0ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	785a      	ldrb	r2, [r3, #1]
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	88db      	ldrh	r3, [r3, #6]
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800afb8:	6939      	ldr	r1, [r7, #16]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	88db      	ldrh	r3, [r3, #6]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f001 fab8 	bl	800c536 <USBD_CtlPrepareRx>
      break;
 800afc6:	e072      	b.n	800b0ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	7850      	ldrb	r0, [r2, #1]
 800afd4:	2200      	movs	r2, #0
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	4798      	blx	r3
      break;
 800afda:	e068      	b.n	800b0ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	785b      	ldrb	r3, [r3, #1]
 800afe0:	2b0b      	cmp	r3, #11
 800afe2:	d852      	bhi.n	800b08a <USBD_CDC_Setup+0x162>
 800afe4:	a201      	add	r2, pc, #4	; (adr r2, 800afec <USBD_CDC_Setup+0xc4>)
 800afe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afea:	bf00      	nop
 800afec:	0800b01d 	.word	0x0800b01d
 800aff0:	0800b099 	.word	0x0800b099
 800aff4:	0800b08b 	.word	0x0800b08b
 800aff8:	0800b08b 	.word	0x0800b08b
 800affc:	0800b08b 	.word	0x0800b08b
 800b000:	0800b08b 	.word	0x0800b08b
 800b004:	0800b08b 	.word	0x0800b08b
 800b008:	0800b08b 	.word	0x0800b08b
 800b00c:	0800b08b 	.word	0x0800b08b
 800b010:	0800b08b 	.word	0x0800b08b
 800b014:	0800b047 	.word	0x0800b047
 800b018:	0800b071 	.word	0x0800b071
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b03      	cmp	r3, #3
 800b026:	d107      	bne.n	800b038 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b028:	f107 030a 	add.w	r3, r7, #10
 800b02c:	2202      	movs	r2, #2
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 fa54 	bl	800c4de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b036:	e032      	b.n	800b09e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 f9de 	bl	800c3fc <USBD_CtlError>
            ret = USBD_FAIL;
 800b040:	2303      	movs	r3, #3
 800b042:	75fb      	strb	r3, [r7, #23]
          break;
 800b044:	e02b      	b.n	800b09e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d107      	bne.n	800b062 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b052:	f107 030d 	add.w	r3, r7, #13
 800b056:	2201      	movs	r2, #1
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 fa3f 	bl	800c4de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b060:	e01d      	b.n	800b09e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f9c9 	bl	800c3fc <USBD_CtlError>
            ret = USBD_FAIL;
 800b06a:	2303      	movs	r3, #3
 800b06c:	75fb      	strb	r3, [r7, #23]
          break;
 800b06e:	e016      	b.n	800b09e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b03      	cmp	r3, #3
 800b07a:	d00f      	beq.n	800b09c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 f9bc 	bl	800c3fc <USBD_CtlError>
            ret = USBD_FAIL;
 800b084:	2303      	movs	r3, #3
 800b086:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b088:	e008      	b.n	800b09c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 f9b5 	bl	800c3fc <USBD_CtlError>
          ret = USBD_FAIL;
 800b092:	2303      	movs	r3, #3
 800b094:	75fb      	strb	r3, [r7, #23]
          break;
 800b096:	e002      	b.n	800b09e <USBD_CDC_Setup+0x176>
          break;
 800b098:	bf00      	nop
 800b09a:	e008      	b.n	800b0ae <USBD_CDC_Setup+0x186>
          break;
 800b09c:	bf00      	nop
      }
      break;
 800b09e:	e006      	b.n	800b0ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f001 f9aa 	bl	800c3fc <USBD_CtlError>
      ret = USBD_FAIL;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e04f      	b.n	800b17a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	3318      	adds	r3, #24
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d029      	beq.n	800b14c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	440b      	add	r3, r1
 800b106:	3318      	adds	r3, #24
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	78f9      	ldrb	r1, [r7, #3]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	460b      	mov	r3, r1
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	440b      	add	r3, r1
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	4403      	add	r3, r0
 800b118:	3320      	adds	r3, #32
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b120:	fb01 f303 	mul.w	r3, r1, r3
 800b124:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b126:	2b00      	cmp	r3, #0
 800b128:	d110      	bne.n	800b14c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b12a:	78fa      	ldrb	r2, [r7, #3]
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	3318      	adds	r3, #24
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b13e:	78f9      	ldrb	r1, [r7, #3]
 800b140:	2300      	movs	r3, #0
 800b142:	2200      	movs	r2, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f001 fe5a 	bl	800cdfe <USBD_LL_Transmit>
 800b14a:	e015      	b.n	800b178 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2200      	movs	r2, #0
 800b150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b194:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e015      	b.n	800b1d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f001 fe6a 	bl	800ce82 <USBD_LL_GetRxDataSize>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e01b      	b.n	800b22a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d015      	beq.n	800b228 <USBD_CDC_EP0_RxReady+0x50>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b202:	2bff      	cmp	r3, #255	; 0xff
 800b204:	d010      	beq.n	800b228 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b214:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b21c:	b292      	uxth	r2, r2
 800b21e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	22ff      	movs	r2, #255	; 0xff
 800b224:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2243      	movs	r2, #67	; 0x43
 800b240:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b242:	4b03      	ldr	r3, [pc, #12]	; (800b250 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20000094 	.word	0x20000094

0800b254 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2243      	movs	r2, #67	; 0x43
 800b260:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b262:	4b03      	ldr	r3, [pc, #12]	; (800b270 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	20000050 	.word	0x20000050

0800b274 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2243      	movs	r2, #67	; 0x43
 800b280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b282:	4b03      	ldr	r3, [pc, #12]	; (800b290 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	200000d8 	.word	0x200000d8

0800b294 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	220a      	movs	r2, #10
 800b2a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2a2:	4b03      	ldr	r3, [pc, #12]	; (800b2b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	2000000c 	.word	0x2000000c

0800b2b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e004      	b.n	800b2d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e008      	b.n	800b30e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b32a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b332:	2303      	movs	r3, #3
 800b334:	e004      	b.n	800b340 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b35a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b366:	2303      	movs	r3, #3
 800b368:	e016      	b.n	800b398 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	7c1b      	ldrb	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d109      	bne.n	800b386 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b37c:	2101      	movs	r1, #1
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 fd5e 	bl	800ce40 <USBD_LL_PrepareReceive>
 800b384:	e007      	b.n	800b396 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b38c:	2340      	movs	r3, #64	; 0x40
 800b38e:	2101      	movs	r1, #1
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f001 fd55 	bl	800ce40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	e01f      	b.n	800b3f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	79fa      	ldrb	r2, [r7, #7]
 800b3ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f001 fbbd 	bl	800cb6c <USBD_LL_Init>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b414:	2303      	movs	r3, #3
 800b416:	e016      	b.n	800b446 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	f107 020e 	add.w	r2, r7, #14
 800b438:	4610      	mov	r0, r2
 800b43a:	4798      	blx	r3
 800b43c:	4602      	mov	r2, r0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f001 fbe8 	bl	800cc2c <USBD_LL_Start>
 800b45c:	4603      	mov	r3, r0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	460b      	mov	r3, r1
 800b486:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	78fa      	ldrb	r2, [r7, #3]
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d007      	beq.n	800b4da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	78fa      	ldrb	r2, [r7, #3]
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	4798      	blx	r3
  }

  return USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 ff46 	bl	800c388 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b50a:	461a      	mov	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b518:	f003 031f 	and.w	r3, r3, #31
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d01a      	beq.n	800b556 <USBD_LL_SetupStage+0x72>
 800b520:	2b02      	cmp	r3, #2
 800b522:	d822      	bhi.n	800b56a <USBD_LL_SetupStage+0x86>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <USBD_LL_SetupStage+0x4a>
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d00a      	beq.n	800b542 <USBD_LL_SetupStage+0x5e>
 800b52c:	e01d      	b.n	800b56a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9ee 	bl	800b918 <USBD_StdDevReq>
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]
      break;
 800b540:	e020      	b.n	800b584 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fa52 	bl	800b9f4 <USBD_StdItfReq>
 800b550:	4603      	mov	r3, r0
 800b552:	73fb      	strb	r3, [r7, #15]
      break;
 800b554:	e016      	b.n	800b584 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fa91 	bl	800ba86 <USBD_StdEPReq>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]
      break;
 800b568:	e00c      	b.n	800b584 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b574:	b2db      	uxtb	r3, r3
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 fbb7 	bl	800ccec <USBD_LL_StallEP>
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]
      break;
 800b582:	bf00      	nop
  }

  return ret;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b086      	sub	sp, #24
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	460b      	mov	r3, r1
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b59c:	7afb      	ldrb	r3, [r7, #11]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d138      	bne.n	800b614 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b5a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d14a      	bne.n	800b64a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d913      	bls.n	800b5e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	689a      	ldr	r2, [r3, #8]
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	1ad2      	subs	r2, r2, r3
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	68da      	ldr	r2, [r3, #12]
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	bf28      	it	cs
 800b5da:	4613      	movcs	r3, r2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 ffc5 	bl	800c570 <USBD_CtlContinueRx>
 800b5e6:	e030      	b.n	800b64a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b03      	cmp	r3, #3
 800b5f2:	d10b      	bne.n	800b60c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 ffc0 	bl	800c592 <USBD_CtlSendStatus>
 800b612:	e01a      	b.n	800b64a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d114      	bne.n	800b64a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00e      	beq.n	800b64a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	7afa      	ldrb	r2, [r7, #11]
 800b636:	4611      	mov	r1, r2
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	4798      	blx	r3
 800b63c:	4603      	mov	r3, r0
 800b63e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b640:	7dfb      	ldrb	r3, [r7, #23]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	e000      	b.n	800b64c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	460b      	mov	r3, r1
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b662:	7afb      	ldrb	r3, [r7, #11]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d16b      	bne.n	800b740 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3314      	adds	r3, #20
 800b66c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b674:	2b02      	cmp	r3, #2
 800b676:	d156      	bne.n	800b726 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	429a      	cmp	r2, r3
 800b682:	d914      	bls.n	800b6ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	1ad2      	subs	r2, r2, r3
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	461a      	mov	r2, r3
 800b698:	6879      	ldr	r1, [r7, #4]
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 ff3a 	bl	800c514 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f001 fbca 	bl	800ce40 <USBD_LL_PrepareReceive>
 800b6ac:	e03b      	b.n	800b726 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d11c      	bne.n	800b6f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d316      	bcc.n	800b6f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d20f      	bcs.n	800b6f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 ff1b 	bl	800c514 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f001 fba7 	bl	800ce40 <USBD_LL_PrepareReceive>
 800b6f2:	e018      	b.n	800b726 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d10b      	bne.n	800b718 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b718:	2180      	movs	r1, #128	; 0x80
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f001 fae6 	bl	800ccec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 ff49 	bl	800c5b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d122      	bne.n	800b776 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7ff fe98 	bl	800b466 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b73e:	e01a      	b.n	800b776 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d114      	bne.n	800b776 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00e      	beq.n	800b776 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	7afa      	ldrb	r2, [r7, #11]
 800b762:	4611      	mov	r1, r2
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	4798      	blx	r3
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	e000      	b.n	800b778 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e02f      	b.n	800b814 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00f      	beq.n	800b7de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	6852      	ldr	r2, [r2, #4]
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	4611      	mov	r1, r2
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7de:	2340      	movs	r3, #64	; 0x40
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f001 fa3c 	bl	800cc62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2240      	movs	r2, #64	; 0x40
 800b7f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2180      	movs	r1, #128	; 0x80
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 fa2e 	bl	800cc62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2240      	movs	r2, #64	; 0x40
 800b810:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2204      	movs	r2, #4
 800b856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b04      	cmp	r3, #4
 800b87a:	d106      	bne.n	800b88a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b882:	b2da      	uxtb	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e012      	b.n	800b8d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d10b      	bne.n	800b8d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d005      	beq.n	800b8d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8fa:	8a3b      	ldrh	r3, [r7, #16]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	b21a      	sxth	r2, r3
 800b900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b904:	4313      	orrs	r3, r2
 800b906:	b21b      	sxth	r3, r3
 800b908:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b90a:	89fb      	ldrh	r3, [r7, #14]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	371c      	adds	r7, #28
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b92e:	2b40      	cmp	r3, #64	; 0x40
 800b930:	d005      	beq.n	800b93e <USBD_StdDevReq+0x26>
 800b932:	2b40      	cmp	r3, #64	; 0x40
 800b934:	d853      	bhi.n	800b9de <USBD_StdDevReq+0xc6>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00b      	beq.n	800b952 <USBD_StdDevReq+0x3a>
 800b93a:	2b20      	cmp	r3, #32
 800b93c:	d14f      	bne.n	800b9de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	4798      	blx	r3
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
      break;
 800b950:	e04a      	b.n	800b9e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	785b      	ldrb	r3, [r3, #1]
 800b956:	2b09      	cmp	r3, #9
 800b958:	d83b      	bhi.n	800b9d2 <USBD_StdDevReq+0xba>
 800b95a:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <USBD_StdDevReq+0x48>)
 800b95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b960:	0800b9b5 	.word	0x0800b9b5
 800b964:	0800b9c9 	.word	0x0800b9c9
 800b968:	0800b9d3 	.word	0x0800b9d3
 800b96c:	0800b9bf 	.word	0x0800b9bf
 800b970:	0800b9d3 	.word	0x0800b9d3
 800b974:	0800b993 	.word	0x0800b993
 800b978:	0800b989 	.word	0x0800b989
 800b97c:	0800b9d3 	.word	0x0800b9d3
 800b980:	0800b9ab 	.word	0x0800b9ab
 800b984:	0800b99d 	.word	0x0800b99d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f9de 	bl	800bd4c <USBD_GetDescriptor>
          break;
 800b990:	e024      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fb6d 	bl	800c074 <USBD_SetAddress>
          break;
 800b99a:	e01f      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fbac 	bl	800c0fc <USBD_SetConfig>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]
          break;
 800b9a8:	e018      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fc4b 	bl	800c248 <USBD_GetConfig>
          break;
 800b9b2:	e013      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fc7c 	bl	800c2b4 <USBD_GetStatus>
          break;
 800b9bc:	e00e      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fcab 	bl	800c31c <USBD_SetFeature>
          break;
 800b9c6:	e009      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fcba 	bl	800c344 <USBD_ClrFeature>
          break;
 800b9d0:	e004      	b.n	800b9dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fd11 	bl	800c3fc <USBD_CtlError>
          break;
 800b9da:	bf00      	nop
      }
      break;
 800b9dc:	e004      	b.n	800b9e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fd0b 	bl	800c3fc <USBD_CtlError>
      break;
 800b9e6:	bf00      	nop
  }

  return ret;
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop

0800b9f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba0a:	2b40      	cmp	r3, #64	; 0x40
 800ba0c:	d005      	beq.n	800ba1a <USBD_StdItfReq+0x26>
 800ba0e:	2b40      	cmp	r3, #64	; 0x40
 800ba10:	d82f      	bhi.n	800ba72 <USBD_StdItfReq+0x7e>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <USBD_StdItfReq+0x26>
 800ba16:	2b20      	cmp	r3, #32
 800ba18:	d12b      	bne.n	800ba72 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d81d      	bhi.n	800ba64 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	889b      	ldrh	r3, [r3, #4]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d813      	bhi.n	800ba5a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	4798      	blx	r3
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	88db      	ldrh	r3, [r3, #6]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d110      	bne.n	800ba6e <USBD_StdItfReq+0x7a>
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10d      	bne.n	800ba6e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fd9d 	bl	800c592 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba58:	e009      	b.n	800ba6e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fccd 	bl	800c3fc <USBD_CtlError>
          break;
 800ba62:	e004      	b.n	800ba6e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fcc8 	bl	800c3fc <USBD_CtlError>
          break;
 800ba6c:	e000      	b.n	800ba70 <USBD_StdItfReq+0x7c>
          break;
 800ba6e:	bf00      	nop
      }
      break;
 800ba70:	e004      	b.n	800ba7c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fcc1 	bl	800c3fc <USBD_CtlError>
      break;
 800ba7a:	bf00      	nop
  }

  return ret;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	889b      	ldrh	r3, [r3, #4]
 800ba98:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baa2:	2b40      	cmp	r3, #64	; 0x40
 800baa4:	d007      	beq.n	800bab6 <USBD_StdEPReq+0x30>
 800baa6:	2b40      	cmp	r3, #64	; 0x40
 800baa8:	f200 8145 	bhi.w	800bd36 <USBD_StdEPReq+0x2b0>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00c      	beq.n	800baca <USBD_StdEPReq+0x44>
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	f040 8140 	bne.w	800bd36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	4798      	blx	r3
 800bac4:	4603      	mov	r3, r0
 800bac6:	73fb      	strb	r3, [r7, #15]
      break;
 800bac8:	e13a      	b.n	800bd40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	785b      	ldrb	r3, [r3, #1]
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d007      	beq.n	800bae2 <USBD_StdEPReq+0x5c>
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	f300 8129 	bgt.w	800bd2a <USBD_StdEPReq+0x2a4>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d07f      	beq.n	800bbdc <USBD_StdEPReq+0x156>
 800badc:	2b01      	cmp	r3, #1
 800bade:	d03c      	beq.n	800bb5a <USBD_StdEPReq+0xd4>
 800bae0:	e123      	b.n	800bd2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b02      	cmp	r3, #2
 800baec:	d002      	beq.n	800baf4 <USBD_StdEPReq+0x6e>
 800baee:	2b03      	cmp	r3, #3
 800baf0:	d016      	beq.n	800bb20 <USBD_StdEPReq+0x9a>
 800baf2:	e02c      	b.n	800bb4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00d      	beq.n	800bb16 <USBD_StdEPReq+0x90>
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	2b80      	cmp	r3, #128	; 0x80
 800bafe:	d00a      	beq.n	800bb16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f001 f8f1 	bl	800ccec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb0a:	2180      	movs	r1, #128	; 0x80
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f8ed 	bl	800ccec <USBD_LL_StallEP>
 800bb12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb14:	e020      	b.n	800bb58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fc6f 	bl	800c3fc <USBD_CtlError>
              break;
 800bb1e:	e01b      	b.n	800bb58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	885b      	ldrh	r3, [r3, #2]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10e      	bne.n	800bb46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb28:	7bbb      	ldrb	r3, [r7, #14]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <USBD_StdEPReq+0xc0>
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	2b80      	cmp	r3, #128	; 0x80
 800bb32:	d008      	beq.n	800bb46 <USBD_StdEPReq+0xc0>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	88db      	ldrh	r3, [r3, #6]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d104      	bne.n	800bb46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 f8d3 	bl	800ccec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 fd23 	bl	800c592 <USBD_CtlSendStatus>

              break;
 800bb4c:	e004      	b.n	800bb58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fc53 	bl	800c3fc <USBD_CtlError>
              break;
 800bb56:	bf00      	nop
          }
          break;
 800bb58:	e0ec      	b.n	800bd34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d002      	beq.n	800bb6c <USBD_StdEPReq+0xe6>
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d016      	beq.n	800bb98 <USBD_StdEPReq+0x112>
 800bb6a:	e030      	b.n	800bbce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00d      	beq.n	800bb8e <USBD_StdEPReq+0x108>
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	2b80      	cmp	r3, #128	; 0x80
 800bb76:	d00a      	beq.n	800bb8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f001 f8b5 	bl	800ccec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb82:	2180      	movs	r1, #128	; 0x80
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 f8b1 	bl	800ccec <USBD_LL_StallEP>
 800bb8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb8c:	e025      	b.n	800bbda <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fc33 	bl	800c3fc <USBD_CtlError>
              break;
 800bb96:	e020      	b.n	800bbda <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d11b      	bne.n	800bbd8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d004      	beq.n	800bbb4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f001 f8bb 	bl	800cd2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fcec 	bl	800c592 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	4798      	blx	r3
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fc13 	bl	800c3fc <USBD_CtlError>
              break;
 800bbd6:	e000      	b.n	800bbda <USBD_StdEPReq+0x154>
              break;
 800bbd8:	bf00      	nop
          }
          break;
 800bbda:	e0ab      	b.n	800bd34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d002      	beq.n	800bbee <USBD_StdEPReq+0x168>
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d032      	beq.n	800bc52 <USBD_StdEPReq+0x1cc>
 800bbec:	e097      	b.n	800bd1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d007      	beq.n	800bc04 <USBD_StdEPReq+0x17e>
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	2b80      	cmp	r3, #128	; 0x80
 800bbf8:	d004      	beq.n	800bc04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bbfa:	6839      	ldr	r1, [r7, #0]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fbfd 	bl	800c3fc <USBD_CtlError>
                break;
 800bc02:	e091      	b.n	800bd28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	da0b      	bge.n	800bc24 <USBD_StdEPReq+0x19e>
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	4413      	add	r3, r2
 800bc20:	3304      	adds	r3, #4
 800bc22:	e00b      	b.n	800bc3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	4413      	add	r3, r2
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2202      	movs	r2, #2
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fc47 	bl	800c4de <USBD_CtlSendData>
              break;
 800bc50:	e06a      	b.n	800bd28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da11      	bge.n	800bc7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	f003 020f 	and.w	r2, r3, #15
 800bc60:	6879      	ldr	r1, [r7, #4]
 800bc62:	4613      	mov	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	440b      	add	r3, r1
 800bc6c:	3324      	adds	r3, #36	; 0x24
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d117      	bne.n	800bca4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fbc0 	bl	800c3fc <USBD_CtlError>
                  break;
 800bc7c:	e054      	b.n	800bd28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	f003 020f 	and.w	r2, r3, #15
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d104      	bne.n	800bca4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fbad 	bl	800c3fc <USBD_CtlError>
                  break;
 800bca2:	e041      	b.n	800bd28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da0b      	bge.n	800bcc4 <USBD_StdEPReq+0x23e>
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	3310      	adds	r3, #16
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	e00b      	b.n	800bcdc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcc4:	7bbb      	ldrb	r3, [r7, #14]
 800bcc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	4413      	add	r3, r2
 800bcda:	3304      	adds	r3, #4
 800bcdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <USBD_StdEPReq+0x264>
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2b80      	cmp	r3, #128	; 0x80
 800bce8:	d103      	bne.n	800bcf2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2200      	movs	r2, #0
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	e00e      	b.n	800bd10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcf2:	7bbb      	ldrb	r3, [r7, #14]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 f836 	bl	800cd68 <USBD_LL_IsStallEP>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2201      	movs	r2, #1
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	e002      	b.n	800bd10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2202      	movs	r2, #2
 800bd14:	4619      	mov	r1, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fbe1 	bl	800c4de <USBD_CtlSendData>
              break;
 800bd1c:	e004      	b.n	800bd28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fb6b 	bl	800c3fc <USBD_CtlError>
              break;
 800bd26:	bf00      	nop
          }
          break;
 800bd28:	e004      	b.n	800bd34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fb65 	bl	800c3fc <USBD_CtlError>
          break;
 800bd32:	bf00      	nop
      }
      break;
 800bd34:	e004      	b.n	800bd40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fb5f 	bl	800c3fc <USBD_CtlError>
      break;
 800bd3e:	bf00      	nop
  }

  return ret;
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	885b      	ldrh	r3, [r3, #2]
 800bd66:	0a1b      	lsrs	r3, r3, #8
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	2b0e      	cmp	r3, #14
 800bd6e:	f200 8152 	bhi.w	800c016 <USBD_GetDescriptor+0x2ca>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <USBD_GetDescriptor+0x2c>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bde9 	.word	0x0800bde9
 800bd7c:	0800be01 	.word	0x0800be01
 800bd80:	0800be41 	.word	0x0800be41
 800bd84:	0800c017 	.word	0x0800c017
 800bd88:	0800c017 	.word	0x0800c017
 800bd8c:	0800bfb7 	.word	0x0800bfb7
 800bd90:	0800bfe3 	.word	0x0800bfe3
 800bd94:	0800c017 	.word	0x0800c017
 800bd98:	0800c017 	.word	0x0800c017
 800bd9c:	0800c017 	.word	0x0800c017
 800bda0:	0800c017 	.word	0x0800c017
 800bda4:	0800c017 	.word	0x0800c017
 800bda8:	0800c017 	.word	0x0800c017
 800bdac:	0800c017 	.word	0x0800c017
 800bdb0:	0800bdb5 	.word	0x0800bdb5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	7c12      	ldrb	r2, [r2, #16]
 800bdcc:	f107 0108 	add.w	r1, r7, #8
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4798      	blx	r3
 800bdd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdd6:	e126      	b.n	800c026 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fb0e 	bl	800c3fc <USBD_CtlError>
        err++;
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	3301      	adds	r3, #1
 800bde4:	72fb      	strb	r3, [r7, #11]
      break;
 800bde6:	e11e      	b.n	800c026 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	7c12      	ldrb	r2, [r2, #16]
 800bdf4:	f107 0108 	add.w	r1, r7, #8
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	60f8      	str	r0, [r7, #12]
      break;
 800bdfe:	e112      	b.n	800c026 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	7c1b      	ldrb	r3, [r3, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10d      	bne.n	800be24 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be10:	f107 0208 	add.w	r2, r7, #8
 800be14:	4610      	mov	r0, r2
 800be16:	4798      	blx	r3
 800be18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3301      	adds	r3, #1
 800be1e:	2202      	movs	r2, #2
 800be20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be22:	e100      	b.n	800c026 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	f107 0208 	add.w	r2, r7, #8
 800be30:	4610      	mov	r0, r2
 800be32:	4798      	blx	r3
 800be34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	2202      	movs	r2, #2
 800be3c:	701a      	strb	r2, [r3, #0]
      break;
 800be3e:	e0f2      	b.n	800c026 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	885b      	ldrh	r3, [r3, #2]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b05      	cmp	r3, #5
 800be48:	f200 80ac 	bhi.w	800bfa4 <USBD_GetDescriptor+0x258>
 800be4c:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <USBD_GetDescriptor+0x108>)
 800be4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be52:	bf00      	nop
 800be54:	0800be6d 	.word	0x0800be6d
 800be58:	0800bea1 	.word	0x0800bea1
 800be5c:	0800bed5 	.word	0x0800bed5
 800be60:	0800bf09 	.word	0x0800bf09
 800be64:	0800bf3d 	.word	0x0800bf3d
 800be68:	0800bf71 	.word	0x0800bf71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00b      	beq.n	800be90 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	7c12      	ldrb	r2, [r2, #16]
 800be84:	f107 0108 	add.w	r1, r7, #8
 800be88:	4610      	mov	r0, r2
 800be8a:	4798      	blx	r3
 800be8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be8e:	e091      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fab2 	bl	800c3fc <USBD_CtlError>
            err++;
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	3301      	adds	r3, #1
 800be9c:	72fb      	strb	r3, [r7, #11]
          break;
 800be9e:	e089      	b.n	800bfb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00b      	beq.n	800bec4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	7c12      	ldrb	r2, [r2, #16]
 800beb8:	f107 0108 	add.w	r1, r7, #8
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
 800bec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec2:	e077      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa98 	bl	800c3fc <USBD_CtlError>
            err++;
 800becc:	7afb      	ldrb	r3, [r7, #11]
 800bece:	3301      	adds	r3, #1
 800bed0:	72fb      	strb	r3, [r7, #11]
          break;
 800bed2:	e06f      	b.n	800bfb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	7c12      	ldrb	r2, [r2, #16]
 800beec:	f107 0108 	add.w	r1, r7, #8
 800bef0:	4610      	mov	r0, r2
 800bef2:	4798      	blx	r3
 800bef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bef6:	e05d      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fa7e 	bl	800c3fc <USBD_CtlError>
            err++;
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	3301      	adds	r3, #1
 800bf04:	72fb      	strb	r3, [r7, #11]
          break;
 800bf06:	e055      	b.n	800bfb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00b      	beq.n	800bf2c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	7c12      	ldrb	r2, [r2, #16]
 800bf20:	f107 0108 	add.w	r1, r7, #8
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
 800bf28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2a:	e043      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fa64 	bl	800c3fc <USBD_CtlError>
            err++;
 800bf34:	7afb      	ldrb	r3, [r7, #11]
 800bf36:	3301      	adds	r3, #1
 800bf38:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3a:	e03b      	b.n	800bfb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00b      	beq.n	800bf60 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	7c12      	ldrb	r2, [r2, #16]
 800bf54:	f107 0108 	add.w	r1, r7, #8
 800bf58:	4610      	mov	r0, r2
 800bf5a:	4798      	blx	r3
 800bf5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf5e:	e029      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa4a 	bl	800c3fc <USBD_CtlError>
            err++;
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf6e:	e021      	b.n	800bfb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	7c12      	ldrb	r2, [r2, #16]
 800bf88:	f107 0108 	add.w	r1, r7, #8
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	4798      	blx	r3
 800bf90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf92:	e00f      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fa30 	bl	800c3fc <USBD_CtlError>
            err++;
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa2:	e007      	b.n	800bfb4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa28 	bl	800c3fc <USBD_CtlError>
          err++;
 800bfac:	7afb      	ldrb	r3, [r7, #11]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bfb2:	bf00      	nop
      }
      break;
 800bfb4:	e037      	b.n	800c026 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	7c1b      	ldrb	r3, [r3, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d109      	bne.n	800bfd2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfc6:	f107 0208 	add.w	r2, r7, #8
 800bfca:	4610      	mov	r0, r2
 800bfcc:	4798      	blx	r3
 800bfce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfd0:	e029      	b.n	800c026 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 fa11 	bl	800c3fc <USBD_CtlError>
        err++;
 800bfda:	7afb      	ldrb	r3, [r7, #11]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	72fb      	strb	r3, [r7, #11]
      break;
 800bfe0:	e021      	b.n	800c026 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	7c1b      	ldrb	r3, [r3, #16]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10d      	bne.n	800c006 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f107 0208 	add.w	r2, r7, #8
 800bff6:	4610      	mov	r0, r2
 800bff8:	4798      	blx	r3
 800bffa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3301      	adds	r3, #1
 800c000:	2207      	movs	r2, #7
 800c002:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c004:	e00f      	b.n	800c026 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f9f7 	bl	800c3fc <USBD_CtlError>
        err++;
 800c00e:	7afb      	ldrb	r3, [r7, #11]
 800c010:	3301      	adds	r3, #1
 800c012:	72fb      	strb	r3, [r7, #11]
      break;
 800c014:	e007      	b.n	800c026 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9ef 	bl	800c3fc <USBD_CtlError>
      err++;
 800c01e:	7afb      	ldrb	r3, [r7, #11]
 800c020:	3301      	adds	r3, #1
 800c022:	72fb      	strb	r3, [r7, #11]
      break;
 800c024:	bf00      	nop
  }

  if (err != 0U)
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d11e      	bne.n	800c06a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	88db      	ldrh	r3, [r3, #6]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d016      	beq.n	800c062 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c034:	893b      	ldrh	r3, [r7, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00e      	beq.n	800c058 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	88da      	ldrh	r2, [r3, #6]
 800c03e:	893b      	ldrh	r3, [r7, #8]
 800c040:	4293      	cmp	r3, r2
 800c042:	bf28      	it	cs
 800c044:	4613      	movcs	r3, r2
 800c046:	b29b      	uxth	r3, r3
 800c048:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c04a:	893b      	ldrh	r3, [r7, #8]
 800c04c:	461a      	mov	r2, r3
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fa44 	bl	800c4de <USBD_CtlSendData>
 800c056:	e009      	b.n	800c06c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f9ce 	bl	800c3fc <USBD_CtlError>
 800c060:	e004      	b.n	800c06c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa95 	bl	800c592 <USBD_CtlSendStatus>
 800c068:	e000      	b.n	800c06c <USBD_GetDescriptor+0x320>
    return;
 800c06a:	bf00      	nop
  }
}
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop

0800c074 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	889b      	ldrh	r3, [r3, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d131      	bne.n	800c0ea <USBD_SetAddress+0x76>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	88db      	ldrh	r3, [r3, #6]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d12d      	bne.n	800c0ea <USBD_SetAddress+0x76>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	885b      	ldrh	r3, [r3, #2]
 800c092:	2b7f      	cmp	r3, #127	; 0x7f
 800c094:	d829      	bhi.n	800c0ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	885b      	ldrh	r3, [r3, #2]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d104      	bne.n	800c0b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f9a3 	bl	800c3fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b6:	e01d      	b.n	800c0f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7bfa      	ldrb	r2, [r7, #15]
 800c0bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fe7b 	bl	800cdc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fa61 	bl	800c592 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d004      	beq.n	800c0e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0de:	e009      	b.n	800c0f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e8:	e004      	b.n	800c0f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f985 	bl	800c3fc <USBD_CtlError>
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	885b      	ldrh	r3, [r3, #2]
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	4b4c      	ldr	r3, [pc, #304]	; (800c244 <USBD_SetConfig+0x148>)
 800c112:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c114:	4b4b      	ldr	r3, [pc, #300]	; (800c244 <USBD_SetConfig+0x148>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d905      	bls.n	800c128 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f96c 	bl	800c3fc <USBD_CtlError>
    return USBD_FAIL;
 800c124:	2303      	movs	r3, #3
 800c126:	e088      	b.n	800c23a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b02      	cmp	r3, #2
 800c132:	d002      	beq.n	800c13a <USBD_SetConfig+0x3e>
 800c134:	2b03      	cmp	r3, #3
 800c136:	d025      	beq.n	800c184 <USBD_SetConfig+0x88>
 800c138:	e071      	b.n	800c21e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c13a:	4b42      	ldr	r3, [pc, #264]	; (800c244 <USBD_SetConfig+0x148>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d01c      	beq.n	800c17c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c142:	4b40      	ldr	r3, [pc, #256]	; (800c244 <USBD_SetConfig+0x148>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c14c:	4b3d      	ldr	r3, [pc, #244]	; (800c244 <USBD_SetConfig+0x148>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff f992 	bl	800b47c <USBD_SetClassConfig>
 800c158:	4603      	mov	r3, r0
 800c15a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c15c:	7bfb      	ldrb	r3, [r7, #15]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d004      	beq.n	800c16c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f949 	bl	800c3fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c16a:	e065      	b.n	800c238 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fa10 	bl	800c592 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2203      	movs	r2, #3
 800c176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c17a:	e05d      	b.n	800c238 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fa08 	bl	800c592 <USBD_CtlSendStatus>
      break;
 800c182:	e059      	b.n	800c238 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c184:	4b2f      	ldr	r3, [pc, #188]	; (800c244 <USBD_SetConfig+0x148>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d112      	bne.n	800c1b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2202      	movs	r2, #2
 800c190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c194:	4b2b      	ldr	r3, [pc, #172]	; (800c244 <USBD_SetConfig+0x148>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	461a      	mov	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c19e:	4b29      	ldr	r3, [pc, #164]	; (800c244 <USBD_SetConfig+0x148>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff f985 	bl	800b4b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f9f1 	bl	800c592 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1b0:	e042      	b.n	800c238 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c1b2:	4b24      	ldr	r3, [pc, #144]	; (800c244 <USBD_SetConfig+0x148>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d02a      	beq.n	800c216 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff f973 	bl	800b4b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1ce:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <USBD_SetConfig+0x148>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1d8:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <USBD_SetConfig+0x148>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff f94c 	bl	800b47c <USBD_SetClassConfig>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00f      	beq.n	800c20e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f903 	bl	800c3fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff f958 	bl	800b4b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c20c:	e014      	b.n	800c238 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f9bf 	bl	800c592 <USBD_CtlSendStatus>
      break;
 800c214:	e010      	b.n	800c238 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f9bb 	bl	800c592 <USBD_CtlSendStatus>
      break;
 800c21c:	e00c      	b.n	800c238 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f8eb 	bl	800c3fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c226:	4b07      	ldr	r3, [pc, #28]	; (800c244 <USBD_SetConfig+0x148>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff f941 	bl	800b4b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c232:	2303      	movs	r3, #3
 800c234:	73fb      	strb	r3, [r7, #15]
      break;
 800c236:	bf00      	nop
  }

  return ret;
 800c238:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20000720 	.word	0x20000720

0800c248 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	88db      	ldrh	r3, [r3, #6]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d004      	beq.n	800c264 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f8cd 	bl	800c3fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c262:	e023      	b.n	800c2ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	dc02      	bgt.n	800c276 <USBD_GetConfig+0x2e>
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc03      	bgt.n	800c27c <USBD_GetConfig+0x34>
 800c274:	e015      	b.n	800c2a2 <USBD_GetConfig+0x5a>
 800c276:	2b03      	cmp	r3, #3
 800c278:	d00b      	beq.n	800c292 <USBD_GetConfig+0x4a>
 800c27a:	e012      	b.n	800c2a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3308      	adds	r3, #8
 800c286:	2201      	movs	r2, #1
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f927 	bl	800c4de <USBD_CtlSendData>
        break;
 800c290:	e00c      	b.n	800c2ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3304      	adds	r3, #4
 800c296:	2201      	movs	r2, #1
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f91f 	bl	800c4de <USBD_CtlSendData>
        break;
 800c2a0:	e004      	b.n	800c2ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f8a9 	bl	800c3fc <USBD_CtlError>
        break;
 800c2aa:	bf00      	nop
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d81e      	bhi.n	800c30a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	88db      	ldrh	r3, [r3, #6]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d004      	beq.n	800c2de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f890 	bl	800c3fc <USBD_CtlError>
        break;
 800c2dc:	e01a      	b.n	800c314 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d005      	beq.n	800c2fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	f043 0202 	orr.w	r2, r3, #2
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	330c      	adds	r3, #12
 800c2fe:	2202      	movs	r2, #2
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f8eb 	bl	800c4de <USBD_CtlSendData>
      break;
 800c308:	e004      	b.n	800c314 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f875 	bl	800c3fc <USBD_CtlError>
      break;
 800c312:	bf00      	nop
  }
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	885b      	ldrh	r3, [r3, #2]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d106      	bne.n	800c33c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f92b 	bl	800c592 <USBD_CtlSendStatus>
  }
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c354:	b2db      	uxtb	r3, r3
 800c356:	3b01      	subs	r3, #1
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d80b      	bhi.n	800c374 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	885b      	ldrh	r3, [r3, #2]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d10c      	bne.n	800c37e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f910 	bl	800c592 <USBD_CtlSendStatus>
      }
      break;
 800c372:	e004      	b.n	800c37e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f840 	bl	800c3fc <USBD_CtlError>
      break;
 800c37c:	e000      	b.n	800c380 <USBD_ClrFeature+0x3c>
      break;
 800c37e:	bf00      	nop
  }
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	781a      	ldrb	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7ff fa92 	bl	800b8dc <SWAPBYTE>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f7ff fa85 	bl	800b8dc <SWAPBYTE>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f7ff fa78 	bl	800b8dc <SWAPBYTE>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	80da      	strh	r2, [r3, #6]
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c406:	2180      	movs	r1, #128	; 0x80
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fc6f 	bl	800ccec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c40e:	2100      	movs	r1, #0
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fc6b 	bl	800ccec <USBD_LL_StallEP>
}
 800c416:	bf00      	nop
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b086      	sub	sp, #24
 800c422:	af00      	add	r7, sp, #0
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d036      	beq.n	800c4a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c438:	6938      	ldr	r0, [r7, #16]
 800c43a:	f000 f836 	bl	800c4aa <USBD_GetLen>
 800c43e:	4603      	mov	r3, r0
 800c440:	3301      	adds	r3, #1
 800c442:	b29b      	uxth	r3, r3
 800c444:	005b      	lsls	r3, r3, #1
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	4413      	add	r3, r2
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	7812      	ldrb	r2, [r2, #0]
 800c456:	701a      	strb	r2, [r3, #0]
  idx++;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	3301      	adds	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	4413      	add	r3, r2
 800c464:	2203      	movs	r2, #3
 800c466:	701a      	strb	r2, [r3, #0]
  idx++;
 800c468:	7dfb      	ldrb	r3, [r7, #23]
 800c46a:	3301      	adds	r3, #1
 800c46c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c46e:	e013      	b.n	800c498 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4413      	add	r3, r2
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	7812      	ldrb	r2, [r2, #0]
 800c47a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	3301      	adds	r3, #1
 800c480:	613b      	str	r3, [r7, #16]
    idx++;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	3301      	adds	r3, #1
 800c486:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c488:	7dfb      	ldrb	r3, [r7, #23]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	4413      	add	r3, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
    idx++;
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	3301      	adds	r3, #1
 800c496:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e7      	bne.n	800c470 <USBD_GetString+0x52>
 800c4a0:	e000      	b.n	800c4a4 <USBD_GetString+0x86>
    return;
 800c4a2:	bf00      	nop
  }
}
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4ba:	e005      	b.n	800c4c8 <USBD_GetLen+0x1e>
  {
    len++;
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1f5      	bne.n	800c4bc <USBD_GetLen+0x12>
  }

  return len;
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b084      	sub	sp, #16
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	2100      	movs	r1, #0
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f000 fc7a 	bl	800cdfe <USBD_LL_Transmit>

  return USBD_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	2100      	movs	r1, #0
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 fc69 	bl	800cdfe <USBD_LL_Transmit>

  return USBD_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2203      	movs	r2, #3
 800c546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	2100      	movs	r1, #0
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f000 fc6d 	bl	800ce40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	2100      	movs	r1, #0
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 fc5c 	bl	800ce40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2204      	movs	r2, #4
 800c59e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fc28 	bl	800cdfe <USBD_LL_Transmit>

  return USBD_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2205      	movs	r2, #5
 800c5c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fc36 	bl	800ce40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4912      	ldr	r1, [pc, #72]	; (800c630 <MX_USB_Device_Init+0x50>)
 800c5e8:	4812      	ldr	r0, [pc, #72]	; (800c634 <MX_USB_Device_Init+0x54>)
 800c5ea:	f7fe fed9 	bl	800b3a0 <USBD_Init>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c5f4:	f7f4 ffec 	bl	80015d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c5f8:	490f      	ldr	r1, [pc, #60]	; (800c638 <MX_USB_Device_Init+0x58>)
 800c5fa:	480e      	ldr	r0, [pc, #56]	; (800c634 <MX_USB_Device_Init+0x54>)
 800c5fc:	f7fe ff00 	bl	800b400 <USBD_RegisterClass>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c606:	f7f4 ffe3 	bl	80015d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c60a:	490c      	ldr	r1, [pc, #48]	; (800c63c <MX_USB_Device_Init+0x5c>)
 800c60c:	4809      	ldr	r0, [pc, #36]	; (800c634 <MX_USB_Device_Init+0x54>)
 800c60e:	f7fe fe51 	bl	800b2b4 <USBD_CDC_RegisterInterface>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c618:	f7f4 ffda 	bl	80015d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c61c:	4805      	ldr	r0, [pc, #20]	; (800c634 <MX_USB_Device_Init+0x54>)
 800c61e:	f7fe ff16 	bl	800b44e <USBD_Start>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c628:	f7f4 ffd2 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c62c:	bf00      	nop
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	20000130 	.word	0x20000130
 800c634:	20000724 	.word	0x20000724
 800c638:	20000018 	.word	0x20000018
 800c63c:	2000011c 	.word	0x2000011c

0800c640 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c644:	2200      	movs	r2, #0
 800c646:	4905      	ldr	r1, [pc, #20]	; (800c65c <CDC_Init_FS+0x1c>)
 800c648:	4805      	ldr	r0, [pc, #20]	; (800c660 <CDC_Init_FS+0x20>)
 800c64a:	f7fe fe48 	bl	800b2de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c64e:	4905      	ldr	r1, [pc, #20]	; (800c664 <CDC_Init_FS+0x24>)
 800c650:	4803      	ldr	r0, [pc, #12]	; (800c660 <CDC_Init_FS+0x20>)
 800c652:	f7fe fe62 	bl	800b31a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c656:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c658:	4618      	mov	r0, r3
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20000df4 	.word	0x20000df4
 800c660:	20000724 	.word	0x20000724
 800c664:	200009f4 	.word	0x200009f4

0800c668 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c668:	b480      	push	{r7}
 800c66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c66c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c66e:	4618      	mov	r0, r3
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	6039      	str	r1, [r7, #0]
 800c682:	71fb      	strb	r3, [r7, #7]
 800c684:	4613      	mov	r3, r2
 800c686:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	2b23      	cmp	r3, #35	; 0x23
 800c68c:	d84a      	bhi.n	800c724 <CDC_Control_FS+0xac>
 800c68e:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <CDC_Control_FS+0x1c>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c725 	.word	0x0800c725
 800c698:	0800c725 	.word	0x0800c725
 800c69c:	0800c725 	.word	0x0800c725
 800c6a0:	0800c725 	.word	0x0800c725
 800c6a4:	0800c725 	.word	0x0800c725
 800c6a8:	0800c725 	.word	0x0800c725
 800c6ac:	0800c725 	.word	0x0800c725
 800c6b0:	0800c725 	.word	0x0800c725
 800c6b4:	0800c725 	.word	0x0800c725
 800c6b8:	0800c725 	.word	0x0800c725
 800c6bc:	0800c725 	.word	0x0800c725
 800c6c0:	0800c725 	.word	0x0800c725
 800c6c4:	0800c725 	.word	0x0800c725
 800c6c8:	0800c725 	.word	0x0800c725
 800c6cc:	0800c725 	.word	0x0800c725
 800c6d0:	0800c725 	.word	0x0800c725
 800c6d4:	0800c725 	.word	0x0800c725
 800c6d8:	0800c725 	.word	0x0800c725
 800c6dc:	0800c725 	.word	0x0800c725
 800c6e0:	0800c725 	.word	0x0800c725
 800c6e4:	0800c725 	.word	0x0800c725
 800c6e8:	0800c725 	.word	0x0800c725
 800c6ec:	0800c725 	.word	0x0800c725
 800c6f0:	0800c725 	.word	0x0800c725
 800c6f4:	0800c725 	.word	0x0800c725
 800c6f8:	0800c725 	.word	0x0800c725
 800c6fc:	0800c725 	.word	0x0800c725
 800c700:	0800c725 	.word	0x0800c725
 800c704:	0800c725 	.word	0x0800c725
 800c708:	0800c725 	.word	0x0800c725
 800c70c:	0800c725 	.word	0x0800c725
 800c710:	0800c725 	.word	0x0800c725
 800c714:	0800c725 	.word	0x0800c725
 800c718:	0800c725 	.word	0x0800c725
 800c71c:	0800c725 	.word	0x0800c725
 800c720:	0800c725 	.word	0x0800c725
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c724:	bf00      	nop
  }

  return (USBD_OK);
 800c726:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	4805      	ldr	r0, [pc, #20]	; (800c758 <CDC_Receive_FS+0x24>)
 800c742:	f7fe fdea 	bl	800b31a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c746:	4804      	ldr	r0, [pc, #16]	; (800c758 <CDC_Receive_FS+0x24>)
 800c748:	f7fe fe00 	bl	800b34c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c74c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20000724 	.word	0x20000724

0800c75c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	4613      	mov	r3, r2
 800c768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c772:	4618      	mov	r0, r3
 800c774:	371c      	adds	r7, #28
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
	...

0800c780 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	6039      	str	r1, [r7, #0]
 800c78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2212      	movs	r2, #18
 800c790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c792:	4b03      	ldr	r3, [pc, #12]	; (800c7a0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c794:	4618      	mov	r0, r3
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	20000150 	.word	0x20000150

0800c7a4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	6039      	str	r1, [r7, #0]
 800c7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2204      	movs	r2, #4
 800c7b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c7b6:	4b03      	ldr	r3, [pc, #12]	; (800c7c4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	20000164 	.word	0x20000164

0800c7c8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	6039      	str	r1, [r7, #0]
 800c7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	4907      	ldr	r1, [pc, #28]	; (800c7fc <USBD_CDC_ProductStrDescriptor+0x34>)
 800c7de:	4808      	ldr	r0, [pc, #32]	; (800c800 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c7e0:	f7ff fe1d 	bl	800c41e <USBD_GetString>
 800c7e4:	e004      	b.n	800c7f0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	4904      	ldr	r1, [pc, #16]	; (800c7fc <USBD_CDC_ProductStrDescriptor+0x34>)
 800c7ea:	4805      	ldr	r0, [pc, #20]	; (800c800 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c7ec:	f7ff fe17 	bl	800c41e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7f0:	4b02      	ldr	r3, [pc, #8]	; (800c7fc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	200011f4 	.word	0x200011f4
 800c800:	0800d0e8 	.word	0x0800d0e8

0800c804 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	6039      	str	r1, [r7, #0]
 800c80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	4904      	ldr	r1, [pc, #16]	; (800c824 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c814:	4804      	ldr	r0, [pc, #16]	; (800c828 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c816:	f7ff fe02 	bl	800c41e <USBD_GetString>
  return USBD_StrDesc;
 800c81a:	4b02      	ldr	r3, [pc, #8]	; (800c824 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	200011f4 	.word	0x200011f4
 800c828:	0800d100 	.word	0x0800d100

0800c82c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	4603      	mov	r3, r0
 800c834:	6039      	str	r1, [r7, #0]
 800c836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	221a      	movs	r2, #26
 800c83c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c83e:	f000 f843 	bl	800c8c8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c842:	4b02      	ldr	r3, [pc, #8]	; (800c84c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20000168 	.word	0x20000168

0800c850 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	6039      	str	r1, [r7, #0]
 800c85a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d105      	bne.n	800c86e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	4907      	ldr	r1, [pc, #28]	; (800c884 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c866:	4808      	ldr	r0, [pc, #32]	; (800c888 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c868:	f7ff fdd9 	bl	800c41e <USBD_GetString>
 800c86c:	e004      	b.n	800c878 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	4904      	ldr	r1, [pc, #16]	; (800c884 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c872:	4805      	ldr	r0, [pc, #20]	; (800c888 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c874:	f7ff fdd3 	bl	800c41e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c878:	4b02      	ldr	r3, [pc, #8]	; (800c884 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	200011f4 	.word	0x200011f4
 800c888:	0800d114 	.word	0x0800d114

0800c88c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	6039      	str	r1, [r7, #0]
 800c896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c898:	79fb      	ldrb	r3, [r7, #7]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d105      	bne.n	800c8aa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	4907      	ldr	r1, [pc, #28]	; (800c8c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c8a2:	4808      	ldr	r0, [pc, #32]	; (800c8c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c8a4:	f7ff fdbb 	bl	800c41e <USBD_GetString>
 800c8a8:	e004      	b.n	800c8b4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	4904      	ldr	r1, [pc, #16]	; (800c8c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c8ae:	4805      	ldr	r0, [pc, #20]	; (800c8c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c8b0:	f7ff fdb5 	bl	800c41e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8b4:	4b02      	ldr	r3, [pc, #8]	; (800c8c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200011f4 	.word	0x200011f4
 800c8c4:	0800d120 	.word	0x0800d120

0800c8c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c8ce:	4b0f      	ldr	r3, [pc, #60]	; (800c90c <Get_SerialNum+0x44>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c8d4:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <Get_SerialNum+0x48>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c8da:	4b0e      	ldr	r3, [pc, #56]	; (800c914 <Get_SerialNum+0x4c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c8ee:	2208      	movs	r2, #8
 800c8f0:	4909      	ldr	r1, [pc, #36]	; (800c918 <Get_SerialNum+0x50>)
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f000 f814 	bl	800c920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8f8:	2204      	movs	r2, #4
 800c8fa:	4908      	ldr	r1, [pc, #32]	; (800c91c <Get_SerialNum+0x54>)
 800c8fc:	68b8      	ldr	r0, [r7, #8]
 800c8fe:	f000 f80f 	bl	800c920 <IntToUnicode>
  }
}
 800c902:	bf00      	nop
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	1fff7590 	.word	0x1fff7590
 800c910:	1fff7594 	.word	0x1fff7594
 800c914:	1fff7598 	.word	0x1fff7598
 800c918:	2000016a 	.word	0x2000016a
 800c91c:	2000017a 	.word	0x2000017a

0800c920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c920:	b480      	push	{r7}
 800c922:	b087      	sub	sp, #28
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	4613      	mov	r3, r2
 800c92c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c932:	2300      	movs	r3, #0
 800c934:	75fb      	strb	r3, [r7, #23]
 800c936:	e027      	b.n	800c988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	0f1b      	lsrs	r3, r3, #28
 800c93c:	2b09      	cmp	r3, #9
 800c93e:	d80b      	bhi.n	800c958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	0f1b      	lsrs	r3, r3, #28
 800c944:	b2da      	uxtb	r2, r3
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	005b      	lsls	r3, r3, #1
 800c94a:	4619      	mov	r1, r3
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	440b      	add	r3, r1
 800c950:	3230      	adds	r2, #48	; 0x30
 800c952:	b2d2      	uxtb	r2, r2
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	e00a      	b.n	800c96e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	0f1b      	lsrs	r3, r3, #28
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	4619      	mov	r1, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	440b      	add	r3, r1
 800c968:	3237      	adds	r2, #55	; 0x37
 800c96a:	b2d2      	uxtb	r2, r2
 800c96c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	011b      	lsls	r3, r3, #4
 800c972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	3301      	adds	r3, #1
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	4413      	add	r3, r2
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c982:	7dfb      	ldrb	r3, [r7, #23]
 800c984:	3301      	adds	r3, #1
 800c986:	75fb      	strb	r3, [r7, #23]
 800c988:	7dfa      	ldrb	r2, [r7, #23]
 800c98a:	79fb      	ldrb	r3, [r7, #7]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d3d3      	bcc.n	800c938 <IntToUnicode+0x18>
  }
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	371c      	adds	r7, #28
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
	...

0800c9a0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b094      	sub	sp, #80	; 0x50
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c9a8:	f107 030c 	add.w	r3, r7, #12
 800c9ac:	2244      	movs	r2, #68	; 0x44
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fb13 	bl	800cfdc <memset>
  if(pcdHandle->Instance==USB)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a15      	ldr	r2, [pc, #84]	; (800ca10 <HAL_PCD_MspInit+0x70>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d122      	bne.n	800ca06 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c9c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c9ca:	f107 030c 	add.w	r3, r7, #12
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7f9 f936 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c9da:	f7f4 fdf9 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c9de:	4b0d      	ldr	r3, [pc, #52]	; (800ca14 <HAL_PCD_MspInit+0x74>)
 800c9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e2:	4a0c      	ldr	r2, [pc, #48]	; (800ca14 <HAL_PCD_MspInit+0x74>)
 800c9e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c9e8:	6593      	str	r3, [r2, #88]	; 0x58
 800c9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <HAL_PCD_MspInit+0x74>)
 800c9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9f2:	60bb      	str	r3, [r7, #8]
 800c9f4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	2014      	movs	r0, #20
 800c9fc:	f7f6 fc09 	bl	8003212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ca00:	2014      	movs	r0, #20
 800ca02:	f7f6 fc20 	bl	8003246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca06:	bf00      	nop
 800ca08:	3750      	adds	r7, #80	; 0x50
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	40005c00 	.word	0x40005c00
 800ca14:	40021000 	.word	0x40021000

0800ca18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	4610      	mov	r0, r2
 800ca30:	f7fe fd58 	bl	800b4e4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ca4e:	78fa      	ldrb	r2, [r7, #3]
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	4613      	mov	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	440b      	add	r3, r1
 800ca5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	4619      	mov	r1, r3
 800ca66:	f7fe fd92 	bl	800b58e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ca84:	78fa      	ldrb	r2, [r7, #3]
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	440b      	add	r3, r1
 800ca92:	3324      	adds	r3, #36	; 0x24
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	f7fe fddb 	bl	800b654 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ca9e:	bf00      	nop
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fe feef 	bl	800b898 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800caba:	bf00      	nop
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800caca:	2301      	movs	r3, #1
 800cacc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	795b      	ldrb	r3, [r3, #5]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d001      	beq.n	800cada <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cad6:	f7f4 fd7b 	bl	80015d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cae0:	7bfa      	ldrb	r2, [r7, #15]
 800cae2:	4611      	mov	r1, r2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe fe99 	bl	800b81c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fe fe45 	bl	800b780 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800caf6:	bf00      	nop
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe fe94 	bl	800b83c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7a5b      	ldrb	r3, [r3, #9]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d005      	beq.n	800cb28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb1c:	4b04      	ldr	r3, [pc, #16]	; (800cb30 <HAL_PCD_SuspendCallback+0x30>)
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	4a03      	ldr	r2, [pc, #12]	; (800cb30 <HAL_PCD_SuspendCallback+0x30>)
 800cb22:	f043 0306 	orr.w	r3, r3, #6
 800cb26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cb28:	bf00      	nop
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	e000ed00 	.word	0xe000ed00

0800cb34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	7a5b      	ldrb	r3, [r3, #9]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d007      	beq.n	800cb54 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb44:	4b08      	ldr	r3, [pc, #32]	; (800cb68 <HAL_PCD_ResumeCallback+0x34>)
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	4a07      	ldr	r2, [pc, #28]	; (800cb68 <HAL_PCD_ResumeCallback+0x34>)
 800cb4a:	f023 0306 	bic.w	r3, r3, #6
 800cb4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cb50:	f000 f9f8 	bl	800cf44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fe84 	bl	800b868 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	e000ed00 	.word	0xe000ed00

0800cb6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cb74:	4a2b      	ldr	r2, [pc, #172]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a29      	ldr	r2, [pc, #164]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cb84:	4b27      	ldr	r3, [pc, #156]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb86:	4a28      	ldr	r2, [pc, #160]	; (800cc28 <USBD_LL_Init+0xbc>)
 800cb88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb8a:	4b26      	ldr	r3, [pc, #152]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb8c:	2208      	movs	r2, #8
 800cb8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb90:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb92:	2202      	movs	r2, #2
 800cb94:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb96:	4b23      	ldr	r3, [pc, #140]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb98:	2202      	movs	r2, #2
 800cb9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cb9c:	4b21      	ldr	r3, [pc, #132]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cba2:	4b20      	ldr	r3, [pc, #128]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cba8:	4b1e      	ldr	r3, [pc, #120]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cbae:	4b1d      	ldr	r3, [pc, #116]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cbb4:	481b      	ldr	r0, [pc, #108]	; (800cc24 <USBD_LL_Init+0xb8>)
 800cbb6:	f7f6 fd2d 	bl	8003614 <HAL_PCD_Init>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cbc0:	f7f4 fd06 	bl	80015d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbca:	2318      	movs	r3, #24
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2100      	movs	r1, #0
 800cbd0:	f7f8 f9e7 	bl	8004fa2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbda:	2358      	movs	r3, #88	; 0x58
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2180      	movs	r1, #128	; 0x80
 800cbe0:	f7f8 f9df 	bl	8004fa2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbea:	23c0      	movs	r3, #192	; 0xc0
 800cbec:	2200      	movs	r2, #0
 800cbee:	2181      	movs	r1, #129	; 0x81
 800cbf0:	f7f8 f9d7 	bl	8004fa2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2101      	movs	r1, #1
 800cc02:	f7f8 f9ce 	bl	8004fa2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc10:	2200      	movs	r2, #0
 800cc12:	2182      	movs	r1, #130	; 0x82
 800cc14:	f7f8 f9c5 	bl	8004fa2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200013f4 	.word	0x200013f4
 800cc28:	40005c00 	.word	0x40005c00

0800cc2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f6 fdb4 	bl	80037b0 <HAL_PCD_Start>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 f980 	bl	800cf54 <USBD_Get_USB_Status>
 800cc54:	4603      	mov	r3, r0
 800cc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	461a      	mov	r2, r3
 800cc70:	4603      	mov	r3, r0
 800cc72:	70fb      	strb	r3, [r7, #3]
 800cc74:	460b      	mov	r3, r1
 800cc76:	70bb      	strb	r3, [r7, #2]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc8a:	78bb      	ldrb	r3, [r7, #2]
 800cc8c:	883a      	ldrh	r2, [r7, #0]
 800cc8e:	78f9      	ldrb	r1, [r7, #3]
 800cc90:	f7f6 fefb 	bl	8003a8a <HAL_PCD_EP_Open>
 800cc94:	4603      	mov	r3, r0
 800cc96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f95a 	bl	800cf54 <USBD_Get_USB_Status>
 800cca0:	4603      	mov	r3, r0
 800cca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccc8:	78fa      	ldrb	r2, [r7, #3]
 800ccca:	4611      	mov	r1, r2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7f6 ff39 	bl	8003b44 <HAL_PCD_EP_Close>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 f93b 	bl	800cf54 <USBD_Get_USB_Status>
 800ccde:	4603      	mov	r3, r0
 800cce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd06:	78fa      	ldrb	r2, [r7, #3]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f6 ffe2 	bl	8003cd4 <HAL_PCD_EP_SetStall>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 f91c 	bl	800cf54 <USBD_Get_USB_Status>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd44:	78fa      	ldrb	r2, [r7, #3]
 800cd46:	4611      	mov	r1, r2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7f7 f815 	bl	8003d78 <HAL_PCD_EP_ClrStall>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 f8fd 	bl	800cf54 <USBD_Get_USB_Status>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	da0b      	bge.n	800cd9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	3312      	adds	r3, #18
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	e00b      	b.n	800cdb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	440b      	add	r3, r1
 800cdae:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800cdb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdda:	78fa      	ldrb	r2, [r7, #3]
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f6 fe2f 	bl	8003a42 <HAL_PCD_SetAddress>
 800cde4:	4603      	mov	r3, r0
 800cde6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 f8b2 	bl	800cf54 <USBD_Get_USB_Status>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b086      	sub	sp, #24
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	60f8      	str	r0, [r7, #12]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce1c:	7af9      	ldrb	r1, [r7, #11]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	f7f6 ff20 	bl	8003c66 <HAL_PCD_EP_Transmit>
 800ce26:	4603      	mov	r3, r0
 800ce28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 f891 	bl	800cf54 <USBD_Get_USB_Status>
 800ce32:	4603      	mov	r3, r0
 800ce34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce36:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3718      	adds	r7, #24
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	607a      	str	r2, [r7, #4]
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce5e:	7af9      	ldrb	r1, [r7, #11]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	f7f6 feb6 	bl	8003bd4 <HAL_PCD_EP_Receive>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 f870 	bl	800cf54 <USBD_Get_USB_Status>
 800ce74:	4603      	mov	r3, r0
 800ce76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce94:	78fa      	ldrb	r2, [r7, #3]
 800ce96:	4611      	mov	r1, r2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7f6 fecc 	bl	8003c36 <HAL_PCD_EP_GetRxCount>
 800ce9e:	4603      	mov	r3, r0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <HAL_PCDEx_LPM_Callback+0x18>
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d013      	beq.n	800cee6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cebe:	e023      	b.n	800cf08 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7a5b      	ldrb	r3, [r3, #9]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d007      	beq.n	800ced8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cec8:	f000 f83c 	bl	800cf44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cecc:	4b10      	ldr	r3, [pc, #64]	; (800cf10 <HAL_PCDEx_LPM_Callback+0x68>)
 800cece:	691b      	ldr	r3, [r3, #16]
 800ced0:	4a0f      	ldr	r2, [pc, #60]	; (800cf10 <HAL_PCDEx_LPM_Callback+0x68>)
 800ced2:	f023 0306 	bic.w	r3, r3, #6
 800ced6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fcc2 	bl	800b868 <USBD_LL_Resume>
    break;
 800cee4:	e010      	b.n	800cf08 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fca5 	bl	800b83c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	7a5b      	ldrb	r3, [r3, #9]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cefa:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <HAL_PCDEx_LPM_Callback+0x68>)
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	4a04      	ldr	r2, [pc, #16]	; (800cf10 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf00:	f043 0306 	orr.w	r3, r3, #6
 800cf04:	6113      	str	r3, [r2, #16]
    break;
 800cf06:	bf00      	nop
}
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	e000ed00 	.word	0xe000ed00

0800cf14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf1c:	4b03      	ldr	r3, [pc, #12]	; (800cf2c <USBD_static_malloc+0x18>)
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	200016d0 	.word	0x200016d0

0800cf30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]

}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf44:	b480      	push	{r7}
 800cf46:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 800cf48:	bf00      	nop
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
	...

0800cf54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d817      	bhi.n	800cf98 <USBD_Get_USB_Status+0x44>
 800cf68:	a201      	add	r2, pc, #4	; (adr r2, 800cf70 <USBD_Get_USB_Status+0x1c>)
 800cf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6e:	bf00      	nop
 800cf70:	0800cf81 	.word	0x0800cf81
 800cf74:	0800cf87 	.word	0x0800cf87
 800cf78:	0800cf8d 	.word	0x0800cf8d
 800cf7c:	0800cf93 	.word	0x0800cf93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
    break;
 800cf84:	e00b      	b.n	800cf9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf86:	2303      	movs	r3, #3
 800cf88:	73fb      	strb	r3, [r7, #15]
    break;
 800cf8a:	e008      	b.n	800cf9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf90:	e005      	b.n	800cf9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf92:	2303      	movs	r3, #3
 800cf94:	73fb      	strb	r3, [r7, #15]
    break;
 800cf96:	e002      	b.n	800cf9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf9c:	bf00      	nop
  }
  return usb_status;
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <_ZdlPvj>:
 800cfac:	f000 b800 	b.w	800cfb0 <_ZdlPv>

0800cfb0 <_ZdlPv>:
 800cfb0:	f000 b800 	b.w	800cfb4 <free>

0800cfb4 <free>:
 800cfb4:	4b02      	ldr	r3, [pc, #8]	; (800cfc0 <free+0xc>)
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	f000 b83d 	b.w	800d038 <_free_r>
 800cfbe:	bf00      	nop
 800cfc0:	200001d0 	.word	0x200001d0

0800cfc4 <__malloc_lock>:
 800cfc4:	4801      	ldr	r0, [pc, #4]	; (800cfcc <__malloc_lock+0x8>)
 800cfc6:	f000 b835 	b.w	800d034 <__retarget_lock_acquire_recursive>
 800cfca:	bf00      	nop
 800cfcc:	20001a2c 	.word	0x20001a2c

0800cfd0 <__malloc_unlock>:
 800cfd0:	4801      	ldr	r0, [pc, #4]	; (800cfd8 <__malloc_unlock+0x8>)
 800cfd2:	f000 b830 	b.w	800d036 <__retarget_lock_release_recursive>
 800cfd6:	bf00      	nop
 800cfd8:	20001a2c 	.word	0x20001a2c

0800cfdc <memset>:
 800cfdc:	4402      	add	r2, r0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d100      	bne.n	800cfe6 <memset+0xa>
 800cfe4:	4770      	bx	lr
 800cfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfea:	e7f9      	b.n	800cfe0 <memset+0x4>

0800cfec <__libc_init_array>:
 800cfec:	b570      	push	{r4, r5, r6, lr}
 800cfee:	4d0d      	ldr	r5, [pc, #52]	; (800d024 <__libc_init_array+0x38>)
 800cff0:	4c0d      	ldr	r4, [pc, #52]	; (800d028 <__libc_init_array+0x3c>)
 800cff2:	1b64      	subs	r4, r4, r5
 800cff4:	10a4      	asrs	r4, r4, #2
 800cff6:	2600      	movs	r6, #0
 800cff8:	42a6      	cmp	r6, r4
 800cffa:	d109      	bne.n	800d010 <__libc_init_array+0x24>
 800cffc:	4d0b      	ldr	r5, [pc, #44]	; (800d02c <__libc_init_array+0x40>)
 800cffe:	4c0c      	ldr	r4, [pc, #48]	; (800d030 <__libc_init_array+0x44>)
 800d000:	f000 f866 	bl	800d0d0 <_init>
 800d004:	1b64      	subs	r4, r4, r5
 800d006:	10a4      	asrs	r4, r4, #2
 800d008:	2600      	movs	r6, #0
 800d00a:	42a6      	cmp	r6, r4
 800d00c:	d105      	bne.n	800d01a <__libc_init_array+0x2e>
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	f855 3b04 	ldr.w	r3, [r5], #4
 800d014:	4798      	blx	r3
 800d016:	3601      	adds	r6, #1
 800d018:	e7ee      	b.n	800cff8 <__libc_init_array+0xc>
 800d01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d01e:	4798      	blx	r3
 800d020:	3601      	adds	r6, #1
 800d022:	e7f2      	b.n	800d00a <__libc_init_array+0x1e>
 800d024:	0800d1b8 	.word	0x0800d1b8
 800d028:	0800d1b8 	.word	0x0800d1b8
 800d02c:	0800d1b8 	.word	0x0800d1b8
 800d030:	0800d1c0 	.word	0x0800d1c0

0800d034 <__retarget_lock_acquire_recursive>:
 800d034:	4770      	bx	lr

0800d036 <__retarget_lock_release_recursive>:
 800d036:	4770      	bx	lr

0800d038 <_free_r>:
 800d038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d03a:	2900      	cmp	r1, #0
 800d03c:	d044      	beq.n	800d0c8 <_free_r+0x90>
 800d03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d042:	9001      	str	r0, [sp, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	f1a1 0404 	sub.w	r4, r1, #4
 800d04a:	bfb8      	it	lt
 800d04c:	18e4      	addlt	r4, r4, r3
 800d04e:	f7ff ffb9 	bl	800cfc4 <__malloc_lock>
 800d052:	4a1e      	ldr	r2, [pc, #120]	; (800d0cc <_free_r+0x94>)
 800d054:	9801      	ldr	r0, [sp, #4]
 800d056:	6813      	ldr	r3, [r2, #0]
 800d058:	b933      	cbnz	r3, 800d068 <_free_r+0x30>
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	6014      	str	r4, [r2, #0]
 800d05e:	b003      	add	sp, #12
 800d060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d064:	f7ff bfb4 	b.w	800cfd0 <__malloc_unlock>
 800d068:	42a3      	cmp	r3, r4
 800d06a:	d908      	bls.n	800d07e <_free_r+0x46>
 800d06c:	6825      	ldr	r5, [r4, #0]
 800d06e:	1961      	adds	r1, r4, r5
 800d070:	428b      	cmp	r3, r1
 800d072:	bf01      	itttt	eq
 800d074:	6819      	ldreq	r1, [r3, #0]
 800d076:	685b      	ldreq	r3, [r3, #4]
 800d078:	1949      	addeq	r1, r1, r5
 800d07a:	6021      	streq	r1, [r4, #0]
 800d07c:	e7ed      	b.n	800d05a <_free_r+0x22>
 800d07e:	461a      	mov	r2, r3
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	b10b      	cbz	r3, 800d088 <_free_r+0x50>
 800d084:	42a3      	cmp	r3, r4
 800d086:	d9fa      	bls.n	800d07e <_free_r+0x46>
 800d088:	6811      	ldr	r1, [r2, #0]
 800d08a:	1855      	adds	r5, r2, r1
 800d08c:	42a5      	cmp	r5, r4
 800d08e:	d10b      	bne.n	800d0a8 <_free_r+0x70>
 800d090:	6824      	ldr	r4, [r4, #0]
 800d092:	4421      	add	r1, r4
 800d094:	1854      	adds	r4, r2, r1
 800d096:	42a3      	cmp	r3, r4
 800d098:	6011      	str	r1, [r2, #0]
 800d09a:	d1e0      	bne.n	800d05e <_free_r+0x26>
 800d09c:	681c      	ldr	r4, [r3, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	6053      	str	r3, [r2, #4]
 800d0a2:	440c      	add	r4, r1
 800d0a4:	6014      	str	r4, [r2, #0]
 800d0a6:	e7da      	b.n	800d05e <_free_r+0x26>
 800d0a8:	d902      	bls.n	800d0b0 <_free_r+0x78>
 800d0aa:	230c      	movs	r3, #12
 800d0ac:	6003      	str	r3, [r0, #0]
 800d0ae:	e7d6      	b.n	800d05e <_free_r+0x26>
 800d0b0:	6825      	ldr	r5, [r4, #0]
 800d0b2:	1961      	adds	r1, r4, r5
 800d0b4:	428b      	cmp	r3, r1
 800d0b6:	bf04      	itt	eq
 800d0b8:	6819      	ldreq	r1, [r3, #0]
 800d0ba:	685b      	ldreq	r3, [r3, #4]
 800d0bc:	6063      	str	r3, [r4, #4]
 800d0be:	bf04      	itt	eq
 800d0c0:	1949      	addeq	r1, r1, r5
 800d0c2:	6021      	streq	r1, [r4, #0]
 800d0c4:	6054      	str	r4, [r2, #4]
 800d0c6:	e7ca      	b.n	800d05e <_free_r+0x26>
 800d0c8:	b003      	add	sp, #12
 800d0ca:	bd30      	pop	{r4, r5, pc}
 800d0cc:	200018f0 	.word	0x200018f0

0800d0d0 <_init>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	bf00      	nop
 800d0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d6:	bc08      	pop	{r3}
 800d0d8:	469e      	mov	lr, r3
 800d0da:	4770      	bx	lr

0800d0dc <_fini>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	bf00      	nop
 800d0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0e2:	bc08      	pop	{r3}
 800d0e4:	469e      	mov	lr, r3
 800d0e6:	4770      	bx	lr
