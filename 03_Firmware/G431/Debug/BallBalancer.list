
BallBalancer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d80c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d9e4  0800d9e4  0001d9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daac  0800daac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dab4  0800dab4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800dabc  0800dabc  0001dabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800dac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a0  200001d4  0800dc98  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  0800dc98  00021a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c948  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c13  00000000  00000000  0004cb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed0  00000000  00000000  000537a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001769  00000000  00000000  00055678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002987d  00000000  00000000  00056de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029d40  00000000  00000000  0008065e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e87ee  00000000  00000000  000aa39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008548  00000000  00000000  00192b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0019b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d9cc 	.word	0x0800d9cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800d9cc 	.word	0x0800d9cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_ZN15ApplicationMainC1Ev>:

#include "ApplicationMain.h"
#include "main.h"


ApplicationMain::ApplicationMain()
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4618      	mov	r0, r3
 8000520:	f001 f804 	bl	800152c <_ZN11TaskhandlerC1Ev>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3310      	adds	r3, #16
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fe29 	bl	8001180 <_ZN5ErrorC1Ev>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3314      	adds	r3, #20
 8000532:	4962      	ldr	r1, [pc, #392]	; (80006bc <_ZN15ApplicationMainC1Ev+0x1a8>)
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fd85 	bl	8001044 <_ZN7AMT102VC1EP17TIM_HandleTypeDef>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	332c      	adds	r3, #44	; 0x2c
 800053e:	4960      	ldr	r1, [pc, #384]	; (80006c0 <_ZN15ApplicationMainC1Ev+0x1ac>)
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fd7f 	bl	8001044 <_ZN7AMT102VC1EP17TIM_HandleTypeDef>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3344      	adds	r3, #68	; 0x44
 800054a:	2210      	movs	r2, #16
 800054c:	495d      	ldr	r1, [pc, #372]	; (80006c4 <_ZN15ApplicationMainC1Ev+0x1b0>)
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fe56 	bl	8001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	336c      	adds	r3, #108	; 0x6c
 8000558:	2240      	movs	r2, #64	; 0x40
 800055a:	495a      	ldr	r1, [pc, #360]	; (80006c4 <_ZN15ApplicationMainC1Ev+0x1b0>)
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe4f 	bl	8001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8000568:	2300      	movs	r3, #0
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <_ZN15ApplicationMainC1Ev+0x1b4>)
 800056e:	2220      	movs	r2, #32
 8000570:	4954      	ldr	r1, [pc, #336]	; (80006c4 <_ZN15ApplicationMainC1Ev+0x1b0>)
 8000572:	f000 fe2b 	bl	80011cc <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	33bc      	adds	r3, #188	; 0xbc
 800057a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fe3c 	bl	8001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 800058e:	230c      	movs	r3, #12
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <_ZN15ApplicationMainC1Ev+0x1b8>)
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	494b      	ldr	r1, [pc, #300]	; (80006c4 <_ZN15ApplicationMainC1Ev+0x1b0>)
 8000598:	f000 fe18 	bl	80011cc <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80005a2:	2208      	movs	r2, #8
 80005a4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fe29 	bl	8001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80005b4:	2220      	movs	r2, #32
 80005b6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fe20 	bl	8001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f503 70ae 	add.w	r0, r3, #348	; 0x15c
 80005c6:	2304      	movs	r3, #4
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	4b40      	ldr	r3, [pc, #256]	; (80006cc <_ZN15ApplicationMainC1Ev+0x1b8>)
 80005cc:	2210      	movs	r2, #16
 80005ce:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005d2:	f000 fdfb 	bl	80011cc <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fe0c 	bl	8001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 80005ee:	2300      	movs	r3, #0
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <_ZN15ApplicationMainC1Ev+0x1b8>)
 80005f4:	2240      	movs	r2, #64	; 0x40
 80005f6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005fa:	f000 fde7 	bl	80011cc <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3394      	adds	r3, #148	; 0x94
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	3244      	adds	r2, #68	; 0x44
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	462b      	mov	r3, r5
 8000624:	4622      	mov	r2, r4
 8000626:	f000 fb05 	bl	8000c34 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_S1_>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f503 700f 	add.w	r0, r3, #572	; 0x23c
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f503 71c2 	add.w	r1, r3, #388	; 0x184
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f503 759a 	add.w	r5, r3, #308	; 0x134
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	462b      	mov	r3, r5
 8000654:	4622      	mov	r2, r4
 8000656:	f000 faed 	bl	8000c34 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_S1_>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f503 71ea 	add.w	r1, r3, #468	; 0x1d4
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3314      	adds	r3, #20
 800066a:	461a      	mov	r2, r3
 800066c:	f000 fbca 	bl	8000e04 <_ZN4HomeC1EP12DriveControlP8IEncoder>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	332c      	adds	r3, #44	; 0x2c
 8000680:	461a      	mov	r2, r3
 8000682:	f000 fbbf 	bl	8000e04 <_ZN4HomeC1EP12DriveControlP8IEncoder>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f503 71ea 	add.w	r1, r3, #468	; 0x1d4
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3314      	adds	r3, #20
 8000696:	461a      	mov	r2, r3
 8000698:	f000 fa38 	bl	8000b0c <_ZN10ControllerC1EP12DriveControlP8IEncoder>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	332c      	adds	r3, #44	; 0x2c
 80006ac:	461a      	mov	r2, r3
 80006ae:	f000 fa2d 	bl	8000b0c <_ZN10ControllerC1EP12DriveControlP8IEncoder>
{
	// TODO Auto-generated constructor stub
}
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}
 80006bc:	20000544 	.word	0x20000544
 80006c0:	20000590 	.word	0x20000590
 80006c4:	48000400 	.word	0x48000400
 80006c8:	20000674 	.word	0x20000674
 80006cc:	200005dc 	.word	0x200005dc

080006d0 <_ZN15ApplicationMain7StartUpEv>:

void ApplicationMain::StartUp()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2102      	movs	r1, #2
 80006dc:	4824      	ldr	r0, [pc, #144]	; (8000770 <_ZN15ApplicationMain7StartUpEv+0xa0>)
 80006de:	f003 fac1 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4822      	ldr	r0, [pc, #136]	; (8000770 <_ZN15ApplicationMain7StartUpEv+0xa0>)
 80006e8:	f003 fabc 	bl	8003c64 <HAL_GPIO_WritePin>


	HAL_TIM_Base_MspInit(&htim1);	//Encoder 1
 80006ec:	4821      	ldr	r0, [pc, #132]	; (8000774 <_ZN15ApplicationMain7StartUpEv+0xa4>)
 80006ee:	f001 fded 	bl	80022cc <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim2);	//Encoder 2
 80006f2:	4821      	ldr	r0, [pc, #132]	; (8000778 <_ZN15ApplicationMain7StartUpEv+0xa8>)
 80006f4:	f001 fdea 	bl	80022cc <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim3);	//PWM
 80006f8:	4820      	ldr	r0, [pc, #128]	; (800077c <_ZN15ApplicationMain7StartUpEv+0xac>)
 80006fa:	f001 fde7 	bl	80022cc <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim4);	//task handler timer
 80006fe:	4820      	ldr	r0, [pc, #128]	; (8000780 <_ZN15ApplicationMain7StartUpEv+0xb0>)
 8000700:	f001 fde4 	bl	80022cc <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim17);	//PWM
 8000704:	481f      	ldr	r0, [pc, #124]	; (8000784 <_ZN15ApplicationMain7StartUpEv+0xb4>)
 8000706:	f001 fde1 	bl	80022cc <HAL_TIM_Base_MspInit>


	HAL_TIM_Base_Start_IT(&htim4);
 800070a:	481d      	ldr	r0, [pc, #116]	; (8000780 <_ZN15ApplicationMain7StartUpEv+0xb0>)
 800070c:	f006 f83a 	bl	8006784 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000710:	213c      	movs	r1, #60	; 0x3c
 8000712:	4818      	ldr	r0, [pc, #96]	; (8000774 <_ZN15ApplicationMain7StartUpEv+0xa4>)
 8000714:	f006 fb34 	bl	8006d80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000718:	213c      	movs	r1, #60	; 0x3c
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <_ZN15ApplicationMain7StartUpEv+0xa8>)
 800071c:	f006 fb30 	bl	8006d80 <HAL_TIM_Encoder_Start>

	driveControlXAxis.Init();
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000726:	4618      	mov	r0, r3
 8000728:	f000 faa9 	bl	8000c7e <_ZN12DriveControl4InitEv>
	driveControlYAxis.Init();
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000732:	4618      	mov	r0, r3
 8000734:	f000 faa3 	bl	8000c7e <_ZN12DriveControl4InitEv>


    taskhandler.SetErrorTaskEnable(true);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f000 ffff 	bl	8001740 <_ZN11Taskhandler18SetErrorTaskEnableEb>
    taskhandler.SetDriveTaskEnable(true);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f80a 	bl	8001760 <_ZN11Taskhandler18SetDriveTaskEnableEb>
    taskhandler.SetEncoderTaskEnable(true);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f815 	bl	8001780 <_ZN11Taskhandler20SetEncoderTaskEnableEb>
    taskhandler.SetLedTaskEnable(true);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f820 	bl	80017a0 <_ZN11Taskhandler16SetLedTaskEnableEb>

	//ToDo do some initialization here

	Main();
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f811 	bl	8000788 <_ZN15ApplicationMain4MainEv>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	48001400 	.word	0x48001400
 8000774:	20000544 	.word	0x20000544
 8000778:	20000590 	.word	0x20000590
 800077c:	200005dc 	.word	0x200005dc
 8000780:	20000628 	.word	0x20000628
 8000784:	20000674 	.word	0x20000674

08000788 <_ZN15ApplicationMain4MainEv>:

void ApplicationMain::Main()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	while (true) 
	{
		if(taskhandler.IsErrorTask())
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 ff52 	bl	800163c <_ZN11Taskhandler11IsErrorTaskEv>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d015      	beq.n	80007ca <_ZN15ApplicationMain4MainEv+0x42>
		{
			if(error.GetError() != Error::NoError)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3310      	adds	r3, #16
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fd06 	bl	80011b4 <_ZN5Error8GetErrorEv>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <_ZN15ApplicationMain4MainEv+0x42>
			{
				HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80007b8:	2102      	movs	r1, #2
 80007ba:	484e      	ldr	r0, [pc, #312]	; (80008f4 <_ZN15ApplicationMain4MainEv+0x16c>)
 80007bc:	f003 fa6a 	bl	8003c94 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	484b      	ldr	r0, [pc, #300]	; (80008f4 <_ZN15ApplicationMain4MainEv+0x16c>)
 80007c6:	f003 fa4d 	bl	8003c64 <HAL_GPIO_WritePin>
			}
		}

		//Led update
		if(taskhandler.IsLedTask())
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ff83 	bl	80016d8 <_ZN11Taskhandler9IsLedTaskEv>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d008      	beq.n	80007ea <_ZN15ApplicationMain4MainEv+0x62>
		{
			HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 80007d8:	2101      	movs	r1, #1
 80007da:	4846      	ldr	r0, [pc, #280]	; (80008f4 <_ZN15ApplicationMain4MainEv+0x16c>)
 80007dc:	f003 fa5a 	bl	8003c94 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4843      	ldr	r0, [pc, #268]	; (80008f4 <_ZN15ApplicationMain4MainEv+0x16c>)
 80007e6:	f003 fa3d 	bl	8003c64 <HAL_GPIO_WritePin>
		}

		//Drive Update
		if(taskhandler.IsDriveTask())
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 ff3f 	bl	8001670 <_ZN11Taskhandler11IsDriveTaskEv>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d053      	beq.n	80008a0 <_ZN15ApplicationMain4MainEv+0x118>
		{
			if(!driveControlXAxis.IsHomingStatus())
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fad5 	bl	8000dae <_ZN12DriveControl14IsHomingStatusEv>
 8000804:	4603      	mov	r3, r0
 8000806:	f083 0301 	eor.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d006      	beq.n	800081e <_ZN15ApplicationMain4MainEv+0x96>
			{
				HomeDriveX.HomeDrive(RotationDirection::Left);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fb0c 	bl	8000e36 <_ZN4Home9HomeDriveE17RotationDirection>
			}

			if(!driveControlYAxis.IsHomingStatus())
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fac2 	bl	8000dae <_ZN12DriveControl14IsHomingStatusEv>
 800082a:	4603      	mov	r3, r0
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d006      	beq.n	8000844 <_ZN15ApplicationMain4MainEv+0xbc>
			{
				HomeDriveY.HomeDrive(RotationDirection::Right);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f000 faf9 	bl	8000e36 <_ZN4Home9HomeDriveE17RotationDirection>
			}

			if(driveControlXAxis.IsHomingStatus() && driveControlYAxis.IsHomingStatus())
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800084a:	4618      	mov	r0, r3
 800084c:	f000 faaf 	bl	8000dae <_ZN12DriveControl14IsHomingStatusEv>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <_ZN15ApplicationMain4MainEv+0xe4>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800085c:	4618      	mov	r0, r3
 800085e:	f000 faa6 	bl	8000dae <_ZN12DriveControl14IsHomingStatusEv>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <_ZN15ApplicationMain4MainEv+0xe4>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <_ZN15ApplicationMain4MainEv+0xe6>
 800086c:	2300      	movs	r3, #0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d016      	beq.n	80008a0 <_ZN15ApplicationMain4MainEv+0x118>
			{
				taskhandler.SetControllerTaskEnable(true);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ffa2 	bl	80017c0 <_ZN11Taskhandler23SetControllerTaskEnableEb>
				CheckDriveZeroPosition(&driveControlXAxis, &encoderX);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f503 71ea 	add.w	r1, r3, #468	; 0x1d4
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3314      	adds	r3, #20
 8000886:	461a      	mov	r2, r3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f837 	bl	80008fc <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder>
				CheckDriveZeroPosition(&driveControlYAxis, &encoderY);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	332c      	adds	r3, #44	; 0x2c
 8000898:	461a      	mov	r2, r3
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f82e 	bl	80008fc <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder>
			}
		}

		//Encoder update
		if(taskhandler.IsEncoderTask())
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fefe 	bl	80016a4 <_ZN11Taskhandler13IsEncoderTaskEv>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d009      	beq.n	80008c2 <_ZN15ApplicationMain4MainEv+0x13a>
		{
			encoderX.Update();
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3314      	adds	r3, #20
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fbf9 	bl	80010aa <_ZN7AMT102V6UpdateEv>
			encoderY.Update();
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	332c      	adds	r3, #44	; 0x2c
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fbf4 	bl	80010aa <_ZN7AMT102V6UpdateEv>
		}

		//Controller update
		if(taskhandler.IsControllerTask())
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 ff21 	bl	800170c <_ZN11Taskhandler16IsControllerTaskEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f43f af5f 	beq.w	8000790 <_ZN15ApplicationMain4MainEv+0x8>
		{
			xController.UpdateController(100);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80008d8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80008f8 <_ZN15ApplicationMain4MainEv+0x170>
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f938 	bl	8000b52 <_ZN10Controller16UpdateControllerEf>
			yController.UpdateController(100);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80008e8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80008f8 <_ZN15ApplicationMain4MainEv+0x170>
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f930 	bl	8000b52 <_ZN10Controller16UpdateControllerEf>
		if(taskhandler.IsErrorTask())
 80008f2:	e74d      	b.n	8000790 <_ZN15ApplicationMain4MainEv+0x8>
 80008f4:	48001400 	.word	0x48001400
 80008f8:	42c80000 	.word	0x42c80000

080008fc <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder>:
		}
	}
}

void ApplicationMain::CheckDriveZeroPosition(DriveControl* driveControl, IEncoder* encoder)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	if(driveControl->IsHomingStatus() && encoder->GetValue() <= 0)
 8000908:	68b8      	ldr	r0, [r7, #8]
 800090a:	f000 fa50 	bl	8000dae <_ZN12DriveControl14IsHomingStatusEv>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00a      	beq.n	800092a <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder+0x2e>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3308      	adds	r3, #8
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	4798      	blx	r3
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	dc01      	bgt.n	800092a <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder+0x2e>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder+0x30>
 800092a:	2300      	movs	r3, #0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d020      	beq.n	8000972 <_ZN15ApplicationMain22CheckDriveZeroPositionEP12DriveControlP8IEncoder+0x76>
	{
		driveControlYAxis.DriveStop();
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa19 	bl	8000d6e <_ZN12DriveControl9DriveStopEv>
		driveControlXAxis.DriveStop();
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fa13 	bl	8000d6e <_ZN12DriveControl9DriveStopEv>
		taskhandler.SetControllerTaskEnable(false);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f000 ff37 	bl	80017c0 <_ZN11Taskhandler23SetControllerTaskEnableEb>
		taskhandler.SetDriveTaskEnable(false);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f000 ff02 	bl	8001760 <_ZN11Taskhandler18SetDriveTaskEnableEb>
		taskhandler.SetLedTaskEnable(false);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 ff1d 	bl	80017a0 <_ZN11Taskhandler16SetLedTaskEnableEb>
		error.SetError(Error::DrivePositionOutOfBoundsError);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3310      	adds	r3, #16
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fc12 	bl	8001196 <_ZN5Error8SetErrorENS_9ErrorCodeE>
	}
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_ZN16AngleCalculationC1Ev>:

#include "AngleCalculation.h"
#include "../../AppSettings.h"
#include "math.h"

AngleCalculation::AngleCalculation()
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
{
	// TODO Auto-generated constructor stub

}
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_ZN16AngleCalculation27CalculateTargetEncoderValueEf>:

int32_t AngleCalculation::CalculateTargetEncoderValue(float angle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	ed87 0a00 	vstr	s0, [r7]
	float angleRad = ConvertFromDegreeToRad(angle);
 800099c:	ed97 0a00 	vldr	s0, [r7]
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f829 	bl	80009f8 <_ZN16AngleCalculation22ConvertFromDegreeToRadEf>
 80009a6:	ed87 0a03 	vstr	s0, [r7, #12]

	float targetAngle = ArcSinusApproximation((PlatformArmLength/MotorArmLength) * SinusApproximation(angleRad));
 80009aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f838 	bl	8000a24 <_ZN16AngleCalculation18SinusApproximationEf>
 80009b4:	eef0 7a40 	vmov.f32	s15, s0
 80009b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009bc:	eeb0 0a67 	vmov.f32	s0, s15
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f869 	bl	8000a98 <_ZN16AngleCalculation21ArcSinusApproximationEf>
 80009c6:	ed87 0a02 	vstr	s0, [r7, #8]

	return (int32_t)((targetAngle * encoderRation) + ZeroDegreeEncoderValue);
 80009ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80009ce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80009f0 <_ZN16AngleCalculation27CalculateTargetEncoderValueEf+0x60>
 80009d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80009f4 <_ZN16AngleCalculation27CalculateTargetEncoderValueEf+0x64>
 80009da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e2:	ee17 3a90 	vmov	r3, s15
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	46fea600 	.word	0x46fea600
 80009f4:	47761800 	.word	0x47761800

080009f8 <_ZN16AngleCalculation22ConvertFromDegreeToRadEf>:


float AngleCalculation::ConvertFromDegreeToRad(float angle)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	ed87 0a00 	vstr	s0, [r7]
	return angle * angleConvertFactor;
 8000a04:	edd7 7a00 	vldr	s15, [r7]
 8000a08:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a20 <_ZN16AngleCalculation22ConvertFromDegreeToRadEf+0x28>
 8000a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a10:	eeb0 0a67 	vmov.f32	s0, s15
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	3c8efa35 	.word	0x3c8efa35

08000a24 <_ZN16AngleCalculation18SinusApproximationEf>:


float AngleCalculation::SinusApproximation(float angleRad)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	ed87 0a00 	vstr	s0, [r7]
	float x1 = angleRad;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	617b      	str	r3, [r7, #20]
	float x3 = angleRad*angleRad*angleRad; //pow(angleRad, 3);
 8000a34:	edd7 7a00 	vldr	s15, [r7]
 8000a38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a3c:	ed97 7a00 	vldr	s14, [r7]
 8000a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a44:	edc7 7a04 	vstr	s15, [r7, #16]
	float x5 = x3*angleRad*angleRad;	//pow(angleRad,5);
 8000a48:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a4c:	edd7 7a00 	vldr	s15, [r7]
 8000a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a54:	ed97 7a00 	vldr	s14, [r7]
 8000a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a5c:	edc7 7a03 	vstr	s15, [r7, #12]

	return x1 + a1*x3 + a2*x5;
 8000a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a64:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000a94 <_ZN16AngleCalculation18SinusApproximationEf+0x70>
 8000a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a78:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000a94 <_ZN16AngleCalculation18SinusApproximationEf+0x70>
 8000a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a80:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000a84:	eeb0 0a67 	vmov.f32	s0, s15
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	00000000 	.word	0x00000000

08000a98 <_ZN16AngleCalculation21ArcSinusApproximationEf>:


float AngleCalculation::ArcSinusApproximation(float angleRad)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	ed87 0a00 	vstr	s0, [r7]
	float x1 = angleRad;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	617b      	str	r3, [r7, #20]
	float x3 = angleRad*angleRad*angleRad; //pow(angleRad, 3);
 8000aa8:	edd7 7a00 	vldr	s15, [r7]
 8000aac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	edc7 7a04 	vstr	s15, [r7, #16]
	float x5 = x3*angleRad*angleRad;	//pow(angleRad,5);
 8000abc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ac0:	edd7 7a00 	vldr	s15, [r7]
 8000ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac8:	ed97 7a00 	vldr	s14, [r7]
 8000acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad0:	edc7 7a03 	vstr	s15, [r7, #12]

	return x1 + b1*x3 + b2*x5;
 8000ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ad8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000b08 <_ZN16AngleCalculation21ArcSinusApproximationEf+0x70>
 8000adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aec:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000b08 <_ZN16AngleCalculation21ArcSinusApproximationEf+0x70>
 8000af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000af4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000af8:	eeb0 0a67 	vmov.f32	s0, s15
 8000afc:	371c      	adds	r7, #28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	00000000 	.word	0x00000000

08000b0c <_ZN10ControllerC1EP12DriveControlP8IEncoder>:

#include "../AppSettings.h"
#include "Controller.h"


Controller::Controller(DriveControl* driveControl, IEncoder* encoder)
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
{
	this->_driveControl = driveControl;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	601a      	str	r2, [r3, #0]
	this->_encoder = encoder;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	605a      	str	r2, [r3, #4]
	this->_ancleCalculatin = new AngleCalculation();
 8000b34:	2001      	movs	r0, #1
 8000b36:	f00c fd95 	bl	800d664 <_Znwj>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461c      	mov	r4, r3
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f7ff ff1b 	bl	800097a <_ZN16AngleCalculationC1Ev>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	609c      	str	r4, [r3, #8]
}
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}

08000b52 <_ZN10Controller16UpdateControllerEf>:

void Controller::UpdateController(float targetAngle)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	ed87 0a00 	vstr	s0, [r7]

	if(previewAngle != targetAngle)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b64:	edd7 7a00 	vldr	s15, [r7]
 8000b68:	eeb4 7a67 	vcmp.f32	s14, s15
 8000b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b70:	d014      	beq.n	8000b9c <_ZN10Controller16UpdateControllerEf+0x4a>
	{
		ValidateAngle(&targetAngle);
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f820 	bl	8000bbc <_ZN10Controller13ValidateAngleEPf>
		encoderValue = _ancleCalculatin->CalculateTargetEncoderValue(targetAngle);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	edd7 7a00 	vldr	s15, [r7]
 8000b84:	eeb0 0a67 	vmov.f32	s0, s15
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff01 	bl	8000990 <_ZN16AngleCalculation27CalculateTargetEncoderValueEf>
 8000b8e:	ee07 0a90 	vmov	s15, r0
 8000b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	
	UpdatePosition(encoderValue);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f838 	bl	8000c1c <_ZN10Controller14UpdatePositionEf>
	previewAngle = targetAngle;
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60da      	str	r2, [r3, #12]
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <_ZN10Controller13ValidateAngleEPf>:


void Controller::ValidateAngle(float* angle)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
    *angle = (*angle < MinAngle) ? MinAngle : *angle;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	edd3 7a00 	vldr	s15, [r3]
 8000bcc:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8000bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d501      	bpl.n	8000bde <_ZN10Controller13ValidateAngleEPf+0x22>
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <_ZN10Controller13ValidateAngleEPf+0x58>)
 8000bdc:	e001      	b.n	8000be2 <_ZN10Controller13ValidateAngleEPf+0x26>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	6013      	str	r3, [r2, #0]
    *angle = (*angle > MaxAngle) ? MaxAngle : *angle;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	edd3 7a00 	vldr	s15, [r3]
 8000bec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	dd01      	ble.n	8000bfe <_ZN10Controller13ValidateAngleEPf+0x42>
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_ZN10Controller13ValidateAngleEPf+0x5c>)
 8000bfc:	e001      	b.n	8000c02 <_ZN10Controller13ValidateAngleEPf+0x46>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	6013      	str	r3, [r2, #0]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	c1f00000 	.word	0xc1f00000
 8000c18:	41f00000 	.word	0x41f00000

08000c1c <_ZN10Controller14UpdatePositionEf>:


void Controller::UpdatePosition(float EncoderValueY)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	ed87 0a00 	vstr	s0, [r7]

}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_S1_>:
#include "DriveControl.h"


DriveControl::DriveControl(IOHandle* enLeft, IOHandle* inLeft, IOHandle* enRight, IOHandle* inRight, IOHandle* refSwitch)
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
{
	_enLeft = enLeft;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	64da      	str	r2, [r3, #76]	; 0x4c
	_inLeft = inLeft;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	651a      	str	r2, [r3, #80]	; 0x50
	_enRight = enRight;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	655a      	str	r2, [r3, #84]	; 0x54
	_inRight = inRight;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	659a      	str	r2, [r3, #88]	; 0x58
	_refSwitch = refSwitch;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	69fa      	ldr	r2, [r7, #28]
 8000c5e:	65da      	str	r2, [r3, #92]	; 0x5c
	_homingSttus = false;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	_rotationDirection = RotationDirection::Undefined;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_ZN12DriveControl4InitEv>:

void DriveControl::Init()
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	_enLeft->SetFunction(IOFunction::Output);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fb4e 	bl	800132e <_ZN8IOHandle11SetFunctionE10IOFunction>
	_enRight->SetFunction(IOFunction::Output);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	2102      	movs	r1, #2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fb48 	bl	800132e <_ZN8IOHandle11SetFunctionE10IOFunction>
	_enLeft->Write(true);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fac4 	bl	8001232 <_ZN8IOHandle5WriteEb>
	_enRight->Write(true);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fabe 	bl	8001232 <_ZN8IOHandle5WriteEb>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_ZN12DriveControl9DriveLeftEt>:


void DriveControl::DriveLeft(uint16_t speed)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	807b      	strh	r3, [r7, #2]
	if (_rotationDirection != RotationDirection::Left) 
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d015      	beq.n	8000d00 <_ZN12DriveControl9DriveLeftEt+0x42>
	{
		_inLeft->SetFunction(IOFunction::PWM);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fb27 	bl	800132e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->SetFunction(IOFunction::Output);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fb21 	bl	800132e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->Write(false);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fa9d 	bl	8001232 <_ZN8IOHandle5WriteEb>
		_rotationDirection = RotationDirection::Left;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
	_inLeft->SetPWM(speed);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fab1 	bl	8001270 <_ZN8IOHandle6SetPWMEm>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_ZN12DriveControl10DriveRightEt>:

void DriveControl::DriveRight(uint16_t speed)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]
	if (_rotationDirection != RotationDirection::Right)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d015      	beq.n	8000d58 <_ZN12DriveControl10DriveRightEt+0x42>
	{
		_inLeft->SetFunction(IOFunction::Output);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fafb 	bl	800132e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->SetFunction(IOFunction::PWM);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 faf5 	bl	800132e <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inLeft->Write(false);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa71 	bl	8001232 <_ZN8IOHandle5WriteEb>
		_rotationDirection = RotationDirection::Right;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2202      	movs	r2, #2
 8000d54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
	_inRight->SetPWM(speed);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fa85 	bl	8001270 <_ZN8IOHandle6SetPWMEm>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_ZN12DriveControl9DriveStopEv>:

void DriveControl::DriveStop()
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	_inRight->SetPWM(0);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fa77 	bl	8001270 <_ZN8IOHandle6SetPWMEm>
	_inLeft->SetPWM(0);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fa71 	bl	8001270 <_ZN8IOHandle6SetPWMEm>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_ZN12DriveControl12GetRefSwitchEv>:



IOHandle* DriveControl::GetRefSwitch()
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return this->_refSwitch;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_ZN12DriveControl14IsHomingStatusEv>:

bool DriveControl::IsHomingStatus()
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return _homingSttus;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_ZN12DriveControl14SetHomingSttusEb>:

void DriveControl::SetHomingSttus(bool homingSttus) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
	_homingSttus = homingSttus;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bfb8      	it	lt
 8000df6:	425b      	neglt	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_ZN4HomeC1EP12DriveControlP8IEncoder>:
#include "Home.h"
#include "math.h"
#include "../../AppSettings.h"


Home::Home( DriveControl* driveControl, IEncoder* encoder)
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
{
	_currentHomingState = HomingState::DriveToSwitch;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	_nextHomingState = HomingState::DriveToSwitch;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	705a      	strb	r2, [r3, #1]
	_encoder = encoder;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]
	_driveControl = driveControl;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	609a      	str	r2, [r3, #8]
}
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZN4Home9HomeDriveE17RotationDirection>:

void Home::HomeDrive(RotationDirection rotationDirection)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	70fb      	strb	r3, [r7, #3]

	switch (_currentHomingState) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <_ZN4Home9HomeDriveE17RotationDirection+0x1a>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d01a      	beq.n	8000e84 <_ZN4Home9HomeDriveE17RotationDirection+0x4e>
 8000e4e:	e030      	b.n	8000eb2 <_ZN4Home9HomeDriveE17RotationDirection+0x7c>
		case HomingState::DriveToSwitch:
			if(DriveToSwitchPos(rotationDirection))
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	4619      	mov	r1, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f83b 	bl	8000ed0 <_ZN4Home16DriveToSwitchPosE17RotationDirection>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d02c      	beq.n	8000eba <_ZN4Home9HomeDriveE17RotationDirection+0x84>
			{
				_driveControl->DriveStop();
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff82 	bl	8000d6e <_ZN12DriveControl9DriveStopEv>
				_encoder->ResetValue();
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3310      	adds	r3, #16
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4798      	blx	r3
				_nextHomingState = HomingState::DriveToCenterPos;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000e82:	e01a      	b.n	8000eba <_ZN4Home9HomeDriveE17RotationDirection+0x84>
		case HomingState::DriveToCenterPos:
			if(DriveToCenterPos(rotationDirection))
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	4619      	mov	r1, r3
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f86c 	bl	8000f66 <_ZN4Home16DriveToCenterPosE17RotationDirection>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d014      	beq.n	8000ebe <_ZN4Home9HomeDriveE17RotationDirection+0x88>
			{
				_driveControl->DriveStop();
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff68 	bl	8000d6e <_ZN12DriveControl9DriveStopEv>
				_driveControl->SetHomingSttus(true);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff8f 	bl	8000dc8 <_ZN12DriveControl14SetHomingSttusEb>
				_nextHomingState = HomingState::DriveToSwitch;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000eb0:	e005      	b.n	8000ebe <_ZN4Home9HomeDriveE17RotationDirection+0x88>
		default:
			_nextHomingState = HomingState::DriveToSwitch;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]
			break;
 8000eb8:	e002      	b.n	8000ec0 <_ZN4Home9HomeDriveE17RotationDirection+0x8a>
			break;
 8000eba:	bf00      	nop
 8000ebc:	e000      	b.n	8000ec0 <_ZN4Home9HomeDriveE17RotationDirection+0x8a>
			break;
 8000ebe:	bf00      	nop
	}

	_currentHomingState = _nextHomingState;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	785a      	ldrb	r2, [r3, #1]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	701a      	strb	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_ZN4Home16DriveToSwitchPosE17RotationDirection>:

bool Home::DriveToSwitchPos(RotationDirection rotationDirection)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
	IOHandle* refSwitch = _driveControl->GetRefSwitch();
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff58 	bl	8000d96 <_ZN12DriveControl12GetRefSwitchEv>
 8000ee6:	60f8      	str	r0, [r7, #12]
	if(HAL_GPIO_ReadPin(refSwitch->GetPort(), refSwitch->GetPin()) == GPIO_PIN_SET)
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 fb13 	bl	8001514 <_ZN8IOHandle7GetPortEv>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 fb03 	bl	80014fc <_ZN8IOHandle6GetPinEv>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	4620      	mov	r0, r4
 8000efe:	f002 fe99 	bl	8003c34 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d010      	beq.n	8000f34 <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x64>
	{
		_driveControl->DriveLeft(0);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fed0 	bl	8000cbe <_ZN12DriveControl9DriveLeftEt>
		_encoder->ResetValue();
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3310      	adds	r3, #16
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4798      	blx	r3
		return true;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e014      	b.n	8000f5e <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x8e>
	}

	if(rotationDirection == RotationDirection::Left)
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d106      	bne.n	8000f48 <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x78>
	{
		_driveControl->DriveLeft(speed);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff febb 	bl	8000cbe <_ZN12DriveControl9DriveLeftEt>
	}

	if(rotationDirection == RotationDirection::Right)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d106      	bne.n	8000f5c <_ZN4Home16DriveToSwitchPosE17RotationDirection+0x8c>
	{
		_driveControl->DriveRight(speed);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fedd 	bl	8000d16 <_ZN12DriveControl10DriveRightEt>
	}

	return false;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <_ZN4Home16DriveToCenterPosE17RotationDirection>:

bool Home::DriveToCenterPos(RotationDirection rotationDirection)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	70fb      	strb	r3, [r7, #3]
	if(abs(_encoder->GetValue()) > ZeroDegreeEncoderValue)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4610      	mov	r0, r2
 8000f82:	4798      	blx	r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff2e 	bl	8000de8 <_ZSt3absl>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f24f 6218 	movw	r2, #63000	; 0xf618
 8000f92:	4293      	cmp	r3, r2
 8000f94:	bfcc      	ite	gt
 8000f96:	2301      	movgt	r3, #1
 8000f98:	2300      	movle	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <_ZN4Home16DriveToCenterPosE17RotationDirection+0x4a>
	{
		_driveControl->DriveLeft(0);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe89 	bl	8000cbe <_ZN12DriveControl9DriveLeftEt>
		return true;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e014      	b.n	8000fda <_ZN4Home16DriveToCenterPosE17RotationDirection+0x74>
	}

	if(rotationDirection == RotationDirection::Right)
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d106      	bne.n	8000fc4 <_ZN4Home16DriveToCenterPosE17RotationDirection+0x5e>
	{
		_driveControl->DriveLeft(speed);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe7d 	bl	8000cbe <_ZN12DriveControl9DriveLeftEt>
	}

	if(rotationDirection == RotationDirection::Left)
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d106      	bne.n	8000fd8 <_ZN4Home16DriveToCenterPosE17RotationDirection+0x72>
	{
		_driveControl->DriveRight(speed);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fe9f 	bl	8000d16 <_ZN12DriveControl10DriveRightEt>
	}

	return false;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_ZN8IEncoderD1Ev>:
#include "stdint.h"

class IEncoder
{
    public:
		virtual ~IEncoder() {};
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <_ZN8IEncoderD1Ev+0x1c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	0800da54 	.word	0x0800da54

08001004 <_ZN8IEncoderD0Ev>:
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffe9 	bl	8000fe4 <_ZN8IEncoderD1Ev>
 8001012:	2104      	movs	r1, #4
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f00c fb23 	bl	800d660 <_ZdlPvj>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN8IEncoderC1Ev>:
class IEncoder
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <_ZN8IEncoderC1Ev+0x1c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	0800da54 	.word	0x0800da54

08001044 <_ZN7AMT102VC1EP17TIM_HandleTypeDef>:
#include "AMT102V.h"

AMT102V::AMT102V(TIM_HandleTypeDef* timer)
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffe7 	bl	8001024 <_ZN8IEncoderC1Ev>
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_ZN7AMT102VC1EP17TIM_HandleTypeDef+0x28>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
{
	this->timer = timer;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	605a      	str	r2, [r3, #4]
}
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800da34 	.word	0x0800da34

08001070 <_ZN7AMT102V8SetValueEl>:

void AMT102V::SetValue(int32_t value)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	encoderValue = value;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	615a      	str	r2, [r3, #20]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_ZN7AMT102V10ResetValueEv>:

void AMT102V::ResetValue()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	SetValue(0);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	330c      	adds	r3, #12
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2100      	movs	r1, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	4798      	blx	r3
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_ZN7AMT102V6UpdateEv>:

void AMT102V::Update()
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	currentValue = -(timer->Instance->CNT);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	425b      	negs	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	609a      	str	r2, [r3, #8]
	deltaValue = currentValue - lastValue;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]

	//forward overflow
	if (deltaValue < -32768)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80010d8:	da06      	bge.n	80010e8 <_ZN7AMT102V6UpdateEv+0x3e>
	{
		deltaValue = (deltaValue + 65535);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010e2:	33ff      	adds	r3, #255	; 0xff
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6113      	str	r3, [r2, #16]
	}

	//backwards overflow
	if (deltaValue > 32768)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010f0:	dd06      	ble.n	8001100 <_ZN7AMT102V6UpdateEv+0x56>
	{
		deltaValue = (deltaValue - 65535);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80010fa:	3bff      	subs	r3, #255	; 0xff
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6113      	str	r3, [r2, #16]
	}

	encoderValue += deltaValue;				//Increase the encoder value by the difference
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	441a      	add	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	615a      	str	r2, [r3, #20]
	lastValue = currentValue;						//previous value = current value
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60da      	str	r2, [r3, #12]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_ZN7AMT102V8GetValueEv>:

int32_t AMT102V::GetValue()
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
	return encoderValue;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <_ZN7AMT102VD1Ev>:
#ifndef SRC_AMT102V_H_
#define SRC_AMT102V_H_

#include "../IEncoder.h"

class AMT102V: public IEncoder
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <_ZN7AMT102VD1Ev+0x20>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff49 	bl	8000fe4 <_ZN8IEncoderD1Ev>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0800da34 	.word	0x0800da34

08001160 <_ZN7AMT102VD0Ev>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe7 	bl	800113c <_ZN7AMT102VD1Ev>
 800116e:	2118      	movs	r1, #24
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f00c fa75 	bl	800d660 <_ZdlPvj>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZN5ErrorC1Ev>:
 *      Author: marce
 */

#include "Error.h"

Error::Error() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub
}
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN5Error8SetErrorENS_9ErrorCodeE>:

void Error::SetError(ErrorCode errorCode)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
	_errorCode = errorCode;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	78fa      	ldrb	r2, [r7, #3]
 80011a6:	701a      	strb	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_ZN5Error8GetErrorEv>:


Error::ErrorCode Error::GetError()
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	return _errorCode;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>:
#include "IOHandle.h"
#include <stm32g4xx_hal.h>

IOHandle::IOHandle(GPIO_TypeDef* port, uint32_t pin, TIM_HandleTypeDef* timer, uint32_t channel)
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
{
     _port = port;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	605a      	str	r2, [r3, #4]
     _pin = pin;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
     _timer = timer;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	60da      	str	r2, [r3, #12]
     _channel = channel;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	611a      	str	r2, [r3, #16]
}
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_ZN8IOHandleC1EP12GPIO_TypeDefm>:

IOHandle::IOHandle(GPIO_TypeDef* port, uint32_t pin)
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
{
     _port = port;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	605a      	str	r2, [r3, #4]
     _pin = pin;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
     _timer = nullptr;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
     _channel = 0;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
}
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_ZN8IOHandle5WriteEb>:

void IOHandle::Write(bool status)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
     if (_IoFunction != IOFunction::Output)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d110      	bne.n	8001268 <_ZN8IOHandle5WriteEb+0x36>
     {
          return;
     }

     GPIO_PinState state = (status == true ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <_ZN8IOHandle5WriteEb+0x1e>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <_ZN8IOHandle5WriteEb+0x20>
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
     HAL_GPIO_WritePin(_port, _pin, state);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6858      	ldr	r0, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	b29b      	uxth	r3, r3
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	4619      	mov	r1, r3
 8001262:	f002 fcff 	bl	8003c64 <HAL_GPIO_WritePin>
 8001266:	e000      	b.n	800126a <_ZN8IOHandle5WriteEb+0x38>
          return;
 8001268:	bf00      	nop
}
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN8IOHandle6SetPWMEm>:
          HAL_TIM_PWM_Stop(_timer, _channel);
     }
}

void IOHandle::SetPWM(uint32_t pwm)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
     if (!IsPWMFunction())
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f842 	bl	8001304 <_ZN8IOHandle13IsPWMFunctionEv>
 8001280:	4603      	mov	r3, r0
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d137      	bne.n	80012fc <_ZN8IOHandle6SetPWMEm+0x8c>
     {
          return;
     }

     __HAL_TIM_SET_COMPARE(_timer, _channel, pwm);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <_ZN8IOHandle6SetPWMEm+0x30>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
 800129e:	e02e      	b.n	80012fe <_ZN8IOHandle6SetPWMEm+0x8e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d105      	bne.n	80012b4 <_ZN8IOHandle6SetPWMEm+0x44>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
 80012b2:	e024      	b.n	80012fe <_ZN8IOHandle6SetPWMEm+0x8e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d105      	bne.n	80012c8 <_ZN8IOHandle6SetPWMEm+0x58>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80012c6:	e01a      	b.n	80012fe <_ZN8IOHandle6SetPWMEm+0x8e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d105      	bne.n	80012dc <_ZN8IOHandle6SetPWMEm+0x6c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
 80012da:	e010      	b.n	80012fe <_ZN8IOHandle6SetPWMEm+0x8e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d105      	bne.n	80012f0 <_ZN8IOHandle6SetPWMEm+0x80>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	649a      	str	r2, [r3, #72]	; 0x48
 80012ee:	e006      	b.n	80012fe <_ZN8IOHandle6SetPWMEm+0x8e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012fa:	e000      	b.n	80012fe <_ZN8IOHandle6SetPWMEm+0x8e>
          return;
 80012fc:	bf00      	nop

}
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZN8IOHandle13IsPWMFunctionEv>:

bool IOHandle::IsPWMFunction() {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
     return (_IoFunction == IOFunction::PWM && _timer != nullptr);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d105      	bne.n	8001320 <_ZN8IOHandle13IsPWMFunctionEv+0x1c>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <_ZN8IOHandle13IsPWMFunctionEv+0x1c>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <_ZN8IOHandle13IsPWMFunctionEv+0x1e>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_ZN8IOHandle11SetFunctionE10IOFunction>:

void IOHandle::SetFunction(IOFunction ioFunction)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	70fb      	strb	r3, [r7, #3]
     _IoFunction = ioFunction;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	701a      	strb	r2, [r3, #0]

     switch (ioFunction)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d011      	beq.n	800136a <_ZN8IOHandle11SetFunctionE10IOFunction+0x3c>
 8001346:	2b03      	cmp	r3, #3
 8001348:	dc1d      	bgt.n	8001386 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
 800134a:	2b01      	cmp	r3, #1
 800134c:	dc02      	bgt.n	8001354 <_ZN8IOHandle11SetFunctionE10IOFunction+0x26>
 800134e:	2b00      	cmp	r3, #0
 8001350:	da03      	bge.n	800135a <_ZN8IOHandle11SetFunctionE10IOFunction+0x2c>
                    InitAsDigitalIn();
               }

               break;
          default:
               break;
 8001352:	e018      	b.n	8001386 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
     switch (ioFunction)
 8001354:	2b02      	cmp	r3, #2
 8001356:	d004      	beq.n	8001362 <_ZN8IOHandle11SetFunctionE10IOFunction+0x34>
               break;
 8001358:	e015      	b.n	8001386 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
               InitAsDigitalIn();
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f818 	bl	8001390 <_ZN8IOHandle15InitAsDigitalInEv>
               break;
 8001360:	e012      	b.n	8001388 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               InitAsDigitalOut();
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f831 	bl	80013ca <_ZN8IOHandle16InitAsDigitalOutEv>
               break;
 8001368:	e00e      	b.n	8001388 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               if (IsPWMFunction()) 
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffca 	bl	8001304 <_ZN8IOHandle13IsPWMFunctionEv>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <_ZN8IOHandle11SetFunctionE10IOFunction+0x50>
                    InitAsPWMOut();
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f844 	bl	8001404 <_ZN8IOHandle12InitAsPWMOutEv>
               break;
 800137c:	e004      	b.n	8001388 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
                    InitAsDigitalIn();
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f806 	bl	8001390 <_ZN8IOHandle15InitAsDigitalInEv>
               break;
 8001384:	e000      	b.n	8001388 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               break;
 8001386:	bf00      	nop
     }
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN8IOHandle15InitAsDigitalInEv>:
{
     return _IoFunction;
}

void IOHandle::InitAsDigitalIn() 
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
     GPIO_InitStruct.Pin = _pin;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Digital output mode
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3314      	adds	r3, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f002 fab7 	bl	8003930 <HAL_GPIO_Init>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZN8IOHandle16InitAsDigitalOutEv>:

void IOHandle::InitAsDigitalOut() 
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
     GPIO_InitStruct.Pin = _pin;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Digital output mode
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3314      	adds	r3, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f002 fa9a 	bl	8003930 <HAL_GPIO_Init>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZN8IOHandle12InitAsPWMOutEv>:

void IOHandle::InitAsPWMOut() 
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]
     HAL_TIM_PWM_Stop(_timer, _channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f005 fb6c 	bl	8006b08 <HAL_TIM_PWM_Stop>

     sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001430:	2360      	movs	r3, #96	; 0x60
 8001432:	60fb      	str	r3, [r7, #12]
     sConfigOC.Pulse = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
     sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
     sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
     sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
     if (HAL_TIM_PWM_ConfigChannel(_timer, &sConfigOC, _channel) != HAL_OK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68d8      	ldr	r0, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	f005 fe6f 	bl	800713c <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
     {

     }

     GPIO_InitStruct.Pin = _pin;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2202      	movs	r2, #2
 800146e:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]

     if(_timer->Instance == TIM17)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <_ZN8IOHandle12InitAsPWMOutEv+0xf0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d102      	bne.n	800148e <_ZN8IOHandle12InitAsPWMOutEv+0x8a>
         GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	220a      	movs	r2, #10
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

     if(_timer->Instance == TIM3 && _channel == TIM_CHANNEL_4)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <_ZN8IOHandle12InitAsPWMOutEv+0xf4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d106      	bne.n	80014a8 <_ZN8IOHandle12InitAsPWMOutEv+0xa4>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d102      	bne.n	80014a8 <_ZN8IOHandle12InitAsPWMOutEv+0xa4>
         GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	220a      	movs	r2, #10
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

     if(_timer->Instance == TIM3 && (_channel == TIM_CHANNEL_1 || _channel == TIM_CHANNEL_2))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_ZN8IOHandle12InitAsPWMOutEv+0xf4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d10a      	bne.n	80014ca <_ZN8IOHandle12InitAsPWMOutEv+0xc6>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <_ZN8IOHandle12InitAsPWMOutEv+0xc0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d102      	bne.n	80014ca <_ZN8IOHandle12InitAsPWMOutEv+0xc6>
         GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3314      	adds	r3, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4610      	mov	r0, r2
 80014d6:	f002 fa2b 	bl	8003930 <HAL_GPIO_Init>

     HAL_TIM_PWM_Start(_timer, _channel);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f005 fa0f 	bl	8006908 <HAL_TIM_PWM_Start>
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40014800 	.word	0x40014800
 80014f8:	40000400 	.word	0x40000400

080014fc <_ZN8IOHandle6GetPinEv>:

uint32_t IOHandle::GetPin()
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	return _pin;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN8IOHandle7GetPortEv>:

GPIO_TypeDef* IOHandle::GetPort()
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	return _port;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_ZN11TaskhandlerC1Ev>:
#include "../AppSettings.h"
#include "Taskhandler.h"

Taskhandler::Taskhandler() {}
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	711a      	strb	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	715a      	strb	r2, [r3, #5]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	719a      	strb	r2, [r3, #6]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	71da      	strb	r2, [r3, #7]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	721a      	strb	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	725a      	strb	r2, [r3, #9]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	729a      	strb	r2, [r3, #10]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	72da      	strb	r2, [r3, #11]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	731a      	strb	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	735a      	strb	r2, [r3, #13]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_ZN11Taskhandler17UpdateTaskhandlerEv>:

void Taskhandler::UpdateTaskhandler()
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
     if(_taskCounter % ErrorUpdateTime == 0)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <_ZN11Taskhandler17UpdateTaskhandlerEv+0xa8>)
 8001592:	fb83 1302 	smull	r1, r3, r3, r2
 8001596:	1199      	asrs	r1, r3, #6
 8001598:	17d3      	asrs	r3, r2, #31
 800159a:	1acb      	subs	r3, r1, r3
 800159c:	f240 11f3 	movw	r1, #499	; 0x1f3
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x2c>
     {
          _isErrorTaskUpdateRequest = true;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	711a      	strb	r2, [r3, #4]
     }

     if(_taskCounter % DriveUpdateTime == 0)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xac>)
 80015b6:	fb83 2301 	smull	r2, r3, r3, r1
 80015ba:	105a      	asrs	r2, r3, #1
 80015bc:	17cb      	asrs	r3, r1, #31
 80015be:	1ad2      	subs	r2, r2, r3
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	1aca      	subs	r2, r1, r3
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	d102      	bne.n	80015d6 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x52>
     {
          _isDriveTaskUpdateRequest = true;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	719a      	strb	r2, [r3, #6]
     }

     if(_taskCounter % EncoderUpdateTime == 0)
     {
          _isEncoderTaskUpdateRequest = true;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	715a      	strb	r2, [r3, #5]
     }

     if(_taskCounter % ControllerUpdateTime == 0)
     {
    	 _isControllerUpdateReques = true;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	721a      	strb	r2, [r3, #8]
     }

     if(_taskCounter % LedUpdateTime == 0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xb0>)
 80015e8:	fb83 1302 	smull	r1, r3, r3, r2
 80015ec:	1199      	asrs	r1, r3, #6
 80015ee:	17d3      	asrs	r3, r2, #31
 80015f0:	1acb      	subs	r3, r1, r3
 80015f2:	f240 1191 	movw	r1, #401	; 0x191
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x82>
     {
          _isLedTaskUpdateRequest = true;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	71da      	strb	r2, [r3, #7]
     }

     _taskCounter++;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
	 if(_taskCounter == 11005445+1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a08      	ldr	r2, [pc, #32]	; (8001638 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xb4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d102      	bne.n	8001620 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x9c>
	 {
		 _taskCounter = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
	 }


}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	20d56b39 	.word	0x20d56b39
 8001630:	2e8ba2e9 	.word	0x2e8ba2e9
 8001634:	28db9c69 	.word	0x28db9c69
 8001638:	00a7ee06 	.word	0x00a7ee06

0800163c <_ZN11Taskhandler11IsErrorTaskEv>:

bool Taskhandler::IsErrorTask()
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if(!_isErrorTaksUpdateEnable)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7a5b      	ldrb	r3, [r3, #9]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <_ZN11Taskhandler11IsErrorTaskEv+0x1a>
		return false;
 8001652:	2300      	movs	r3, #0
 8001654:	e006      	b.n	8001664 <_ZN11Taskhandler11IsErrorTaskEv+0x28>

     bool isTaskUpdateRequest = _isErrorTaskUpdateRequest;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
     _isErrorTaskUpdateRequest = false;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	711a      	strb	r2, [r3, #4]
     return isTaskUpdateRequest;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_ZN11Taskhandler11IsDriveTaskEv>:

bool Taskhandler::IsDriveTask()
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if(!_isDriveTaskUpdateEnable)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7adb      	ldrb	r3, [r3, #11]
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <_ZN11Taskhandler11IsDriveTaskEv+0x1a>
		return false;
 8001686:	2300      	movs	r3, #0
 8001688:	e006      	b.n	8001698 <_ZN11Taskhandler11IsDriveTaskEv+0x28>

     bool isTaskUpdateRequest = _isDriveTaskUpdateRequest;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	799b      	ldrb	r3, [r3, #6]
 800168e:	73fb      	strb	r3, [r7, #15]
     _isDriveTaskUpdateRequest = false;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	719a      	strb	r2, [r3, #6]
     return isTaskUpdateRequest;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_ZN11Taskhandler13IsEncoderTaskEv>:

bool Taskhandler::IsEncoderTask()
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if(!_isEncoderTaskUpdateEnable)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7a9b      	ldrb	r3, [r3, #10]
 80016b0:	f083 0301 	eor.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <_ZN11Taskhandler13IsEncoderTaskEv+0x1a>
		return false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e006      	b.n	80016cc <_ZN11Taskhandler13IsEncoderTaskEv+0x28>

     bool isTaskUpdateRequest = _isEncoderTaskUpdateRequest;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	795b      	ldrb	r3, [r3, #5]
 80016c2:	73fb      	strb	r3, [r7, #15]
     _isEncoderTaskUpdateRequest = false;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	715a      	strb	r2, [r3, #5]
     return isTaskUpdateRequest;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_ZN11Taskhandler9IsLedTaskEv>:

bool Taskhandler::IsLedTask()
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if(!_isLedTaskUpdateEnable)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
 80016e4:	f083 0301 	eor.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <_ZN11Taskhandler9IsLedTaskEv+0x1a>
		return false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e006      	b.n	8001700 <_ZN11Taskhandler9IsLedTaskEv+0x28>

     bool isTaskUpdateRequest = _isLedTaskUpdateRequest;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	79db      	ldrb	r3, [r3, #7]
 80016f6:	73fb      	strb	r3, [r7, #15]
     _isLedTaskUpdateRequest = false;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	71da      	strb	r2, [r3, #7]
     return isTaskUpdateRequest;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_ZN11Taskhandler16IsControllerTaskEv>:

bool Taskhandler::IsControllerTask()
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(!_isControllerUpdateEnable)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7b5b      	ldrb	r3, [r3, #13]
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_ZN11Taskhandler16IsControllerTaskEv+0x1a>
		return false;
 8001722:	2300      	movs	r3, #0
 8001724:	e006      	b.n	8001734 <_ZN11Taskhandler16IsControllerTaskEv+0x28>

	bool isTaskUpdateRequest = _isControllerUpdateReques;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7a1b      	ldrb	r3, [r3, #8]
 800172a:	73fb      	strb	r3, [r7, #15]
	_isControllerUpdateReques = false;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	721a      	strb	r2, [r3, #8]
	return isTaskUpdateRequest;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZN11Taskhandler18SetErrorTaskEnableEb>:

bool Taskhandler::SetErrorTaskEnable(bool status)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
	_isErrorTaksUpdateEnable = status;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	725a      	strb	r2, [r3, #9]
}
 8001752:	bf00      	nop
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_ZN11Taskhandler18SetDriveTaskEnableEb>:

bool Taskhandler::SetDriveTaskEnable(bool status)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
	_isDriveTaskUpdateEnable = status;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	72da      	strb	r2, [r3, #11]
}
 8001772:	bf00      	nop
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZN11Taskhandler20SetEncoderTaskEnableEb>:

bool Taskhandler::SetEncoderTaskEnable(bool status)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
	_isEncoderTaskUpdateEnable = status;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	729a      	strb	r2, [r3, #10]
}
 8001792:	bf00      	nop
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZN11Taskhandler16SetLedTaskEnableEb>:

bool Taskhandler::SetLedTaskEnable(bool status)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
	_isLedTaskUpdateEnable = status;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	731a      	strb	r2, [r3, #12]
}
 80017b2:	bf00      	nop
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_ZN11Taskhandler23SetControllerTaskEnableEb>:

bool Taskhandler::SetControllerTaskEnable(bool status)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
	_isControllerUpdateEnable = status;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	735a      	strb	r2, [r3, #13]
}
 80017d2:	bf00      	nop
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00c f813 	bl	800d824 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001800:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001804:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800180c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001828:	2204      	movs	r2, #4
 800182a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800182e:	2200      	movs	r2, #0
 8001830:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800183a:	2201      	movs	r2, #1
 800183c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800184e:	2200      	movs	r2, #0
 8001850:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001868:	4817      	ldr	r0, [pc, #92]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800186a:	f001 f913 	bl	8002a94 <HAL_ADC_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001874:	f000 f9ae 	bl	8001bd4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	4811      	ldr	r0, [pc, #68]	; (80018c8 <MX_ADC1_Init+0xe8>)
 8001884:	f001 fea0 	bl	80035c8 <HAL_ADCEx_MultiModeConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800188e:	f000 f9a1 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_ADC1_Init+0xec>)
 8001894:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001896:	2306      	movs	r3, #6
 8001898:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800189e:	237f      	movs	r3, #127	; 0x7f
 80018a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018a2:	2304      	movs	r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_ADC1_Init+0xe8>)
 80018b0:	f001 fa74 	bl	8002d9c <HAL_ADC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018ba:	f000 f98b 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3730      	adds	r7, #48	; 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001f0 	.word	0x200001f0
 80018cc:	0c900008 	.word	0x0c900008

080018d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09a      	sub	sp, #104	; 0x68
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2244      	movs	r2, #68	; 0x44
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00b ff97 	bl	800d824 <memset>
  if(adcHandle->Instance==ADC1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fe:	d134      	bne.n	800196a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001904:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001906:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fcef 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800191c:	f000 f95a 	bl	8001bd4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 8001926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8001950:	2304      	movs	r3, #4
 8001952:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001954:	2303      	movs	r3, #3
 8001956:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f001 ffe3 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800196a:	bf00      	nop
 800196c:	3768      	adds	r7, #104	; 0x68
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <MX_GPIO_Init+0x114>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a3e      	ldr	r2, [pc, #248]	; (8001a8c <MX_GPIO_Init+0x114>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b3c      	ldr	r3, [pc, #240]	; (8001a8c <MX_GPIO_Init+0x114>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <MX_GPIO_Init+0x114>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <MX_GPIO_Init+0x114>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <MX_GPIO_Init+0x114>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <MX_GPIO_Init+0x114>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a32      	ldr	r2, [pc, #200]	; (8001a8c <MX_GPIO_Init+0x114>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <MX_GPIO_Init+0x114>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LEDG_Pin|LEDR_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2103      	movs	r1, #3
 80019da:	482d      	ldr	r0, [pc, #180]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019dc:	f002 f942 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_MOT_CH2R_Pin|EN_MOT_CH2L_Pin|EN_MOT_CH1L_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f002 f93b 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOT_CH1R_GPIO_Port, EN_MOT_CH1R_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	4828      	ldr	r0, [pc, #160]	; (8001a94 <MX_GPIO_Init+0x11c>)
 80019f4:	f002 f936 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LEDG_Pin|LEDR_Pin;
 80019f8:	2303      	movs	r3, #3
 80019fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4820      	ldr	r0, [pc, #128]	; (8001a90 <MX_GPIO_Init+0x118>)
 8001a10:	f001 ff8e 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REF_MOT2_Pin;
 8001a14:	2308      	movs	r3, #8
 8001a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REF_MOT2_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f001 ff81 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN_MOT_CH2R_Pin|EN_MOT_CH2L_Pin|EN_MOT_CH1L_Pin;
 8001a2e:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f001 ff71 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REF_MOT1_Pin;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REF_MOT1_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_GPIO_Init+0x11c>)
 8001a62:	f001 ff65 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_MOT_CH1R_Pin;
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_MOT_CH1R_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_GPIO_Init+0x11c>)
 8001a7e:	f001 ff57 	bl	8003930 <HAL_GPIO_Init>

}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48001400 	.word	0x48001400
 8001a94:	48000400 	.word	0x48000400

08001a98 <_ZN15ApplicationMainD1Ev>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim15;
extern TIM_HandleTypeDef htim16;

class ApplicationMain
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	332c      	adds	r3, #44	; 0x2c
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb49 	bl	800113c <_ZN7AMT102VD1Ev>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3314      	adds	r3, #20
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb44 	bl	800113c <_ZN7AMT102VD1Ev>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac4:	f000 fd9f 	bl	8002606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac8:	f000 f818 	bl	8001afc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001acc:	f7ff ff54 	bl	8001978 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ad0:	f7ff fe86 	bl	80017e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ad4:	f000 f982 	bl	8001ddc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ad8:	f000 f9da 	bl	8001e90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001adc:	f000 fa2c 	bl	8001f38 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ae0:	f000 fa9a 	bl	8002018 <MX_TIM4_Init>
  MX_TIM17_Init();
 8001ae4:	f000 fae6 	bl	80020b4 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001ae8:	f000 fca2 	bl	8002430 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8001aec:	f00b f8d2 	bl	800cc94 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  applicationMain.StartUp();
 8001af0:	4801      	ldr	r0, [pc, #4]	; (8001af8 <main+0x38>)
 8001af2:	f7fe fded 	bl	80006d0 <_ZN15ApplicationMain7StartUpEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <main+0x36>
 8001af8:	2000025c 	.word	0x2000025c

08001afc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	; 0x50
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0318 	add.w	r3, r7, #24
 8001b06:	2238      	movs	r2, #56	; 0x38
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00b fe8a 	bl	800d824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b22:	f003 fe05 	bl	8005730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001b26:	2322      	movs	r3, #34	; 0x22
 8001b28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b34:	2301      	movs	r3, #1
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001b44:	230f      	movs	r3, #15
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fe9d 	bl	8005898 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8001b6e:	f000 f831 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	230f      	movs	r3, #15
 8001b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b76:	2303      	movs	r3, #3
 8001b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 f996 	bl	8005ebc <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001ba0:	f000 f818 	bl	8001bd4 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0x18>
		applicationMain.taskhandler.UpdateTaskhandler();
 8001bbe:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001bc0:	f7ff fce0 	bl	8001584 <_ZN11Taskhandler17UpdateTaskhandlerEv>
	}

}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	2000025c 	.word	0x2000025c

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d102      	bne.n	8001c00 <_Z41__static_initialization_and_destruction_0ii+0x20>
  ApplicationMain applicationMain = ApplicationMain();
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001bfc:	f7fe fc8a 	bl	8000514 <_ZN15ApplicationMainC1Ev>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d102      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c12:	f7ff ff41 	bl	8001a98 <_ZN15ApplicationMainD1Ev>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000025c 	.word	0x2000025c

08001c24 <_GLOBAL__sub_I_applicationMain>:
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff ffd7 	bl	8001be0 <_Z41__static_initialization_and_destruction_0ii>
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_GLOBAL__sub_D_applicationMain>:
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ffcf 	bl	8001be0 <_Z41__static_initialization_and_destruction_0ii>
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_MspInit+0x44>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_MspInit+0x44>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6613      	str	r3, [r2, #96]	; 0x60
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_MspInit+0x44>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_MspInit+0x44>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_MspInit+0x44>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_MspInit+0x44>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c7a:	f003 fdfd 	bl	8005878 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 fce8 	bl	80026ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USB_LP_IRQHandler+0x10>)
 8001ce6:	f002 f8df 	bl	8003ea8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000142c 	.word	0x2000142c

08001cf4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <TIM4_IRQHandler+0x10>)
 8001cfa:	f005 f8cf 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000628 	.word	0x20000628

08001d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_kill>:

int _kill(int pid, int sig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d22:	f00b fddb 	bl	800d8dc <__errno>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2216      	movs	r2, #22
 8001d2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_exit>:

void _exit (int status)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffe7 	bl	8001d18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4a:	e7fe      	b.n	8001d4a <_exit+0x12>

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f00b fdae 	bl	800d8dc <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20008000 	.word	0x20008000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000540 	.word	0x20000540
 8001db4:	20001a78 	.word	0x20001a78

08001db8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00b fd1a 	bl	800d824 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <MX_TIM1_Init+0xb0>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e52:	f004 feef 	bl	8006c34 <HAL_TIM_Encoder_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001e5c:	f7ff feba 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM1_Init+0xac>)
 8001e72:	f005 ffed 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001e7c:	f7ff feaa 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000544 	.word	0x20000544
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f00b fcc0 	bl	800d824 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001f02:	f004 fe97 	bl	8006c34 <HAL_TIM_Encoder_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f0c:	f7ff fe62 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_TIM2_Init+0xa4>)
 8001f1e:	f005 ff97 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f28:	f7ff fe54 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000590 	.word	0x20000590

08001f38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	615a      	str	r2, [r3, #20]
 8001f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <MX_TIM3_Init+0xdc>)
 8001f60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5999;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f70:	f241 726f 	movw	r2, #5999	; 0x176f
 8001f74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f82:	4823      	ldr	r0, [pc, #140]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001f84:	f004 fc68 	bl	8006858 <HAL_TIM_PWM_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f8e:	f7ff fe21 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481b      	ldr	r0, [pc, #108]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001fa2:	f005 ff55 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001fac:	f7ff fe12 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb0:	2360      	movs	r3, #96	; 0x60
 8001fb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4812      	ldr	r0, [pc, #72]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001fc8:	f005 f8b8 	bl	800713c <HAL_TIM_PWM_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001fd2:	f7ff fdff 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001fde:	f005 f8ad 	bl	800713c <HAL_TIM_PWM_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001fe8:	f7ff fdf4 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	220c      	movs	r2, #12
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_TIM3_Init+0xd8>)
 8001ff4:	f005 f8a2 	bl	800713c <HAL_TIM_PWM_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001ffe:	f7ff fde9 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <MX_TIM3_Init+0xd8>)
 8002004:	f000 f99c 	bl	8002340 <HAL_TIM_MspPostInit>

}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200005dc 	.word	0x200005dc
 8002014:	40000400 	.word	0x40000400

08002018 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_TIM4_Init+0x94>)
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <MX_TIM4_Init+0x98>)
 800203a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <MX_TIM4_Init+0x94>)
 800203e:	2201      	movs	r2, #1
 8002040:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_TIM4_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <MX_TIM4_Init+0x94>)
 800204a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800204e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <MX_TIM4_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_TIM4_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800205c:	4813      	ldr	r0, [pc, #76]	; (80020ac <MX_TIM4_Init+0x94>)
 800205e:	f004 fb39 	bl	80066d4 <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002068:	f7ff fdb4 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	4619      	mov	r1, r3
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <MX_TIM4_Init+0x94>)
 800207a:	f005 f973 	bl	8007364 <HAL_TIM_ConfigClockSource>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002084:	f7ff fda6 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_TIM4_Init+0x94>)
 8002096:	f005 fedb 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80020a0:	f7ff fd98 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000628 	.word	0x20000628
 80020b0:	40000800 	.word	0x40000800

080020b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b094      	sub	sp, #80	; 0x50
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ce:	463b      	mov	r3, r7
 80020d0:	2234      	movs	r2, #52	; 0x34
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f00b fba5 	bl	800d824 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <MX_TIM17_Init+0xec>)
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <MX_TIM17_Init+0xf0>)
 80020de:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <MX_TIM17_Init+0xec>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <MX_TIM17_Init+0xec>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5999;
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <MX_TIM17_Init+0xec>)
 80020ee:	f241 726f 	movw	r2, #5999	; 0x176f
 80020f2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <MX_TIM17_Init+0xec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <MX_TIM17_Init+0xec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <MX_TIM17_Init+0xec>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002106:	4826      	ldr	r0, [pc, #152]	; (80021a0 <MX_TIM17_Init+0xec>)
 8002108:	f004 fae4 	bl	80066d4 <HAL_TIM_Base_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002112:	f7ff fd5f 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002116:	4822      	ldr	r0, [pc, #136]	; (80021a0 <MX_TIM17_Init+0xec>)
 8002118:	f004 fb9e 	bl	8006858 <HAL_TIM_PWM_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002122:	f7ff fd57 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002126:	2360      	movs	r3, #96	; 0x60
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212e:	2300      	movs	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002132:	2300      	movs	r3, #0
 8002134:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002146:	2200      	movs	r2, #0
 8002148:	4619      	mov	r1, r3
 800214a:	4815      	ldr	r0, [pc, #84]	; (80021a0 <MX_TIM17_Init+0xec>)
 800214c:	f004 fff6 	bl	800713c <HAL_TIM_PWM_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002156:	f7ff fd3d 	bl	8001bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800216e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002172:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800217c:	463b      	mov	r3, r7
 800217e:	4619      	mov	r1, r3
 8002180:	4807      	ldr	r0, [pc, #28]	; (80021a0 <MX_TIM17_Init+0xec>)
 8002182:	f005 fee7 	bl	8007f54 <HAL_TIMEx_ConfigBreakDeadTime>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800218c:	f7ff fd22 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <MX_TIM17_Init+0xec>)
 8002192:	f000 f8d5 	bl	8002340 <HAL_TIM_MspPostInit>

}
 8002196:	bf00      	nop
 8002198:	3750      	adds	r7, #80	; 0x50
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000674 	.word	0x20000674
 80021a4:	40014800 	.word	0x40014800

080021a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12a      	bne.n	8002220 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d4:	6613      	str	r3, [r2, #96]	; 0x60
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a28      	ldr	r2, [pc, #160]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_B_Pin|ENCODER1_A_Pin;
 80021fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800220c:	2306      	movs	r3, #6
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f001 fb89 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800221e:	e02d      	b.n	800227c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d128      	bne.n	800227c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226a:	2301      	movs	r3, #1
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f001 fb5a 	bl	8003930 <HAL_GPIO_Init>
}
 800227c:	bf00      	nop
 800227e:	3730      	adds	r7, #48	; 0x30
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_TIM_PWM_MspInit+0x38>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10b      	bne.n	80022b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_TIM_Base_MspInit+0x68>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d114      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_TIM_Base_MspInit+0x6c>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_TIM_Base_MspInit+0x6c>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_TIM_Base_MspInit+0x6c>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	201e      	movs	r0, #30
 80022fc:	f001 fae3 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002300:	201e      	movs	r0, #30
 8002302:	f001 fafa 	bl	80038fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002306:	e010      	b.n	800232a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM17)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_TIM_Base_MspInit+0x70>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10b      	bne.n	800232a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_TIM_Base_MspInit+0x6c>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_TIM_Base_MspInit+0x6c>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6613      	str	r3, [r2, #96]	; 0x60
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_TIM_Base_MspInit+0x6c>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40000800 	.word	0x40000800
 8002338:	40021000 	.word	0x40021000
 800233c:	40014800 	.word	0x40014800

08002340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a30      	ldr	r2, [pc, #192]	; (8002420 <HAL_TIM_MspPostInit+0xe0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d139      	bne.n	80023d6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a29      	ldr	r2, [pc, #164]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB7     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN_MOT_CH2R_Pin|IN_MOT_CH2L_Pin;
 8002392:	2350      	movs	r3, #80	; 0x50
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023a2:	2302      	movs	r3, #2
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f001 fabe 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_MOT_CH1L_Pin;
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80023c4:	230a      	movs	r3, #10
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN_MOT_CH1L_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4816      	ldr	r0, [pc, #88]	; (8002428 <HAL_TIM_MspPostInit+0xe8>)
 80023d0:	f001 faae 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80023d4:	e020      	b.n	8002418 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM17)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_TIM_MspPostInit+0xec>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_TIM_MspPostInit+0xe4>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN_MOT_CH1R_Pin;
 80023f8:	2320      	movs	r3, #32
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002408:	230a      	movs	r3, #10
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN_MOT_CH1R_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_TIM_MspPostInit+0xe8>)
 8002414:	f001 fa8c 	bl	8003930 <HAL_GPIO_Init>
}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40000400 	.word	0x40000400
 8002424:	40021000 	.word	0x40021000
 8002428:	48000400 	.word	0x48000400
 800242c:	40014800 	.word	0x40014800

08002430 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002436:	4a23      	ldr	r2, [pc, #140]	; (80024c4 <MX_USART2_UART_Init+0x94>)
 8002438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800243c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002456:	220c      	movs	r2, #12
 8002458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002478:	4811      	ldr	r0, [pc, #68]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800247a:	f005 fe3d 	bl	80080f8 <HAL_UART_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002484:	f7ff fba6 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002488:	2100      	movs	r1, #0
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800248c:	f006 fba8 	bl	8008be0 <HAL_UARTEx_SetTxFifoThreshold>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002496:	f7ff fb9d 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800249a:	2100      	movs	r1, #0
 800249c:	4808      	ldr	r0, [pc, #32]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 800249e:	f006 fbdd 	bl	8008c5c <HAL_UARTEx_SetRxFifoThreshold>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80024a8:	f7ff fb94 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <MX_USART2_UART_Init+0x90>)
 80024ae:	f006 fb5e 	bl	8008b6e <HAL_UARTEx_DisableFifoMode>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80024b8:	f7ff fb8c 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200006c0 	.word	0x200006c0
 80024c4:	40004400 	.word	0x40004400

080024c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09c      	sub	sp, #112	; 0x70
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e0:	f107 0318 	add.w	r3, r7, #24
 80024e4:	2244      	movs	r2, #68	; 0x44
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00b f99b 	bl	800d824 <memset>
  if(uartHandle->Instance==USART2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_UART_MspInit+0xe0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d153      	bne.n	80025a0 <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fef5 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002510:	f7ff fb60 	bl	8001bd4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_UART_MspInit+0xe4>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_UART_MspInit+0xe4>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_UART_MspInit+0xe4>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_UART_MspInit+0xe4>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_UART_MspInit+0xe4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_UART_MspInit+0xe4>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_UART_MspInit+0xe4>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_UART_MspInit+0xe4>)
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_UART_MspInit+0xe4>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800255c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256e:	2307      	movs	r3, #7
 8002570:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257c:	f001 f9d8 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002580:	2308      	movs	r3, #8
 8002582:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002590:	2307      	movs	r3, #7
 8002592:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002598:	4619      	mov	r1, r3
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <HAL_UART_MspInit+0xe8>)
 800259c:	f001 f9c8 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025a0:	bf00      	nop
 80025a2:	3770      	adds	r7, #112	; 0x70
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40004400 	.word	0x40004400
 80025ac:	40021000 	.word	0x40021000
 80025b0:	48000400 	.word	0x48000400

080025b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025b4:	480d      	ldr	r0, [pc, #52]	; (80025ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80025b8:	f7ff fbfe 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80025be:	490d      	ldr	r1, [pc, #52]	; (80025f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <LoopForever+0xe>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025c4:	e002      	b.n	80025cc <LoopCopyDataInit>

080025c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ca:	3304      	adds	r3, #4

080025cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d0:	d3f9      	bcc.n	80025c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80025d4:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <LoopForever+0x16>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d8:	e001      	b.n	80025de <LoopFillZerobss>

080025da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025dc:	3204      	adds	r2, #4

080025de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e0:	d3fb      	bcc.n	80025da <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80025e2:	f00b f981 	bl	800d8e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025e6:	f7ff fa6b 	bl	8001ac0 <main>

080025ea <LoopForever>:

LoopForever:
    b LoopForever
 80025ea:	e7fe      	b.n	80025ea <LoopForever>
  ldr   r0, =_estack
 80025ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025f8:	0800dac4 	.word	0x0800dac4
  ldr r2, =_sbss
 80025fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002600:	20001a74 	.word	0x20001a74

08002604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002604:	e7fe      	b.n	8002604 <ADC1_2_IRQHandler>

08002606 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f001 f94d 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002616:	200f      	movs	r0, #15
 8002618:	f000 f80e 	bl	8002638 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	e001      	b.n	800262c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002628:	f7ff fb0c 	bl	8001c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800262c:	79fb      	ldrb	r3, [r7, #7]

}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_InitTick+0x68>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d022      	beq.n	8002692 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_InitTick+0x6c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_InitTick+0x68>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002658:	fbb1 f3f3 	udiv	r3, r1, r3
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f958 	bl	8003916 <HAL_SYSTICK_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	d809      	bhi.n	8002686 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002672:	2200      	movs	r2, #0
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	f04f 30ff 	mov.w	r0, #4294967295
 800267a:	f001 f924 	bl	80038c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <HAL_InitTick+0x70>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e007      	b.n	8002696 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	e004      	b.n	8002696 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e001      	b.n	8002696 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000008 	.word	0x20000008
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_IncTick+0x1c>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_IncTick+0x20>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_IncTick+0x1c>)
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	20000754 	.word	0x20000754
 80026cc:	20000008 	.word	0x20000008

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000754 	.word	0x20000754

080026e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3360      	adds	r3, #96	; 0x60
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <LL_ADC_SetOffset+0x44>)
 8002772:	4013      	ands	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	4313      	orrs	r3, r2
 8002780:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	03fff000 	.word	0x03fff000

08002798 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3360      	adds	r3, #96	; 0x60
 80027a6:	461a      	mov	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3360      	adds	r3, #96	; 0x60
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3360      	adds	r3, #96	; 0x60
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	431a      	orrs	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3360      	adds	r3, #96	; 0x60
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	431a      	orrs	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	615a      	str	r2, [r3, #20]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3330      	adds	r3, #48	; 0x30
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	4413      	add	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	211f      	movs	r1, #31
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 011f 	and.w	r1, r3, #31
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3314      	adds	r3, #20
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0e5b      	lsrs	r3, r3, #25
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2107      	movs	r1, #7
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0d1b      	lsrs	r3, r3, #20
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0318 	and.w	r3, r3, #24
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002960:	40d9      	lsrs	r1, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	400b      	ands	r3, r1
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	0007ffff 	.word	0x0007ffff

08002984 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002994:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6093      	str	r3, [r2, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029bc:	d101      	bne.n	80029c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0c:	d101      	bne.n	8002a12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <LL_ADC_IsEnabled+0x18>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <LL_ADC_IsEnabled+0x1a>
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e167      	b.n	8002d7e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fe ff07 	bl	80018d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff67 	bl	80029a8 <LL_ADC_IsDeepPowerDownEnabled>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff4d 	bl	8002984 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff82 	bl	80029f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff66 	bl	80029d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b04:	4ba0      	ldr	r3, [pc, #640]	; (8002d88 <HAL_ADC_Init+0x2f4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	4aa0      	ldr	r2, [pc, #640]	; (8002d8c <HAL_ADC_Init+0x2f8>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b18:	e002      	b.n	8002b20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff64 	bl	80029f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff75 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002b5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8100 	bne.w	8002d6c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80fc 	bne.w	8002d6c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff49 	bl	8002a20 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b98:	f7ff ff42 	bl	8002a20 <LL_ADC_IsEnabled>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	487c      	ldr	r0, [pc, #496]	; (8002d90 <HAL_ADC_Init+0x2fc>)
 8002ba0:	f7ff ff3e 	bl	8002a20 <LL_ADC_IsEnabled>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4323      	orrs	r3, r4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4878      	ldr	r0, [pc, #480]	; (8002d94 <HAL_ADC_Init+0x300>)
 8002bb4:	f7ff fd98 	bl	80026e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7f5b      	ldrb	r3, [r3, #29]
 8002bbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	045b      	lsls	r3, r3, #17
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	4b60      	ldr	r3, [pc, #384]	; (8002d98 <HAL_ADC_Init+0x304>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff14 	bl	8002a6c <LL_ADC_INJ_IsConversionOngoing>
 8002c44:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d16d      	bne.n	8002d28 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d16a      	bne.n	8002d28 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c56:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c5e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6e:	f023 0302 	bic.w	r3, r3, #2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	69b9      	ldr	r1, [r7, #24]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ca0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6911      	ldr	r1, [r2, #16]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cb2:	e013      	b.n	8002cdc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d118      	bne.n	8002d18 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cfc:	4311      	orrs	r1, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	e007      	b.n	8002d28 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f023 010f 	bic.w	r1, r3, #15
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
 8002d48:	e007      	b.n	8002d5a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 020f 	bic.w	r2, r2, #15
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d6a:	e007      	b.n	8002d7c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	053e2d63 	.word	0x053e2d63
 8002d90:	50000100 	.word	0x50000100
 8002d94:	50000300 	.word	0x50000300
 8002d98:	fff04007 	.word	0xfff04007

08002d9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b0b6      	sub	sp, #216	; 0xd8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x22>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e3c8      	b.n	8003550 <HAL_ADC_ConfigChannel+0x7b4>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe3b 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 83ad 	bne.w	8003532 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	f7ff fd51 	bl	800288c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe29 	bl	8002a46 <LL_ADC_REG_IsConversionOngoing>
 8002df4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe35 	bl	8002a6c <LL_ADC_INJ_IsConversionOngoing>
 8002e02:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 81d9 	bne.w	80031c2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 81d4 	bne.w	80031c2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e22:	d10f      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7ff fd58 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd12 	bl	8002866 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e42:	e00e      	b.n	8002e62 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f7ff fd47 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fd02 	bl	8002866 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d022      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6919      	ldr	r1, [r3, #16]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e94:	f7ff fc5c 	bl	8002750 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6919      	ldr	r1, [r3, #16]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f7ff fca8 	bl	80027fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d102      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x124>
 8002eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebe:	e000      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x126>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f7ff fcb4 	bl	8002830 <LL_ADC_SetOffsetSaturation>
 8002ec8:	e17b      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fc61 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x15a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fc56 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8002eec:	4603      	mov	r3, r0
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	e01e      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x198>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fc4b 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1b0>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	e018      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1e2>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e004      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d106      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fc1a 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fbfe 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x220>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fbf3 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 021f 	and.w	r2, r3, #31
 8002fba:	e01e      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x25e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fbe8 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002fe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e004      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x276>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	e018      	b.n	8003044 <HAL_ADC_ConfigChannel+0x2a8>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800302a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800302e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e004      	b.n	8003044 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800303a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fbb7 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fb9b 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x2e6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fb90 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	e01e      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x324>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fb85 	bl	8002798 <LL_ADC_GetOffsetChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80030a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80030a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80030b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x33c>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	e016      	b.n	8003106 <HAL_ADC_ConfigChannel+0x36a>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e004      	b.n	8003106 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80030fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003106:	429a      	cmp	r2, r3
 8003108:	d106      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fb56 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2103      	movs	r1, #3
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fb3a 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x3a8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2103      	movs	r1, #3
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fb2f 	bl	8002798 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	e017      	b.n	8003174 <HAL_ADC_ConfigChannel+0x3d8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2103      	movs	r1, #3
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fb24 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800315c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800315e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e003      	b.n	8003172 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800316a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_ADC_ConfigChannel+0x3f0>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	e011      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x414>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800319a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d106      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2103      	movs	r1, #3
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fb01 	bl	80027c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fc2a 	bl	8002a20 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 8140 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f7ff fbab 	bl	800293c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a8f      	ldr	r2, [pc, #572]	; (8003428 <HAL_ADC_ConfigChannel+0x68c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	f040 8131 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <HAL_ADC_ConfigChannel+0x47e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	3301      	adds	r3, #1
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2b09      	cmp	r3, #9
 8003210:	bf94      	ite	ls
 8003212:	2301      	movls	r3, #1
 8003214:	2300      	movhi	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e019      	b.n	800324e <HAL_ADC_ConfigChannel+0x4b2>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800322a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800322c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2b09      	cmp	r3, #9
 8003246:	bf94      	ite	ls
 8003248:	2301      	movls	r3, #1
 800324a:	2300      	movhi	r3, #0
 800324c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324e:	2b00      	cmp	r3, #0
 8003250:	d079      	beq.n	8003346 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d107      	bne.n	800326e <HAL_ADC_ConfigChannel+0x4d2>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	3301      	adds	r3, #1
 8003266:	069b      	lsls	r3, r3, #26
 8003268:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800326c:	e015      	b.n	800329a <HAL_ADC_ConfigChannel+0x4fe>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800327c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e003      	b.n	8003292 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	069b      	lsls	r3, r3, #26
 8003296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x51e>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	e017      	b.n	80032ea <HAL_ADC_ConfigChannel+0x54e>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80032d2:	2320      	movs	r3, #32
 80032d4:	e003      	b.n	80032de <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80032d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	ea42 0103 	orr.w	r1, r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x574>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	3301      	adds	r3, #1
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	051b      	lsls	r3, r3, #20
 800330e:	e018      	b.n	8003342 <HAL_ADC_ConfigChannel+0x5a6>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e003      	b.n	8003334 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003342:	430b      	orrs	r3, r1
 8003344:	e081      	b.n	800344a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x5c6>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	069b      	lsls	r3, r3, #26
 800335c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003360:	e015      	b.n	800338e <HAL_ADC_ConfigChannel+0x5f2>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	069b      	lsls	r3, r3, #26
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x612>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	e017      	b.n	80033de <HAL_ADC_ConfigChannel+0x642>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	61fb      	str	r3, [r7, #28]
  return result;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <HAL_ADC_ConfigChannel+0x66e>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	3301      	adds	r3, #1
 80033f6:	f003 021f 	and.w	r2, r3, #31
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	3b1e      	subs	r3, #30
 8003402:	051b      	lsls	r3, r3, #20
 8003404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003408:	e01e      	b.n	8003448 <HAL_ADC_ConfigChannel+0x6ac>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	613b      	str	r3, [r7, #16]
  return result;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e006      	b.n	8003434 <HAL_ADC_ConfigChannel+0x698>
 8003426:	bf00      	nop
 8003428:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f003 021f 	and.w	r2, r3, #31
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	3b1e      	subs	r3, #30
 8003442:	051b      	lsls	r3, r3, #20
 8003444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003448:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344e:	4619      	mov	r1, r3
 8003450:	f7ff fa48 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_ADC_ConfigChannel+0x7bc>)
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d071      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003460:	483e      	ldr	r0, [pc, #248]	; (800355c <HAL_ADC_ConfigChannel+0x7c0>)
 8003462:	f7ff f967 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 8003466:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3c      	ldr	r2, [pc, #240]	; (8003560 <HAL_ADC_ConfigChannel+0x7c4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_ADC_ConfigChannel+0x6e2>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a3a      	ldr	r2, [pc, #232]	; (8003564 <HAL_ADC_ConfigChannel+0x7c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d127      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d121      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003492:	d157      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800349c:	4619      	mov	r1, r3
 800349e:	482f      	ldr	r0, [pc, #188]	; (800355c <HAL_ADC_ConfigChannel+0x7c0>)
 80034a0:	f7ff f935 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_ADC_ConfigChannel+0x7cc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	4a30      	ldr	r2, [pc, #192]	; (800356c <HAL_ADC_ConfigChannel+0x7d0>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034be:	e002      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f9      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034cc:	e03a      	b.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_ADC_ConfigChannel+0x7d4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d113      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a22      	ldr	r2, [pc, #136]	; (8003574 <HAL_ADC_ConfigChannel+0x7d8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02a      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f6:	4619      	mov	r1, r3
 80034f8:	4818      	ldr	r0, [pc, #96]	; (800355c <HAL_ADC_ConfigChannel+0x7c0>)
 80034fa:	f7ff f908 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034fe:	e021      	b.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_ADC_ConfigChannel+0x7dc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d11c      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800350a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_ADC_ConfigChannel+0x7d8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d011      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003528:	4619      	mov	r1, r3
 800352a:	480c      	ldr	r0, [pc, #48]	; (800355c <HAL_ADC_ConfigChannel+0x7c0>)
 800352c:	f7ff f8ef 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
 8003530:	e008      	b.n	8003544 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800354c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003550:	4618      	mov	r0, r3
 8003552:	37d8      	adds	r7, #216	; 0xd8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	80080000 	.word	0x80080000
 800355c:	50000300 	.word	0x50000300
 8003560:	c3210000 	.word	0xc3210000
 8003564:	90c00010 	.word	0x90c00010
 8003568:	20000000 	.word	0x20000000
 800356c:	053e2d63 	.word	0x053e2d63
 8003570:	c7520000 	.word	0xc7520000
 8003574:	50000100 	.word	0x50000100
 8003578:	cb840000 	.word	0xcb840000

0800357c <LL_ADC_IsEnabled>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <LL_ADC_IsEnabled+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_IsEnabled+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d101      	bne.n	80035ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b0a1      	sub	sp, #132	; 0x84
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e08b      	b.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ee:	2300      	movs	r3, #0
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035f2:	2300      	movs	r3, #0
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fe:	d102      	bne.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003600:	4b41      	ldr	r3, [pc, #260]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	e001      	b.n	800360a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e06a      	b.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ffb9 	bl	80035a2 <LL_ADC_REG_IsConversionOngoing>
 8003630:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ffb3 	bl	80035a2 <LL_ADC_REG_IsConversionOngoing>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d14c      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003644:	2b00      	cmp	r3, #0
 8003646:	d149      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800364a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d028      	beq.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003666:	035b      	lsls	r3, r3, #13
 8003668:	430b      	orrs	r3, r1
 800366a:	431a      	orrs	r2, r3
 800366c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003674:	f7ff ff82 	bl	800357c <LL_ADC_IsEnabled>
 8003678:	4604      	mov	r4, r0
 800367a:	4823      	ldr	r0, [pc, #140]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800367c:	f7ff ff7e 	bl	800357c <LL_ADC_IsEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	4323      	orrs	r3, r4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d133      	bne.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003690:	f023 030f 	bic.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6811      	ldr	r1, [r2, #0]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	430a      	orrs	r2, r1
 800369e:	431a      	orrs	r2, r3
 80036a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036a4:	e024      	b.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036b6:	f7ff ff61 	bl	800357c <LL_ADC_IsEnabled>
 80036ba:	4604      	mov	r4, r0
 80036bc:	4812      	ldr	r0, [pc, #72]	; (8003708 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036be:	f7ff ff5d 	bl	800357c <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4323      	orrs	r3, r4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d112      	bne.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036da:	e009      	b.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036ee:	e000      	b.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3784      	adds	r7, #132	; 0x84
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	50000100 	.word	0x50000100
 800370c:	50000300 	.word	0x50000300

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	; (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	; (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387c:	d301      	bcc.n	8003882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387e:	2301      	movs	r3, #1
 8003880:	e00f      	b.n	80038a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <SysTick_Config+0x40>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388a:	210f      	movs	r1, #15
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f7ff ff8e 	bl	80037b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <SysTick_Config+0x40>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <SysTick_Config+0x40>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff29 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038d4:	f7ff ff40 	bl	8003758 <__NVIC_GetPriorityGrouping>
 80038d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f7ff ff90 	bl	8003804 <NVIC_EncodePriority>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff5f 	bl	80037b0 <__NVIC_SetPriority>
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff33 	bl	8003774 <__NVIC_EnableIRQ>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ffa4 	bl	800386c <SysTick_Config>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800393e:	e15a      	b.n	8003bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 814c 	beq.w	8003bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d005      	beq.n	8003970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800396c:	2b02      	cmp	r3, #2
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0201 	and.w	r2, r3, #1
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d017      	beq.n	8003a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d123      	bne.n	8003a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	6939      	ldr	r1, [r7, #16]
 8003a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	4a5a      	ldr	r2, [pc, #360]	; (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6613      	str	r3, [r2, #96]	; 0x60
 8003ab0:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <HAL_GPIO_Init+0x2e4>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003abc:	4a56      	ldr	r2, [pc, #344]	; (8003c18 <HAL_GPIO_Init+0x2e8>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ae6:	d01f      	beq.n	8003b28 <HAL_GPIO_Init+0x1f8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <HAL_GPIO_Init+0x2ec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d019      	beq.n	8003b24 <HAL_GPIO_Init+0x1f4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_GPIO_Init+0x2f0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_GPIO_Init+0x1f0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_GPIO_Init+0x2f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00d      	beq.n	8003b1c <HAL_GPIO_Init+0x1ec>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a49      	ldr	r2, [pc, #292]	; (8003c28 <HAL_GPIO_Init+0x2f8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <HAL_GPIO_Init+0x1e8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a48      	ldr	r2, [pc, #288]	; (8003c2c <HAL_GPIO_Init+0x2fc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_GPIO_Init+0x1e4>
 8003b10:	2305      	movs	r3, #5
 8003b12:	e00a      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b14:	2306      	movs	r3, #6
 8003b16:	e008      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	e006      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e004      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e002      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_GPIO_Init+0x1fa>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	f002 0203 	and.w	r2, r2, #3
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	4093      	lsls	r3, r2
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b3a:	4937      	ldr	r1, [pc, #220]	; (8003c18 <HAL_GPIO_Init+0x2e8>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b6c:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b72:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b96:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_GPIO_Init+0x300>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae9d 	bne.w	8003940 <HAL_GPIO_Init+0x10>
  }
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	48000400 	.word	0x48000400
 8003c20:	48000800 	.word	0x48000800
 8003c24:	48000c00 	.word	0x48000c00
 8003c28:	48001000 	.word	0x48001000
 8003c2c:	48001400 	.word	0x48001400
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43d9      	mvns	r1, r3
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0c0      	b.n	8003e5c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f009 f9b0 	bl	800d054 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 f84e 	bl	8008da2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e03e      	b.n	8003d8a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	3311      	adds	r3, #17
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3310      	adds	r3, #16
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	3313      	adds	r3, #19
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	3320      	adds	r3, #32
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	3301      	adds	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	791b      	ldrb	r3, [r3, #4]
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d3bb      	bcc.n	8003d0c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e044      	b.n	8003e24 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	3301      	adds	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	791b      	ldrb	r3, [r3, #4]
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3b5      	bcc.n	8003d9a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e3a:	f004 ffcd 	bl	8008dd8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7a9b      	ldrb	r3, [r3, #10]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 fc41 	bl	80056dc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_PCD_Start+0x16>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e012      	b.n	8003ea0 <HAL_PCD_Start+0x3c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f004 ff74 	bl	8008d74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f007 fa34 	bl	800b2fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f007 fa39 	bl	800b32c <USB_ReadInterrupts>
 8003eba:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fb04 	bl	80044d4 <PCD_EP_ISR_Handler>

    return;
 8003ecc:	e110      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	b292      	uxth	r2, r2
 8003eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f009 f940 	bl	800d176 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8fc 	bl	80040f6 <HAL_PCD_SetAddress>

    return;
 8003efe:	e0f7      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00c      	beq.n	8003f24 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f22:	e0e5      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00c      	beq.n	8003f48 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f40:	b292      	uxth	r2, r2
 8003f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f46:	e0d3      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d034      	beq.n	8003fbc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0204 	bic.w	r2, r2, #4
 8003f64:	b292      	uxth	r2, r2
 8003f66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0208 	bic.w	r2, r2, #8
 8003f7c:	b292      	uxth	r2, r2
 8003f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f94:	2100      	movs	r1, #0
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f009 fae0 	bl	800d55c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f009 f923 	bl	800d1e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fb4:	b292      	uxth	r2, r2
 8003fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003fba:	e099      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d027      	beq.n	8004016 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0208 	orr.w	r2, r2, #8
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0204 	orr.w	r2, r2, #4
 8004008:	b292      	uxth	r2, r2
 800400a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f009 f8d0 	bl	800d1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004014:	e06c      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d040      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004032:	b292      	uxth	r2, r2
 8004034:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12b      	bne.n	800409a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0204 	orr.w	r2, r2, #4
 8004054:	b292      	uxth	r2, r2
 8004056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0208 	orr.w	r2, r2, #8
 800406c:	b292      	uxth	r2, r2
 800406e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004082:	b29b      	uxth	r3, r3
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004090:	2101      	movs	r1, #1
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f009 fa62 	bl	800d55c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004098:	e02a      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f009 f88a 	bl	800d1b4 <HAL_PCD_SuspendCallback>
    return;
 80040a0:	e026      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00f      	beq.n	80040cc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040be:	b292      	uxth	r2, r2
 80040c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f009 f848 	bl	800d15a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80040ca:	e011      	b.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e8:	b292      	uxth	r2, r2
 80040ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80040ee:	bf00      	nop
  }
}
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_PCD_SetAddress+0x1a>
 800410c:	2302      	movs	r3, #2
 800410e:	e012      	b.n	8004136 <HAL_PCD_SetAddress+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f007 f8d5 	bl	800b2d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	4608      	mov	r0, r1
 8004148:	4611      	mov	r1, r2
 800414a:	461a      	mov	r2, r3
 800414c:	4603      	mov	r3, r0
 800414e:	70fb      	strb	r3, [r7, #3]
 8004150:	460b      	mov	r3, r1
 8004152:	803b      	strh	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800415c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da0e      	bge.n	8004182 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	f003 0207 	and.w	r2, r3, #7
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	3310      	adds	r3, #16
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	705a      	strb	r2, [r3, #1]
 8004180:	e00e      	b.n	80041a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 0207 	and.w	r2, r3, #7
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041ac:	883a      	ldrh	r2, [r7, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	78ba      	ldrb	r2, [r7, #2]
 80041b6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041b8:	78bb      	ldrb	r3, [r7, #2]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d102      	bne.n	80041c4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_PCD_EP_Open+0x94>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e00e      	b.n	80041f0 <HAL_PCD_EP_Open+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 fe17 	bl	8008e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80041ee:	7afb      	ldrb	r3, [r7, #11]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004208:	2b00      	cmp	r3, #0
 800420a:	da0e      	bge.n	800422a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 0207 	and.w	r2, r3, #7
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	3310      	adds	r3, #16
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	705a      	strb	r2, [r3, #1]
 8004228:	e00e      	b.n	8004248 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 0207 	and.w	r2, r3, #7
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	b2da      	uxtb	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_PCD_EP_Close+0x6a>
 800425e:	2302      	movs	r3, #2
 8004260:	e00e      	b.n	8004280 <HAL_PCD_EP_Close+0x88>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	4618      	mov	r0, r3
 8004272:	f005 f993 	bl	800959c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	460b      	mov	r3, r1
 8004296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 fb4b 	bl	8009976 <USB_EPStartXfer>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	f003 0207 	and.w	r2, r3, #7
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800430c:	681b      	ldr	r3, [r3, #0]
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	460b      	mov	r3, r1
 8004328:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	f003 0207 	and.w	r2, r3, #7
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	3310      	adds	r3, #16
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2201      	movs	r2, #1
 8004364:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004366:	7afb      	ldrb	r3, [r7, #11]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	b2da      	uxtb	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6979      	ldr	r1, [r7, #20]
 8004378:	4618      	mov	r0, r3
 800437a:	f005 fafc 	bl	8009976 <USB_EPStartXfer>

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	7912      	ldrb	r2, [r2, #4]
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e03e      	b.n	8004424 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	da0e      	bge.n	80043cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 0207 	and.w	r2, r3, #7
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	3310      	adds	r3, #16
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	705a      	strb	r2, [r3, #1]
 80043ca:	e00c      	b.n	80043e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_PCD_EP_SetStall+0x7e>
 8004402:	2302      	movs	r3, #2
 8004404:	e00e      	b.n	8004424 <HAL_PCD_EP_SetStall+0x9c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	4618      	mov	r0, r3
 8004416:	f006 fe5f 	bl	800b0d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	7912      	ldrb	r2, [r2, #4]
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e040      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800444a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444e:	2b00      	cmp	r3, #0
 8004450:	da0e      	bge.n	8004470 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 0207 	and.w	r2, r3, #7
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	3310      	adds	r3, #16
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	705a      	strb	r2, [r3, #1]
 800446e:	e00e      	b.n	800448e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	f003 0207 	and.w	r2, r3, #7
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_PCD_EP_ClrStall+0x82>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e00e      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f006 fe5c 	bl	800b17a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b096      	sub	sp, #88	; 0x58
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044dc:	e3ae      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80044ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80044f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8170 	bne.w	80047e2 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d14d      	bne.n	80045aa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	81fb      	strh	r3, [r7, #14]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	89fb      	ldrh	r3, [r7, #14]
 8004526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3310      	adds	r3, #16
 8004536:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004540:	b29b      	uxth	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	4413      	add	r3, r2
 8004552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800455c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	441a      	add	r2, r3
 800456a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800456e:	2100      	movs	r1, #0
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f008 fdd8 	bl	800d126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7b1b      	ldrb	r3, [r3, #12]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 835d 	beq.w	8004c3c <PCD_EP_ISR_Handler+0x768>
 8004582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 8358 	bne.w	8004c3c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7b1b      	ldrb	r3, [r3, #12]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004596:	b2da      	uxtb	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b292      	uxth	r2, r2
 800459e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	731a      	strb	r2, [r3, #12]
 80045a8:	e348      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80045b0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80045bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d032      	beq.n	800462e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80045fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004602:	b29b      	uxth	r3, r3
 8004604:	f006 fee4 	bl	800b3d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004614:	4013      	ands	r3, r2
 8004616:	823b      	strh	r3, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	8a3a      	ldrh	r2, [r7, #16]
 800461e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004622:	b292      	uxth	r2, r2
 8004624:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f008 fd50 	bl	800d0cc <HAL_PCD_SetupStageCallback>
 800462c:	e306      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800462e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004632:	2b00      	cmp	r3, #0
 8004634:	f280 8302 	bge.w	8004c3c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29a      	uxth	r2, r3
 8004640:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004644:	4013      	ands	r3, r2
 8004646:	83fb      	strh	r3, [r7, #30]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	8bfa      	ldrh	r2, [r7, #30]
 800464e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004652:	b292      	uxth	r2, r2
 8004654:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	4413      	add	r3, r2
 8004670:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800467a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800467e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <PCD_EP_ISR_Handler+0x1e6>
 8004686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d015      	beq.n	80046ba <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	6959      	ldr	r1, [r3, #20]
 8004696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004698:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800469a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f006 fe96 	bl	800b3d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80046a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	441a      	add	r2, r3
 80046ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80046b2:	2100      	movs	r1, #0
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f008 fd1b 	bl	800d0f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80046c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 82b5 	bne.w	8004c3c <PCD_EP_ISR_Handler+0x768>
 80046d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046de:	f000 82ad 	beq.w	8004c3c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470c:	b29a      	uxth	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b3e      	cmp	r3, #62	; 0x3e
 8004718:	d91d      	bls.n	8004756 <PCD_EP_ISR_Handler+0x282>
 800471a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	647b      	str	r3, [r7, #68]	; 0x44
 8004722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <PCD_EP_ISR_Handler+0x260>
 800472e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004730:	3b01      	subs	r3, #1
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29a      	uxth	r2, r3
 800473a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29b      	uxth	r3, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	b29b      	uxth	r3, r3
 8004746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474e:	b29a      	uxth	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e026      	b.n	80047a4 <PCD_EP_ISR_Handler+0x2d0>
 8004756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <PCD_EP_ISR_Handler+0x2a0>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476c:	b29a      	uxth	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e017      	b.n	80047a4 <PCD_EP_ISR_Handler+0x2d0>
 8004774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	647b      	str	r3, [r7, #68]	; 0x44
 800477c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <PCD_EP_ISR_Handler+0x2ba>
 8004788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478a:	3301      	adds	r3, #1
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29a      	uxth	r2, r3
 8004794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29b      	uxth	r3, r3
 800479c:	4313      	orrs	r3, r2
 800479e:	b29a      	uxth	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	827b      	strh	r3, [r7, #18]
 80047b6:	8a7b      	ldrh	r3, [r7, #18]
 80047b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047bc:	827b      	strh	r3, [r7, #18]
 80047be:	8a7b      	ldrh	r3, [r7, #18]
 80047c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047c4:	827b      	strh	r3, [r7, #18]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	8a7b      	ldrh	r3, [r7, #18]
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
 80047e0:	e22c      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f280 80f6 	bge.w	80049ec <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29a      	uxth	r2, r3
 8004812:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004816:	4013      	ands	r3, r2
 8004818:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800482e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004832:	b292      	uxth	r2, r2
 8004834:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004836:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800484c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484e:	7b1b      	ldrb	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d123      	bne.n	800489c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	4413      	add	r3, r2
 800486e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004878:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800487c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 808e 	beq.w	80049a2 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488c:	6959      	ldr	r1, [r3, #20]
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	88da      	ldrh	r2, [r3, #6]
 8004892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004896:	f006 fd9b 	bl	800b3d0 <USB_ReadPMA>
 800489a:	e082      	b.n	80049a2 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800489c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489e:	78db      	ldrb	r3, [r3, #3]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d10a      	bne.n	80048ba <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80048a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048a8:	461a      	mov	r2, r3
 80048aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f9d3 	bl	8004c58 <HAL_PCD_EP_DB_Receive>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80048b8:	e073      	b.n	80049a2 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d022      	beq.n	800495e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	4413      	add	r3, r2
 8004932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004940:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02c      	beq.n	80049a2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494e:	6959      	ldr	r1, [r3, #20]
 8004950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004952:	891a      	ldrh	r2, [r3, #8]
 8004954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004958:	f006 fd3a 	bl	800b3d0 <USB_ReadPMA>
 800495c:	e021      	b.n	80049a2 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	4413      	add	r3, r2
 8004978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004982:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004986:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004994:	6959      	ldr	r1, [r3, #20]
 8004996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004998:	895a      	ldrh	r2, [r3, #10]
 800499a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800499e:	f006 fd17 	bl	800b3d0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80049a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049aa:	441a      	add	r2, r3
 80049ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80049b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049b8:	441a      	add	r2, r3
 80049ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80049be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <PCD_EP_ISR_Handler+0x4fe>
 80049c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80049ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d206      	bcs.n	80049e0 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f008 fb89 	bl	800d0f0 <HAL_PCD_DataOutStageCallback>
 80049de:	e005      	b.n	80049ec <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049e6:	4618      	mov	r0, r3
 80049e8:	f004 ffc5 	bl	8009976 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8121 	beq.w	8004c3c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80049fa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	3310      	adds	r3, #16
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	78db      	ldrb	r3, [r3, #3]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	f040 80a2 	bne.w	8004b98 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5c:	7b1b      	ldrb	r3, [r3, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8093 	beq.w	8004b8a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d046      	beq.n	8004afe <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d126      	bne.n	8004ac6 <PCD_EP_ISR_Handler+0x5f2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	4413      	add	r3, r2
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	00da      	lsls	r2, r3, #3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	4413      	add	r3, r2
 8004a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	e061      	b.n	8004b8a <PCD_EP_ISR_Handler+0x6b6>
 8004ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d15d      	bne.n	8004b8a <PCD_EP_ISR_Handler+0x6b6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	4413      	add	r3, r2
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	2200      	movs	r2, #0
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	e045      	b.n	8004b8a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d126      	bne.n	8004b5a <PCD_EP_ISR_Handler+0x686>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	4413      	add	r3, r2
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
 8004b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	00da      	lsls	r2, r3, #3
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e017      	b.n	8004b8a <PCD_EP_ISR_Handler+0x6b6>
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d113      	bne.n	8004b8a <PCD_EP_ISR_Handler+0x6b6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b70:	4413      	add	r3, r2
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00da      	lsls	r2, r3, #3
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	2200      	movs	r2, #0
 8004b88:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f008 fac8 	bl	800d126 <HAL_PCD_DataInStageCallback>
 8004b96:	e051      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004b98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d144      	bne.n	8004c2e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d907      	bls.n	8004be8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004be0:	1ad2      	subs	r2, r2, r3
 8004be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be4:	619a      	str	r2, [r3, #24]
 8004be6:	e002      	b.n	8004bee <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bea:	2200      	movs	r2, #0
 8004bec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f008 fa92 	bl	800d126 <HAL_PCD_DataInStageCallback>
 8004c02:	e01b      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c0c:	441a      	add	r2, r3
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c10:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c1a:	441a      	add	r2, r3
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c26:	4618      	mov	r0, r3
 8004c28:	f004 fea5 	bl	8009976 <USB_EPStartXfer>
 8004c2c:	e006      	b.n	8004c3c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c32:	461a      	mov	r2, r3
 8004c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f917 	bl	8004e6a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f6ff ac48 	blt.w	80044de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3758      	adds	r7, #88	; 0x58
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d07c      	beq.n	8004d6a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	8b7b      	ldrh	r3, [r7, #26]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d306      	bcc.n	8004cae <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	8b7b      	ldrh	r3, [r7, #26]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	619a      	str	r2, [r3, #24]
 8004cac:	e002      	b.n	8004cb4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d123      	bne.n	8004d04 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	833b      	strh	r3, [r7, #24]
 8004cd8:	8b3b      	ldrh	r3, [r7, #24]
 8004cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cde:	833b      	strh	r3, [r7, #24]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	8b3b      	ldrh	r3, [r7, #24]
 8004cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01f      	beq.n	8004d4e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	82fb      	strh	r3, [r7, #22]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d4e:	8b7b      	ldrh	r3, [r7, #26]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8085 	beq.w	8004e60 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6959      	ldr	r1, [r3, #20]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	891a      	ldrh	r2, [r3, #8]
 8004d62:	8b7b      	ldrh	r3, [r7, #26]
 8004d64:	f006 fb34 	bl	800b3d0 <USB_ReadPMA>
 8004d68:	e07a      	b.n	8004e60 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4413      	add	r3, r2
 8004d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	8b7b      	ldrh	r3, [r7, #26]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d306      	bcc.n	8004da8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	8b7b      	ldrh	r3, [r7, #26]
 8004da0:	1ad2      	subs	r2, r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	619a      	str	r2, [r3, #24]
 8004da6:	e002      	b.n	8004dae <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2200      	movs	r2, #0
 8004dac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d123      	bne.n	8004dfe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	83fb      	strh	r3, [r7, #30]
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dd8:	83fb      	strh	r3, [r7, #30]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	8bfb      	ldrh	r3, [r7, #30]
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11f      	bne.n	8004e48 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	83bb      	strh	r3, [r7, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8bbb      	ldrh	r3, [r7, #28]
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e48:	8b7b      	ldrh	r3, [r7, #26]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6959      	ldr	r1, [r3, #20]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	895a      	ldrh	r2, [r3, #10]
 8004e5a:	8b7b      	ldrh	r3, [r7, #26]
 8004e5c:	f006 fab8 	bl	800b3d0 <USB_ReadPMA>
    }
  }

  return count;
 8004e60:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b0a4      	sub	sp, #144	; 0x90
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 81db 	beq.w	800523a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d907      	bls.n	8004ec8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ec0:	1ad2      	subs	r2, r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	619a      	str	r2, [r3, #24]
 8004ec6:	e002      	b.n	8004ece <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 80b9 	bne.w	800504a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d126      	bne.n	8004f2e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	4413      	add	r3, r2
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	00da      	lsls	r2, r3, #3
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	4413      	add	r3, r2
 8004f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	e01a      	b.n	8004f64 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d116      	bne.n	8004f64 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	4413      	add	r3, r2
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2200      	movs	r2, #0
 8004f62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d126      	bne.n	8004fc0 <HAL_PCD_EP_DB_Transmit+0x156>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	00da      	lsls	r2, r3, #3
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e017      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d113      	bne.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	4413      	add	r3, r2
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2200      	movs	r2, #0
 8004fee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f008 f895 	bl	800d126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 82fa 	beq.w	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	82fb      	strh	r3, [r7, #22]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	8afb      	ldrh	r3, [r7, #22]
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
 8005048:	e2d8      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d021      	beq.n	8005098 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800509e:	2b01      	cmp	r3, #1
 80050a0:	f040 82ac 	bne.w	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050ac:	441a      	add	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050ba:	441a      	add	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d30b      	bcc.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050dc:	1ad2      	subs	r2, r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	621a      	str	r2, [r3, #32]
 80050e2:	e017      	b.n	8005114 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d108      	bne.n	80050fe <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80050ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050fc:	e00a      	b.n	8005114 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2200      	movs	r2, #0
 8005112:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d165      	bne.n	80051e8 <HAL_PCD_EP_DB_Transmit+0x37e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005130:	4413      	add	r3, r2
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	00da      	lsls	r2, r3, #3
 800513a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513c:	4413      	add	r3, r2
 800513e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005142:	63bb      	str	r3, [r7, #56]	; 0x38
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514e:	b29a      	uxth	r2, r3
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005158:	2b3e      	cmp	r3, #62	; 0x3e
 800515a:	d91d      	bls.n	8005198 <HAL_PCD_EP_DB_Transmit+0x32e>
 800515c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	64bb      	str	r3, [r7, #72]	; 0x48
 8005164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005172:	3b01      	subs	r3, #1
 8005174:	64bb      	str	r3, [r7, #72]	; 0x48
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29a      	uxth	r2, r3
 800517c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517e:	b29b      	uxth	r3, r3
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	b29b      	uxth	r3, r3
 8005184:	4313      	orrs	r3, r2
 8005186:	b29b      	uxth	r3, r3
 8005188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005190:	b29a      	uxth	r2, r3
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e044      	b.n	8005222 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x34c>
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	e035      	b.n	8005222 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80051b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x366>
 80051ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051cc:	3301      	adds	r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d8:	b29b      	uxth	r3, r3
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4313      	orrs	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e01c      	b.n	8005222 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d118      	bne.n	8005222 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	647b      	str	r3, [r7, #68]	; 0x44
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fe:	b29b      	uxth	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005204:	4413      	add	r3, r2
 8005206:	647b      	str	r3, [r7, #68]	; 0x44
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	00da      	lsls	r2, r3, #3
 800520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005210:	4413      	add	r3, r2
 8005212:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005216:	643b      	str	r3, [r7, #64]	; 0x40
 8005218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521c:	b29a      	uxth	r2, r3
 800521e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005220:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6959      	ldr	r1, [r3, #20]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	891a      	ldrh	r2, [r3, #8]
 800522e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005232:	b29b      	uxth	r3, r3
 8005234:	f006 f88a 	bl	800b34c <USB_WritePMA>
 8005238:	e1e0      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	4413      	add	r3, r2
 8005254:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800526a:	429a      	cmp	r2, r3
 800526c:	d307      	bcc.n	800527e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	619a      	str	r2, [r3, #24]
 800527c:	e002      	b.n	8005284 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2200      	movs	r2, #0
 8005282:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 80c0 	bne.w	800540e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d126      	bne.n	80052e4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052aa:	4413      	add	r3, r2
 80052ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	00da      	lsls	r2, r3, #3
 80052b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b6:	4413      	add	r3, r2
 80052b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e01a      	b.n	800531a <HAL_PCD_EP_DB_Transmit+0x4b0>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d116      	bne.n	800531a <HAL_PCD_EP_DB_Transmit+0x4b0>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	667b      	str	r3, [r7, #100]	; 0x64
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005300:	4413      	add	r3, r2
 8005302:	667b      	str	r3, [r7, #100]	; 0x64
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	00da      	lsls	r2, r3, #3
 800530a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530c:	4413      	add	r3, r2
 800530e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005312:	663b      	str	r3, [r7, #96]	; 0x60
 8005314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005316:	2200      	movs	r2, #0
 8005318:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	677b      	str	r3, [r7, #116]	; 0x74
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d12b      	bne.n	8005380 <HAL_PCD_EP_DB_Transmit+0x516>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005336:	b29b      	uxth	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	4413      	add	r3, r2
 800533e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	00da      	lsls	r2, r3, #3
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	4413      	add	r3, r2
 800534a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800534e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535e:	b29a      	uxth	r2, r3
 8005360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005376:	b29a      	uxth	r2, r3
 8005378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800537c:	801a      	strh	r2, [r3, #0]
 800537e:	e017      	b.n	80053b0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d113      	bne.n	80053b0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005390:	b29b      	uxth	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005396:	4413      	add	r3, r2
 8005398:	677b      	str	r3, [r7, #116]	; 0x74
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	00da      	lsls	r2, r3, #3
 80053a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053a8:	673b      	str	r3, [r7, #112]	; 0x70
 80053aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ac:	2200      	movs	r2, #0
 80053ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	4619      	mov	r1, r3
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f007 feb5 	bl	800d126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 811a 	bne.w	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80053f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005408:	b29b      	uxth	r3, r3
 800540a:	8013      	strh	r3, [r2, #0]
 800540c:	e0f6      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d121      	bne.n	800545c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	441a      	add	r2, r3
 8005444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005458:	b29b      	uxth	r3, r3
 800545a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005462:	2b01      	cmp	r3, #1
 8005464:	f040 80ca 	bne.w	80055fc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005470:	441a      	add	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800547e:	441a      	add	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	429a      	cmp	r2, r3
 800548e:	d30b      	bcc.n	80054a8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054a0:	1ad2      	subs	r2, r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	621a      	str	r2, [r3, #32]
 80054a6:	e017      	b.n	80054d8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80054b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054c0:	e00a      	b.n	80054d8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d165      	bne.n	80055b2 <HAL_PCD_EP_DB_Transmit+0x748>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fa:	4413      	add	r3, r2
 80054fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	00da      	lsls	r2, r3, #3
 8005504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005506:	4413      	add	r3, r2
 8005508:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800550c:	65bb      	str	r3, [r7, #88]	; 0x58
 800550e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005518:	b29a      	uxth	r2, r3
 800551a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005522:	2b3e      	cmp	r3, #62	; 0x3e
 8005524:	d91d      	bls.n	8005562 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	66bb      	str	r3, [r7, #104]	; 0x68
 800552e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800553a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800553c:	3b01      	subs	r3, #1
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29a      	uxth	r2, r3
 8005546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005548:	b29b      	uxth	r3, r3
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	b29b      	uxth	r3, r3
 800554e:	4313      	orrs	r3, r2
 8005550:	b29b      	uxth	r3, r3
 8005552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555a:	b29a      	uxth	r2, r3
 800555c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	e041      	b.n	80055e6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_PCD_EP_DB_Transmit+0x716>
 800556a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e032      	b.n	80055e6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	66bb      	str	r3, [r7, #104]	; 0x68
 8005588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_PCD_EP_DB_Transmit+0x730>
 8005594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005596:	3301      	adds	r3, #1
 8005598:	66bb      	str	r3, [r7, #104]	; 0x68
 800559a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	e019      	b.n	80055e6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d115      	bne.n	80055e6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c8:	4413      	add	r3, r2
 80055ca:	657b      	str	r3, [r7, #84]	; 0x54
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	00da      	lsls	r2, r3, #3
 80055d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055da:	653b      	str	r3, [r7, #80]	; 0x50
 80055dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6959      	ldr	r1, [r3, #20]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	895a      	ldrh	r2, [r3, #10]
 80055f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f005 fea8 	bl	800b34c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	82bb      	strh	r3, [r7, #20]
 8005618:	8abb      	ldrh	r3, [r7, #20]
 800561a:	f083 0310 	eor.w	r3, r3, #16
 800561e:	82bb      	strh	r3, [r7, #20]
 8005620:	8abb      	ldrh	r3, [r7, #20]
 8005622:	f083 0320 	eor.w	r3, r3, #32
 8005626:	82bb      	strh	r3, [r7, #20]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	8abb      	ldrh	r3, [r7, #20]
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3790      	adds	r7, #144	; 0x90
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	817b      	strh	r3, [r7, #10]
 8005664:	4613      	mov	r3, r2
 8005666:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005668:	897b      	ldrh	r3, [r7, #10]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005674:	897b      	ldrh	r3, [r7, #10]
 8005676:	f003 0207 	and.w	r2, r3, #7
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	3310      	adds	r3, #16
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e009      	b.n	80056a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800568c:	897a      	ldrh	r2, [r7, #10]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	80da      	strh	r2, [r3, #6]
 80056b4:	e00b      	b.n	80056ce <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2201      	movs	r2, #1
 80056ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005700:	b29b      	uxth	r3, r3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005714:	b29b      	uxth	r3, r3
 8005716:	f043 0302 	orr.w	r3, r3, #2
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d141      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800573e:	4b4b      	ldr	r3, [pc, #300]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574a:	d131      	bne.n	80057b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800574c:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005752:	4a46      	ldr	r2, [pc, #280]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800575c:	4b43      	ldr	r3, [pc, #268]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005764:	4a41      	ldr	r2, [pc, #260]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800576a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800576c:	4b40      	ldr	r3, [pc, #256]	; (8005870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2232      	movs	r2, #50	; 0x32
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	0c9b      	lsrs	r3, r3, #18
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005782:	e002      	b.n	800578a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3b01      	subs	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800578a:	4b38      	ldr	r3, [pc, #224]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005796:	d102      	bne.n	800579e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f2      	bne.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800579e:	4b33      	ldr	r3, [pc, #204]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057aa:	d158      	bne.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e057      	b.n	8005860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057b0:	4b2e      	ldr	r3, [pc, #184]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b6:	4a2d      	ldr	r2, [pc, #180]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057c0:	e04d      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c8:	d141      	bne.n	800584e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d6:	d131      	bne.n	800583c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057d8:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057e8:	4b20      	ldr	r3, [pc, #128]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057f0:	4a1e      	ldr	r2, [pc, #120]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2232      	movs	r2, #50	; 0x32
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	0c9b      	lsrs	r3, r3, #18
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800580e:	e002      	b.n	8005816 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3b01      	subs	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d102      	bne.n	800582a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f2      	bne.n	8005810 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800582a:	4b10      	ldr	r3, [pc, #64]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d112      	bne.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e011      	b.n	8005860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800584c:	e007      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005856:	4a05      	ldr	r2, [pc, #20]	; (800586c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800585c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40007000 	.word	0x40007000
 8005870:	20000000 	.word	0x20000000
 8005874:	431bde83 	.word	0x431bde83

08005878 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005886:	6093      	str	r3, [r2, #8]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40007000 	.word	0x40007000

08005898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e2fe      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d075      	beq.n	80059a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b6:	4b97      	ldr	r3, [pc, #604]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c0:	4b94      	ldr	r3, [pc, #592]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d102      	bne.n	80058d6 <HAL_RCC_OscConfig+0x3e>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_OscConfig+0x44>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10b      	bne.n	80058f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4b8d      	ldr	r3, [pc, #564]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05b      	beq.n	80059a0 <HAL_RCC_OscConfig+0x108>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d157      	bne.n	80059a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e2d9      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	d106      	bne.n	800590c <HAL_RCC_OscConfig+0x74>
 80058fe:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a84      	ldr	r2, [pc, #528]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e01d      	b.n	8005948 <HAL_RCC_OscConfig+0xb0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005914:	d10c      	bne.n	8005930 <HAL_RCC_OscConfig+0x98>
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a7e      	ldr	r2, [pc, #504]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 800591c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	4b7c      	ldr	r3, [pc, #496]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7b      	ldr	r2, [pc, #492]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e00b      	b.n	8005948 <HAL_RCC_OscConfig+0xb0>
 8005930:	4b78      	ldr	r3, [pc, #480]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a77      	ldr	r2, [pc, #476]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4b75      	ldr	r3, [pc, #468]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a74      	ldr	r2, [pc, #464]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fc febe 	bl	80026d0 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005958:	f7fc feba 	bl	80026d0 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b64      	cmp	r3, #100	; 0x64
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e29e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0xc0>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fc feaa 	bl	80026d0 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005980:	f7fc fea6 	bl	80026d0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	; 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e28a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005992:	4b60      	ldr	r3, [pc, #384]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f0      	bne.n	8005980 <HAL_RCC_OscConfig+0xe8>
 800599e:	e000      	b.n	80059a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d075      	beq.n	8005a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ae:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b8:	4b56      	ldr	r3, [pc, #344]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d102      	bne.n	80059ce <HAL_RCC_OscConfig+0x136>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d002      	beq.n	80059d4 <HAL_RCC_OscConfig+0x13c>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d11f      	bne.n	8005a14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d4:	4b4f      	ldr	r3, [pc, #316]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_OscConfig+0x154>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e25d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ec:	4b49      	ldr	r3, [pc, #292]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	061b      	lsls	r3, r3, #24
 80059fa:	4946      	ldr	r1, [pc, #280]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a00:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <HAL_RCC_OscConfig+0x280>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fc fe17 	bl	8002638 <HAL_InitTick>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d043      	beq.n	8005a98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e249      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d023      	beq.n	8005a64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fc fe52 	bl	80026d0 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fc fe4e 	bl	80026d0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e232      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a42:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	492d      	ldr	r1, [pc, #180]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	604b      	str	r3, [r1, #4]
 8005a62:	e01a      	b.n	8005a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a64:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2a      	ldr	r2, [pc, #168]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc fe2e 	bl	80026d0 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a78:	f7fc fe2a 	bl	80026d0 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e20e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x1e0>
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d041      	beq.n	8005b2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01c      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fc fe07 	bl	80026d0 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac6:	f7fc fe03 	bl	80026d0 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1e7      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0ef      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x22e>
 8005ae6:	e020      	b.n	8005b2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aee:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <HAL_RCC_OscConfig+0x27c>)
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fc fdea 	bl	80026d0 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005afe:	e00d      	b.n	8005b1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b00:	f7fc fde6 	bl	80026d0 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d906      	bls.n	8005b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e1ca      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b1c:	4b8c      	ldr	r3, [pc, #560]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ea      	bne.n	8005b00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a6 	beq.w	8005c84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b3c:	4b84      	ldr	r3, [pc, #528]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_OscConfig+0x2b4>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x2b6>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b52:	4b7f      	ldr	r3, [pc, #508]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a7e      	ldr	r2, [pc, #504]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5e:	4b7c      	ldr	r3, [pc, #496]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b6e:	4b79      	ldr	r3, [pc, #484]	; (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d118      	bne.n	8005bac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b7a:	4b76      	ldr	r3, [pc, #472]	; (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a75      	ldr	r2, [pc, #468]	; (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b86:	f7fc fda3 	bl	80026d0 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8e:	f7fc fd9f 	bl	80026d0 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e183      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba0:	4b6c      	ldr	r3, [pc, #432]	; (8005d54 <HAL_RCC_OscConfig+0x4bc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x32e>
 8005bb4:	4b66      	ldr	r3, [pc, #408]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bc4:	e024      	b.n	8005c10 <HAL_RCC_OscConfig+0x378>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d110      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x358>
 8005bce:	4b60      	ldr	r3, [pc, #384]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	4a5e      	ldr	r2, [pc, #376]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be4:	4a5a      	ldr	r2, [pc, #360]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bee:	e00f      	b.n	8005c10 <HAL_RCC_OscConfig+0x378>
 8005bf0:	4b57      	ldr	r3, [pc, #348]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	4a56      	ldr	r2, [pc, #344]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c00:	4b53      	ldr	r3, [pc, #332]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	4a52      	ldr	r2, [pc, #328]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d016      	beq.n	8005c46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fc fd5a 	bl	80026d0 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fc fd56 	bl	80026d0 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e138      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c36:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ed      	beq.n	8005c20 <HAL_RCC_OscConfig+0x388>
 8005c44:	e015      	b.n	8005c72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fc fd43 	bl	80026d0 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fc fd3f 	bl	80026d0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e121      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c64:	4b3a      	ldr	r3, [pc, #232]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ed      	bne.n	8005c4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d03c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01c      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c98:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca8:	f7fc fd12 	bl	80026d0 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cb0:	f7fc fd0e 	bl	80026d0 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0f2      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ef      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x418>
 8005cd0:	e01b      	b.n	8005d0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cd2:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce2:	f7fc fcf5 	bl	80026d0 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cea:	f7fc fcf1 	bl	80026d0 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e0d5      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ef      	bne.n	8005cea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80c9 	beq.w	8005ea6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d14:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 030c 	and.w	r3, r3, #12
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	f000 8083 	beq.w	8005e28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d15e      	bne.n	8005de8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <HAL_RCC_OscConfig+0x4b8>)
 8005d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fc fccb 	bl	80026d0 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d3c:	e00c      	b.n	8005d58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fc fcc7 	bl	80026d0 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d905      	bls.n	8005d58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e0ab      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d58:	4b55      	ldr	r3, [pc, #340]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ec      	bne.n	8005d3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d64:	4b52      	ldr	r3, [pc, #328]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4b52      	ldr	r3, [pc, #328]	; (8005eb4 <HAL_RCC_OscConfig+0x61c>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6a11      	ldr	r1, [r2, #32]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d7e:	0212      	lsls	r2, r2, #8
 8005d80:	4311      	orrs	r1, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d86:	0852      	lsrs	r2, r2, #1
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	0552      	lsls	r2, r2, #21
 8005d8c:	4311      	orrs	r1, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d92:	0852      	lsrs	r2, r2, #1
 8005d94:	3a01      	subs	r2, #1
 8005d96:	0652      	lsls	r2, r2, #25
 8005d98:	4311      	orrs	r1, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d9e:	06d2      	lsls	r2, r2, #27
 8005da0:	430a      	orrs	r2, r1
 8005da2:	4943      	ldr	r1, [pc, #268]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da8:	4b41      	ldr	r3, [pc, #260]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a40      	ldr	r2, [pc, #256]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005db2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005db4:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	4a3d      	ldr	r2, [pc, #244]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fc fc86 	bl	80026d0 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7fc fc82 	bl	80026d0 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e066      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dda:	4b35      	ldr	r3, [pc, #212]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x530>
 8005de6:	e05e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de8:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fc fc6c 	bl	80026d0 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fc fc68 	bl	80026d0 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e04c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e0e:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e1a:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	4924      	ldr	r1, [pc, #144]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <HAL_RCC_OscConfig+0x620>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	60cb      	str	r3, [r1, #12]
 8005e26:	e03e      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e039      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e34:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0203 	and.w	r2, r3, #3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d12c      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	3b01      	subs	r3, #1
 8005e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d123      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d11b      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d113      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	3b01      	subs	r3, #1
 8005e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	019f800c 	.word	0x019f800c
 8005eb8:	feeefffc 	.word	0xfeeefffc

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e11e      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b91      	ldr	r3, [pc, #580]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d910      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b8e      	ldr	r3, [pc, #568]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 020f 	bic.w	r2, r3, #15
 8005eea:	498c      	ldr	r1, [pc, #560]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b8a      	ldr	r3, [pc, #552]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e106      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d073      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d129      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f18:	4b81      	ldr	r3, [pc, #516]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0f4      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f28:	f000 f99e 	bl	8006268 <RCC_GetSysClockFreqFromPLLSource>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <HAL_RCC_ClockConfig+0x268>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d93f      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f36:	4b7a      	ldr	r3, [pc, #488]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d033      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12f      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f56:	4b72      	ldr	r3, [pc, #456]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5e:	4a70      	ldr	r2, [pc, #448]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e024      	b.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f74:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0c6      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f84:	4b66      	ldr	r3, [pc, #408]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0be      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f94:	f000 f8ce 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8005f98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4a61      	ldr	r2, [pc, #388]	; (8006124 <HAL_RCC_ClockConfig+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d909      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fa2:	4b5f      	ldr	r3, [pc, #380]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005faa:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fb6:	4b5a      	ldr	r3, [pc, #360]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f023 0203 	bic.w	r2, r3, #3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4957      	ldr	r1, [pc, #348]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc8:	f7fc fb82 	bl	80026d0 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd0:	f7fc fb7e 	bl	80026d0 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e095      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe6:	4b4e      	ldr	r3, [pc, #312]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 020c 	and.w	r2, r3, #12
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1eb      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d023      	beq.n	800604c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b43      	ldr	r3, [pc, #268]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a42      	ldr	r2, [pc, #264]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800601a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006028:	4b3d      	ldr	r3, [pc, #244]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006030:	4a3b      	ldr	r2, [pc, #236]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006036:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006038:	4b39      	ldr	r3, [pc, #228]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4936      	ldr	r1, [pc, #216]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
 800604a:	e008      	b.n	800605e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b80      	cmp	r3, #128	; 0x80
 8006050:	d105      	bne.n	800605e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006052:	4b33      	ldr	r3, [pc, #204]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4a32      	ldr	r2, [pc, #200]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 8006058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800605e:	4b2f      	ldr	r3, [pc, #188]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d21d      	bcs.n	80060a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606c:	4b2b      	ldr	r3, [pc, #172]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f023 020f 	bic.w	r2, r3, #15
 8006074:	4929      	ldr	r1, [pc, #164]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	4313      	orrs	r3, r2
 800607a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800607c:	f7fc fb28 	bl	80026d0 <HAL_GetTick>
 8006080:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006082:	e00a      	b.n	800609a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006084:	f7fc fb24 	bl	80026d0 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e03b      	b.n	8006112 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_RCC_ClockConfig+0x260>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d1ed      	bne.n	8006084 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4917      	ldr	r1, [pc, #92]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	490f      	ldr	r1, [pc, #60]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060e6:	f000 f825 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <HAL_RCC_ClockConfig+0x264>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	490c      	ldr	r1, [pc, #48]	; (8006128 <HAL_RCC_ClockConfig+0x26c>)
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	4a0a      	ldr	r2, [pc, #40]	; (800612c <HAL_RCC_ClockConfig+0x270>)
 8006104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_RCC_ClockConfig+0x274>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fc fa94 	bl	8002638 <HAL_InitTick>
 8006110:	4603      	mov	r3, r0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40022000 	.word	0x40022000
 8006120:	40021000 	.word	0x40021000
 8006124:	04c4b400 	.word	0x04c4b400
 8006128:	0800da6c 	.word	0x0800da6c
 800612c:	20000000 	.word	0x20000000
 8006130:	20000004 	.word	0x20000004

08006134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800613a:	4b2c      	ldr	r3, [pc, #176]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	2b04      	cmp	r3, #4
 8006144:	d102      	bne.n	800614c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006146:	4b2a      	ldr	r3, [pc, #168]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e047      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 030c 	and.w	r3, r3, #12
 8006154:	2b08      	cmp	r3, #8
 8006156:	d102      	bne.n	800615e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006158:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	e03e      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800615e:	4b23      	ldr	r3, [pc, #140]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d136      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006174:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	3301      	adds	r3, #1
 8006180:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d10c      	bne.n	80061a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006188:	4a1a      	ldr	r2, [pc, #104]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	4a16      	ldr	r2, [pc, #88]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006192:	68d2      	ldr	r2, [r2, #12]
 8006194:	0a12      	lsrs	r2, r2, #8
 8006196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	617b      	str	r3, [r7, #20]
      break;
 80061a0:	e00c      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	4a10      	ldr	r2, [pc, #64]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	0a12      	lsrs	r2, r2, #8
 80061b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
      break;
 80061ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	0e5b      	lsrs	r3, r3, #25
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	3301      	adds	r3, #1
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e001      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061dc:	693b      	ldr	r3, [r7, #16]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	007a1200 	.word	0x007a1200

080061f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061fc:	4b03      	ldr	r3, [pc, #12]	; (800620c <HAL_RCC_GetHCLKFreq+0x14>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000000 	.word	0x20000000

08006210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006214:	f7ff fff0 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4904      	ldr	r1, [pc, #16]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40021000 	.word	0x40021000
 8006238:	0800da7c 	.word	0x0800da7c

0800623c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006240:	f7ff ffda 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	0adb      	lsrs	r3, r3, #11
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4904      	ldr	r1, [pc, #16]	; (8006264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	0800da7c 	.word	0x0800da7c

08006268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800626e:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b03      	cmp	r3, #3
 800628a:	d10c      	bne.n	80062a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006296:	68d2      	ldr	r2, [r2, #12]
 8006298:	0a12      	lsrs	r2, r2, #8
 800629a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	617b      	str	r3, [r7, #20]
    break;
 80062a4:	e00c      	b.n	80062c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062a6:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	4a0e      	ldr	r2, [pc, #56]	; (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062b0:	68d2      	ldr	r2, [r2, #12]
 80062b2:	0a12      	lsrs	r2, r2, #8
 80062b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062b8:	fb02 f303 	mul.w	r3, r2, r3
 80062bc:	617b      	str	r3, [r7, #20]
    break;
 80062be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	0e5b      	lsrs	r3, r3, #25
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	3301      	adds	r3, #1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062da:	687b      	ldr	r3, [r7, #4]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40021000 	.word	0x40021000
 80062ec:	007a1200 	.word	0x007a1200
 80062f0:	00f42400 	.word	0x00f42400

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006300:	2300      	movs	r3, #0
 8006302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8098 	beq.w	8006442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006312:	2300      	movs	r3, #0
 8006314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006316:	4b43      	ldr	r3, [pc, #268]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10d      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006322:	4b40      	ldr	r3, [pc, #256]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	4a3f      	ldr	r2, [pc, #252]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632c:	6593      	str	r3, [r2, #88]	; 0x58
 800632e:	4b3d      	ldr	r3, [pc, #244]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800633a:	2301      	movs	r3, #1
 800633c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800633e:	4b3a      	ldr	r3, [pc, #232]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a39      	ldr	r2, [pc, #228]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800634a:	f7fc f9c1 	bl	80026d0 <HAL_GetTick>
 800634e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006350:	e009      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006352:	f7fc f9bd 	bl	80026d0 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d902      	bls.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	74fb      	strb	r3, [r7, #19]
        break;
 8006364:	e005      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006366:	4b30      	ldr	r3, [pc, #192]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0ef      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d159      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006378:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01e      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	429a      	cmp	r2, r3
 8006392:	d019      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006394:	4b23      	ldr	r3, [pc, #140]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063a0:	4b20      	ldr	r3, [pc, #128]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a6:	4a1f      	ldr	r2, [pc, #124]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b0:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b6:	4a1b      	ldr	r2, [pc, #108]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063c0:	4a18      	ldr	r2, [pc, #96]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d016      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d2:	f7fc f97d 	bl	80026d0 <HAL_GetTick>
 80063d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d8:	e00b      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063da:	f7fc f979 	bl	80026d0 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d902      	bls.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	74fb      	strb	r3, [r7, #19]
            break;
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0ec      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006400:	7cfb      	ldrb	r3, [r7, #19]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006406:	4b07      	ldr	r3, [pc, #28]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	4903      	ldr	r1, [pc, #12]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800641e:	7cfb      	ldrb	r3, [r7, #19]
 8006420:	74bb      	strb	r3, [r7, #18]
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006424:	40021000 	.word	0x40021000
 8006428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006430:	7c7b      	ldrb	r3, [r7, #17]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006436:	4ba6      	ldr	r3, [pc, #664]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643a:	4aa5      	ldr	r2, [pc, #660]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800644e:	4ba0      	ldr	r3, [pc, #640]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	f023 0203 	bic.w	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	499c      	ldr	r1, [pc, #624]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006470:	4b97      	ldr	r3, [pc, #604]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f023 020c 	bic.w	r2, r3, #12
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4994      	ldr	r1, [pc, #592]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006492:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	498b      	ldr	r1, [pc, #556]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064b4:	4b86      	ldr	r3, [pc, #536]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	4983      	ldr	r1, [pc, #524]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064d6:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	497a      	ldr	r1, [pc, #488]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064f8:	4b75      	ldr	r3, [pc, #468]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	4972      	ldr	r1, [pc, #456]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006508:	4313      	orrs	r3, r2
 800650a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800651a:	4b6d      	ldr	r3, [pc, #436]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4969      	ldr	r1, [pc, #420]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653c:	4b64      	ldr	r3, [pc, #400]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4961      	ldr	r1, [pc, #388]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800655e:	4b5c      	ldr	r3, [pc, #368]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	4958      	ldr	r1, [pc, #352]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006580:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	4950      	ldr	r1, [pc, #320]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659e:	d105      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a4a      	ldr	r2, [pc, #296]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065b8:	4b45      	ldr	r3, [pc, #276]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	4942      	ldr	r1, [pc, #264]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d6:	d105      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d8:	4b3d      	ldr	r3, [pc, #244]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065f0:	4b37      	ldr	r3, [pc, #220]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	4934      	ldr	r1, [pc, #208]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800660e:	d105      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006610:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a2e      	ldr	r2, [pc, #184]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800661a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006628:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	4926      	ldr	r1, [pc, #152]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006646:	d105      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006648:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a20      	ldr	r2, [pc, #128]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006652:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	4918      	ldr	r1, [pc, #96]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800667e:	d105      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006680:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800668a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	490a      	ldr	r1, [pc, #40]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b6:	d105      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a04      	ldr	r2, [pc, #16]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e049      	b.n	800677a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb fde6 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f000 ff48 	bl	80075a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	d001      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e04a      	b.n	8006832 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a21      	ldr	r2, [pc, #132]	; (8006840 <HAL_TIM_Base_Start_IT+0xbc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c6:	d013      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <HAL_TIM_Base_Start_IT+0xc0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <HAL_TIM_Base_Start_IT+0xc4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1a      	ldr	r2, [pc, #104]	; (800684c <HAL_TIM_Base_Start_IT+0xc8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x6c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a19      	ldr	r2, [pc, #100]	; (8006850 <HAL_TIM_Base_Start_IT+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d115      	bne.n	800681c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <HAL_TIM_Base_Start_IT+0xd0>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b06      	cmp	r3, #6
 8006800:	d015      	beq.n	800682e <HAL_TIM_Base_Start_IT+0xaa>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d011      	beq.n	800682e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681a:	e008      	b.n	800682e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	e000      	b.n	8006830 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	00010007 	.word	0x00010007

08006858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e049      	b.n	80068fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fb fd04 	bl	800228c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f000 fe86 	bl	80075a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_TIM_PWM_Start+0x24>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e03c      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d109      	bne.n	8006946 <HAL_TIM_PWM_Start+0x3e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	e02f      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d109      	bne.n	8006960 <HAL_TIM_PWM_Start+0x58>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	e022      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b0c      	cmp	r3, #12
 8006964:	d109      	bne.n	800697a <HAL_TIM_PWM_Start+0x72>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b01      	cmp	r3, #1
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	e015      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b10      	cmp	r3, #16
 800697e:	d109      	bne.n	8006994 <HAL_TIM_PWM_Start+0x8c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e008      	b.n	80069a6 <HAL_TIM_PWM_Start+0x9e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e097      	b.n	8006ade <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <HAL_TIM_PWM_Start+0xb6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069bc:	e023      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_PWM_Start+0xc6>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069cc:	e01b      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d104      	bne.n	80069de <HAL_TIM_PWM_Start+0xd6>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069dc:	e013      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d104      	bne.n	80069ee <HAL_TIM_PWM_Start+0xe6>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069ec:	e00b      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_PWM_Start+0xf6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fc:	e003      	b.n	8006a06 <HAL_TIM_PWM_Start+0xfe>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 f9f8 	bl	8007e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <HAL_TIM_PWM_Start+0x1e0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <HAL_TIM_PWM_Start+0x13e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a32      	ldr	r2, [pc, #200]	; (8006aec <HAL_TIM_PWM_Start+0x1e4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00e      	beq.n	8006a46 <HAL_TIM_PWM_Start+0x13e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a30      	ldr	r2, [pc, #192]	; (8006af0 <HAL_TIM_PWM_Start+0x1e8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d009      	beq.n	8006a46 <HAL_TIM_PWM_Start+0x13e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <HAL_TIM_PWM_Start+0x1ec>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d004      	beq.n	8006a46 <HAL_TIM_PWM_Start+0x13e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <HAL_TIM_PWM_Start+0x1f0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d101      	bne.n	8006a4a <HAL_TIM_PWM_Start+0x142>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <HAL_TIM_PWM_Start+0x144>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a20      	ldr	r2, [pc, #128]	; (8006ae8 <HAL_TIM_PWM_Start+0x1e0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d018      	beq.n	8006a9c <HAL_TIM_PWM_Start+0x194>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d013      	beq.n	8006a9c <HAL_TIM_PWM_Start+0x194>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a20      	ldr	r2, [pc, #128]	; (8006afc <HAL_TIM_PWM_Start+0x1f4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00e      	beq.n	8006a9c <HAL_TIM_PWM_Start+0x194>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <HAL_TIM_PWM_Start+0x1f8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_TIM_PWM_Start+0x194>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a17      	ldr	r2, [pc, #92]	; (8006aec <HAL_TIM_PWM_Start+0x1e4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_TIM_PWM_Start+0x194>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_TIM_PWM_Start+0x1e8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d115      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	4b18      	ldr	r3, [pc, #96]	; (8006b04 <HAL_TIM_PWM_Start+0x1fc>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	d015      	beq.n	8006ada <HAL_TIM_PWM_Start+0x1d2>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d011      	beq.n	8006ada <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	e008      	b.n	8006ada <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e000      	b.n	8006adc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40013400 	.word	0x40013400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	00010007 	.word	0x00010007

08006b08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f972 	bl	8007e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a3e      	ldr	r2, [pc, #248]	; (8006c20 <HAL_TIM_PWM_Stop+0x118>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_TIM_PWM_Stop+0x4a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3d      	ldr	r2, [pc, #244]	; (8006c24 <HAL_TIM_PWM_Stop+0x11c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_TIM_PWM_Stop+0x4a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a3b      	ldr	r2, [pc, #236]	; (8006c28 <HAL_TIM_PWM_Stop+0x120>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIM_PWM_Stop+0x4a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3a      	ldr	r2, [pc, #232]	; (8006c2c <HAL_TIM_PWM_Stop+0x124>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_TIM_PWM_Stop+0x4a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a38      	ldr	r2, [pc, #224]	; (8006c30 <HAL_TIM_PWM_Stop+0x128>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_PWM_Stop+0x4e>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_TIM_PWM_Stop+0x50>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d017      	beq.n	8006b8c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10f      	bne.n	8006b8c <HAL_TIM_PWM_Stop+0x84>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6a1a      	ldr	r2, [r3, #32]
 8006b72:	f244 4344 	movw	r3, #17476	; 0x4444
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_PWM_Stop+0x84>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10f      	bne.n	8006bbc <HAL_TIM_PWM_Stop+0xb4>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a1a      	ldr	r2, [r3, #32]
 8006ba2:	f244 4344 	movw	r3, #17476	; 0x4444
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d107      	bne.n	8006bbc <HAL_TIM_PWM_Stop+0xb4>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <HAL_TIM_PWM_Stop+0xc4>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bca:	e023      	b.n	8006c14 <HAL_TIM_PWM_Stop+0x10c>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIM_PWM_Stop+0xd4>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bda:	e01b      	b.n	8006c14 <HAL_TIM_PWM_Stop+0x10c>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d104      	bne.n	8006bec <HAL_TIM_PWM_Stop+0xe4>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bea:	e013      	b.n	8006c14 <HAL_TIM_PWM_Stop+0x10c>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b0c      	cmp	r3, #12
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIM_PWM_Stop+0xf4>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bfa:	e00b      	b.n	8006c14 <HAL_TIM_PWM_Stop+0x10c>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d104      	bne.n	8006c0c <HAL_TIM_PWM_Stop+0x104>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0a:	e003      	b.n	8006c14 <HAL_TIM_PWM_Stop+0x10c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40013400 	.word	0x40013400
 8006c28:	40014000 	.word	0x40014000
 8006c2c:	40014400 	.word	0x40014400
 8006c30:	40014800 	.word	0x40014800

08006c34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e097      	b.n	8006d78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fb faa3 	bl	80021a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2202      	movs	r2, #2
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006c78:	f023 0307 	bic.w	r3, r3, #7
 8006c7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 fc8d 	bl	80075a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006cd4:	f023 030c 	bic.w	r3, r3, #12
 8006cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	031b      	lsls	r3, r3, #12
 8006d04:	4313      	orrs	r3, r2
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	4313      	orrs	r3, r2
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d110      	bne.n	8006dd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d102      	bne.n	8006dbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006db6:	7b7b      	ldrb	r3, [r7, #13]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d001      	beq.n	8006dc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e069      	b.n	8006e94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd0:	e031      	b.n	8006e36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d110      	bne.n	8006dfa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d102      	bne.n	8006de4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dde:	7b3b      	ldrb	r3, [r7, #12]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d001      	beq.n	8006de8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e055      	b.n	8006e94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df8:	e01d      	b.n	8006e36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d108      	bne.n	8006e12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e06:	7b7b      	ldrb	r3, [r7, #13]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d102      	bne.n	8006e12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e0c:	7b3b      	ldrb	r3, [r7, #12]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d001      	beq.n	8006e16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e03e      	b.n	8006e94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_TIM_Encoder_Start+0xc4>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d008      	beq.n	8006e54 <HAL_TIM_Encoder_Start+0xd4>
 8006e42:	e00f      	b.n	8006e64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 ffd9 	bl	8007e04 <TIM_CCxChannelCmd>
      break;
 8006e52:	e016      	b.n	8006e82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 ffd1 	bl	8007e04 <TIM_CCxChannelCmd>
      break;
 8006e62:	e00e      	b.n	8006e82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 ffc9 	bl	8007e04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	2104      	movs	r1, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 ffc2 	bl	8007e04 <TIM_CCxChannelCmd>
      break;
 8006e80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d020      	beq.n	8006f00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01b      	beq.n	8006f00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0202 	mvn.w	r2, #2
 8006ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb40 	bl	800756c <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fb32 	bl	8007558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb43 	bl	8007580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d020      	beq.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0204 	mvn.w	r2, #4
 8006f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb1a 	bl	800756c <HAL_TIM_IC_CaptureCallback>
 8006f38:	e005      	b.n	8006f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb0c 	bl	8007558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fb1d 	bl	8007580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d020      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01b      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0208 	mvn.w	r2, #8
 8006f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 faf4 	bl	800756c <HAL_TIM_IC_CaptureCallback>
 8006f84:	e005      	b.n	8006f92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fae6 	bl	8007558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 faf7 	bl	8007580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d020      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01b      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0210 	mvn.w	r2, #16
 8006fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 face 	bl	800756c <HAL_TIM_IC_CaptureCallback>
 8006fd0:	e005      	b.n	8006fde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fac0 	bl	8007558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fad1 	bl	8007580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0201 	mvn.w	r2, #1
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fa fdd2 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f825 	bl	8008080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00c      	beq.n	800705a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f81d 	bl	8008094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fa8b 	bl	8007594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00c      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f06f 0220 	mvn.w	r2, #32
 800709a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 ffe5 	bl	800806c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00c      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fff1 	bl	80080a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00c      	beq.n	80070ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80070e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 ffe9 	bl	80080bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 ffe1 	bl	80080d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00c      	beq.n	8007132 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800712a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 ffd9 	bl	80080e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007156:	2302      	movs	r3, #2
 8007158:	e0ff      	b.n	800735a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b14      	cmp	r3, #20
 8007166:	f200 80f0 	bhi.w	800734a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800716a:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	080071c5 	.word	0x080071c5
 8007174:	0800734b 	.word	0x0800734b
 8007178:	0800734b 	.word	0x0800734b
 800717c:	0800734b 	.word	0x0800734b
 8007180:	08007205 	.word	0x08007205
 8007184:	0800734b 	.word	0x0800734b
 8007188:	0800734b 	.word	0x0800734b
 800718c:	0800734b 	.word	0x0800734b
 8007190:	08007247 	.word	0x08007247
 8007194:	0800734b 	.word	0x0800734b
 8007198:	0800734b 	.word	0x0800734b
 800719c:	0800734b 	.word	0x0800734b
 80071a0:	08007287 	.word	0x08007287
 80071a4:	0800734b 	.word	0x0800734b
 80071a8:	0800734b 	.word	0x0800734b
 80071ac:	0800734b 	.word	0x0800734b
 80071b0:	080072c9 	.word	0x080072c9
 80071b4:	0800734b 	.word	0x0800734b
 80071b8:	0800734b 	.word	0x0800734b
 80071bc:	0800734b 	.word	0x0800734b
 80071c0:	08007309 	.word	0x08007309
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fa88 	bl	80076e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0208 	orr.w	r2, r2, #8
 80071de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0204 	bic.w	r2, r2, #4
 80071ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6999      	ldr	r1, [r3, #24]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	619a      	str	r2, [r3, #24]
      break;
 8007202:	e0a5      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 faf8 	bl	8007800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800721e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800722e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	619a      	str	r2, [r3, #24]
      break;
 8007244:	e084      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fb61 	bl	8007914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0208 	orr.w	r2, r2, #8
 8007260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69da      	ldr	r2, [r3, #28]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0204 	bic.w	r2, r2, #4
 8007270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69d9      	ldr	r1, [r3, #28]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	61da      	str	r2, [r3, #28]
      break;
 8007284:	e064      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fbc9 	bl	8007a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69d9      	ldr	r1, [r3, #28]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	021a      	lsls	r2, r3, #8
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	61da      	str	r2, [r3, #28]
      break;
 80072c6:	e043      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fc32 	bl	8007b38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0208 	orr.w	r2, r2, #8
 80072e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0204 	bic.w	r2, r2, #4
 80072f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	691a      	ldr	r2, [r3, #16]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007306:	e023      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fc76 	bl	8007c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007322:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007332:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	021a      	lsls	r2, r3, #8
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007348:	e002      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
      break;
 800734e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIM_ConfigClockSource+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e0de      	b.n	800753e <HAL_TIM_ConfigClockSource+0x1da>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800739e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a63      	ldr	r2, [pc, #396]	; (8007548 <HAL_TIM_ConfigClockSource+0x1e4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	f000 80a9 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 80073c0:	4a61      	ldr	r2, [pc, #388]	; (8007548 <HAL_TIM_ConfigClockSource+0x1e4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	f200 80ae 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 80073c8:	4a60      	ldr	r2, [pc, #384]	; (800754c <HAL_TIM_ConfigClockSource+0x1e8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	f000 80a1 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 80073d0:	4a5e      	ldr	r2, [pc, #376]	; (800754c <HAL_TIM_ConfigClockSource+0x1e8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	f200 80a6 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 80073d8:	4a5d      	ldr	r2, [pc, #372]	; (8007550 <HAL_TIM_ConfigClockSource+0x1ec>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	f000 8099 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 80073e0:	4a5b      	ldr	r2, [pc, #364]	; (8007550 <HAL_TIM_ConfigClockSource+0x1ec>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	f200 809e 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 80073e8:	4a5a      	ldr	r2, [pc, #360]	; (8007554 <HAL_TIM_ConfigClockSource+0x1f0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	f000 8091 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 80073f0:	4a58      	ldr	r2, [pc, #352]	; (8007554 <HAL_TIM_ConfigClockSource+0x1f0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	f200 8096 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 80073f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80073fc:	f000 8089 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 8007400:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007404:	f200 808e 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 8007408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740c:	d03e      	beq.n	800748c <HAL_TIM_ConfigClockSource+0x128>
 800740e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007412:	f200 8087 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741a:	f000 8086 	beq.w	800752a <HAL_TIM_ConfigClockSource+0x1c6>
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d87f      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 8007424:	2b70      	cmp	r3, #112	; 0x70
 8007426:	d01a      	beq.n	800745e <HAL_TIM_ConfigClockSource+0xfa>
 8007428:	2b70      	cmp	r3, #112	; 0x70
 800742a:	d87b      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 800742c:	2b60      	cmp	r3, #96	; 0x60
 800742e:	d050      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x16e>
 8007430:	2b60      	cmp	r3, #96	; 0x60
 8007432:	d877      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 8007434:	2b50      	cmp	r3, #80	; 0x50
 8007436:	d03c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x14e>
 8007438:	2b50      	cmp	r3, #80	; 0x50
 800743a:	d873      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d058      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x18e>
 8007440:	2b40      	cmp	r3, #64	; 0x40
 8007442:	d86f      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d064      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d86b      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d060      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d867      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d05c      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 8007458:	2b10      	cmp	r3, #16
 800745a:	d05a      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x1ae>
 800745c:	e062      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800746e:	f000 fca9 	bl	8007dc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	609a      	str	r2, [r3, #8]
      break;
 800748a:	e04f      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800749c:	f000 fc92 	bl	8007dc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ae:	609a      	str	r2, [r3, #8]
      break;
 80074b0:	e03c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 fc04 	bl	8007ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2150      	movs	r1, #80	; 0x50
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fc5d 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 80074d0:	e02c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074de:	461a      	mov	r2, r3
 80074e0:	f000 fc23 	bl	8007d2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2160      	movs	r1, #96	; 0x60
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fc4d 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 80074f0:	e01c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074fe:	461a      	mov	r2, r3
 8007500:	f000 fbe4 	bl	8007ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fc3d 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 8007510:	e00c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f000 fc34 	bl	8007d8a <TIM_ITRx_SetConfig>
      break;
 8007522:	e003      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
      break;
 8007528:	e000      	b.n	800752c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800752a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	00100070 	.word	0x00100070
 800754c:	00100040 	.word	0x00100040
 8007550:	00100030 	.word	0x00100030
 8007554:	00100020 	.word	0x00100020

08007558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a42      	ldr	r2, [pc, #264]	; (80076c4 <TIM_Base_SetConfig+0x11c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00f      	beq.n	80075e0 <TIM_Base_SetConfig+0x38>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c6:	d00b      	beq.n	80075e0 <TIM_Base_SetConfig+0x38>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a3f      	ldr	r2, [pc, #252]	; (80076c8 <TIM_Base_SetConfig+0x120>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d007      	beq.n	80075e0 <TIM_Base_SetConfig+0x38>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a3e      	ldr	r2, [pc, #248]	; (80076cc <TIM_Base_SetConfig+0x124>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_Base_SetConfig+0x38>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a3d      	ldr	r2, [pc, #244]	; (80076d0 <TIM_Base_SetConfig+0x128>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d108      	bne.n	80075f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <TIM_Base_SetConfig+0x11c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d01b      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007600:	d017      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a30      	ldr	r2, [pc, #192]	; (80076c8 <TIM_Base_SetConfig+0x120>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2f      	ldr	r2, [pc, #188]	; (80076cc <TIM_Base_SetConfig+0x124>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00f      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2e      	ldr	r2, [pc, #184]	; (80076d0 <TIM_Base_SetConfig+0x128>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a2d      	ldr	r2, [pc, #180]	; (80076d4 <TIM_Base_SetConfig+0x12c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <TIM_Base_SetConfig+0x130>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_Base_SetConfig+0x8a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2b      	ldr	r2, [pc, #172]	; (80076dc <TIM_Base_SetConfig+0x134>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d108      	bne.n	8007644 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <TIM_Base_SetConfig+0x11c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00f      	beq.n	8007690 <TIM_Base_SetConfig+0xe8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a17      	ldr	r2, [pc, #92]	; (80076d0 <TIM_Base_SetConfig+0x128>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00b      	beq.n	8007690 <TIM_Base_SetConfig+0xe8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <TIM_Base_SetConfig+0x12c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d007      	beq.n	8007690 <TIM_Base_SetConfig+0xe8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <TIM_Base_SetConfig+0x130>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d003      	beq.n	8007690 <TIM_Base_SetConfig+0xe8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a14      	ldr	r2, [pc, #80]	; (80076dc <TIM_Base_SetConfig+0x134>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d105      	bne.n	80076b6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f023 0201 	bic.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	611a      	str	r2, [r3, #16]
  }
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800

080076e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f023 0201 	bic.w	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f023 0302 	bic.w	r3, r3, #2
 800772c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a2c      	ldr	r2, [pc, #176]	; (80077ec <TIM_OC1_SetConfig+0x10c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <TIM_OC1_SetConfig+0x80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a2b      	ldr	r2, [pc, #172]	; (80077f0 <TIM_OC1_SetConfig+0x110>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00b      	beq.n	8007760 <TIM_OC1_SetConfig+0x80>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a2a      	ldr	r2, [pc, #168]	; (80077f4 <TIM_OC1_SetConfig+0x114>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_OC1_SetConfig+0x80>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a29      	ldr	r2, [pc, #164]	; (80077f8 <TIM_OC1_SetConfig+0x118>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC1_SetConfig+0x80>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a28      	ldr	r2, [pc, #160]	; (80077fc <TIM_OC1_SetConfig+0x11c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10c      	bne.n	800777a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f023 0308 	bic.w	r3, r3, #8
 8007766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 0304 	bic.w	r3, r3, #4
 8007778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <TIM_OC1_SetConfig+0x10c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_OC1_SetConfig+0xc2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1a      	ldr	r2, [pc, #104]	; (80077f0 <TIM_OC1_SetConfig+0x110>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_OC1_SetConfig+0xc2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a19      	ldr	r2, [pc, #100]	; (80077f4 <TIM_OC1_SetConfig+0x114>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_OC1_SetConfig+0xc2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <TIM_OC1_SetConfig+0x118>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_OC1_SetConfig+0xc2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a17      	ldr	r2, [pc, #92]	; (80077fc <TIM_OC1_SetConfig+0x11c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d111      	bne.n	80077c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	621a      	str	r2, [r3, #32]
}
 80077e0:	bf00      	nop
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40012c00 	.word	0x40012c00
 80077f0:	40013400 	.word	0x40013400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800

08007800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	f023 0210 	bic.w	r2, r3, #16
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	021b      	lsls	r3, r3, #8
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f023 0320 	bic.w	r3, r3, #32
 800784e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a28      	ldr	r2, [pc, #160]	; (8007900 <TIM_OC2_SetConfig+0x100>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_OC2_SetConfig+0x6c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a27      	ldr	r2, [pc, #156]	; (8007904 <TIM_OC2_SetConfig+0x104>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d10d      	bne.n	8007888 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a1d      	ldr	r2, [pc, #116]	; (8007900 <TIM_OC2_SetConfig+0x100>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00f      	beq.n	80078b0 <TIM_OC2_SetConfig+0xb0>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <TIM_OC2_SetConfig+0x104>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00b      	beq.n	80078b0 <TIM_OC2_SetConfig+0xb0>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <TIM_OC2_SetConfig+0x108>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_OC2_SetConfig+0xb0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a1a      	ldr	r2, [pc, #104]	; (800790c <TIM_OC2_SetConfig+0x10c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_OC2_SetConfig+0xb0>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a19      	ldr	r2, [pc, #100]	; (8007910 <TIM_OC2_SetConfig+0x110>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d113      	bne.n	80078d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	621a      	str	r2, [r3, #32]
}
 80078f2:	bf00      	nop
 80078f4:	371c      	adds	r7, #28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40012c00 	.word	0x40012c00
 8007904:	40013400 	.word	0x40013400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800

08007914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a27      	ldr	r2, [pc, #156]	; (8007a10 <TIM_OC3_SetConfig+0xfc>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d003      	beq.n	800797e <TIM_OC3_SetConfig+0x6a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <TIM_OC3_SetConfig+0x100>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d10d      	bne.n	800799a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <TIM_OC3_SetConfig+0xfc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00f      	beq.n	80079c2 <TIM_OC3_SetConfig+0xae>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1b      	ldr	r2, [pc, #108]	; (8007a14 <TIM_OC3_SetConfig+0x100>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <TIM_OC3_SetConfig+0xae>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1a      	ldr	r2, [pc, #104]	; (8007a18 <TIM_OC3_SetConfig+0x104>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d007      	beq.n	80079c2 <TIM_OC3_SetConfig+0xae>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <TIM_OC3_SetConfig+0x108>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_OC3_SetConfig+0xae>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <TIM_OC3_SetConfig+0x10c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d113      	bne.n	80079ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	621a      	str	r2, [r3, #32]
}
 8007a04:	bf00      	nop
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	40012c00 	.word	0x40012c00
 8007a14:	40013400 	.word	0x40013400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800

08007a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a28      	ldr	r2, [pc, #160]	; (8007b24 <TIM_OC4_SetConfig+0x100>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC4_SetConfig+0x6c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a27      	ldr	r2, [pc, #156]	; (8007b28 <TIM_OC4_SetConfig+0x104>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10d      	bne.n	8007aac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	031b      	lsls	r3, r3, #12
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <TIM_OC4_SetConfig+0x100>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00f      	beq.n	8007ad4 <TIM_OC4_SetConfig+0xb0>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <TIM_OC4_SetConfig+0x104>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00b      	beq.n	8007ad4 <TIM_OC4_SetConfig+0xb0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <TIM_OC4_SetConfig+0x108>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d007      	beq.n	8007ad4 <TIM_OC4_SetConfig+0xb0>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <TIM_OC4_SetConfig+0x10c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC4_SetConfig+0xb0>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a19      	ldr	r2, [pc, #100]	; (8007b34 <TIM_OC4_SetConfig+0x110>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d113      	bne.n	8007afc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ada:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ae2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	019b      	lsls	r3, r3, #6
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	019b      	lsls	r3, r3, #6
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40013400 	.word	0x40013400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800

08007b38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a17      	ldr	r2, [pc, #92]	; (8007bec <TIM_OC5_SetConfig+0xb4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00f      	beq.n	8007bb2 <TIM_OC5_SetConfig+0x7a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a16      	ldr	r2, [pc, #88]	; (8007bf0 <TIM_OC5_SetConfig+0xb8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00b      	beq.n	8007bb2 <TIM_OC5_SetConfig+0x7a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <TIM_OC5_SetConfig+0xbc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d007      	beq.n	8007bb2 <TIM_OC5_SetConfig+0x7a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <TIM_OC5_SetConfig+0xc0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_OC5_SetConfig+0x7a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <TIM_OC5_SetConfig+0xc4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d109      	bne.n	8007bc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	621a      	str	r2, [r3, #32]
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800

08007c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	051b      	lsls	r3, r3, #20
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <TIM_OC6_SetConfig+0xb8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00f      	beq.n	8007c7c <TIM_OC6_SetConfig+0x7c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <TIM_OC6_SetConfig+0xbc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00b      	beq.n	8007c7c <TIM_OC6_SetConfig+0x7c>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a16      	ldr	r2, [pc, #88]	; (8007cc0 <TIM_OC6_SetConfig+0xc0>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <TIM_OC6_SetConfig+0x7c>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a15      	ldr	r2, [pc, #84]	; (8007cc4 <TIM_OC6_SetConfig+0xc4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_OC6_SetConfig+0x7c>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <TIM_OC6_SetConfig+0xc8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d109      	bne.n	8007c90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	029b      	lsls	r3, r3, #10
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	621a      	str	r2, [r3, #32]
}
 8007caa:	bf00      	nop
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40012c00 	.word	0x40012c00
 8007cbc:	40013400 	.word	0x40013400
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800

08007ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0201 	bic.w	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f023 030a 	bic.w	r3, r3, #10
 8007d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f023 0210 	bic.w	r2, r3, #16
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	031b      	lsls	r3, r3, #12
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f043 0307 	orr.w	r3, r3, #7
 8007db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	609a      	str	r2, [r3, #8]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 031f 	and.w	r3, r3, #31
 8007e16:	2201      	movs	r2, #1
 8007e18:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1a      	ldr	r2, [r3, #32]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	43db      	mvns	r3, r3
 8007e26:	401a      	ands	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e065      	b.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a2c      	ldr	r2, [pc, #176]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2b      	ldr	r2, [pc, #172]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d108      	bne.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d018      	beq.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ede:	d013      	beq.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d009      	beq.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d10c      	bne.n	8007f22 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40014000 	.word	0x40014000

08007f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e073      	b.n	8008058 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	041b      	lsls	r3, r3, #16
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a19      	ldr	r2, [pc, #100]	; (8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d004      	beq.n	800800c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a18      	ldr	r2, [pc, #96]	; (8008068 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d11c      	bne.n	8008046 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	051b      	lsls	r3, r3, #20
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40012c00 	.word	0x40012c00
 8008068:	40013400 	.word	0x40013400

0800806c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e042      	b.n	8008190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fa f9d3 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2224      	movs	r2, #36	; 0x24
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 faf4 	bl	8008730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f825 	bl	8008198 <UART_SetConfig>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e01b      	b.n	8008190 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb73 	bl	8008874 <UART_CheckIdleState>
 800818e:	4603      	mov	r3, r0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800819c:	b08c      	sub	sp, #48	; 0x30
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	4313      	orrs	r3, r2
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4bab      	ldr	r3, [pc, #684]	; (8008474 <UART_SetConfig+0x2dc>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d0:	430b      	orrs	r3, r1
 80081d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4aa0      	ldr	r2, [pc, #640]	; (8008478 <UART_SetConfig+0x2e0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008200:	4313      	orrs	r3, r2
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800820e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008218:	430b      	orrs	r3, r1
 800821a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	f023 010f 	bic.w	r1, r3, #15
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a91      	ldr	r2, [pc, #580]	; (800847c <UART_SetConfig+0x2e4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d125      	bne.n	8008288 <UART_SetConfig+0xf0>
 800823c:	4b90      	ldr	r3, [pc, #576]	; (8008480 <UART_SetConfig+0x2e8>)
 800823e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	2b03      	cmp	r3, #3
 8008248:	d81a      	bhi.n	8008280 <UART_SetConfig+0xe8>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0xb8>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008261 	.word	0x08008261
 8008254:	08008271 	.word	0x08008271
 8008258:	08008269 	.word	0x08008269
 800825c:	08008279 	.word	0x08008279
 8008260:	2301      	movs	r3, #1
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008266:	e0d6      	b.n	8008416 <UART_SetConfig+0x27e>
 8008268:	2302      	movs	r3, #2
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826e:	e0d2      	b.n	8008416 <UART_SetConfig+0x27e>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008276:	e0ce      	b.n	8008416 <UART_SetConfig+0x27e>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827e:	e0ca      	b.n	8008416 <UART_SetConfig+0x27e>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008286:	e0c6      	b.n	8008416 <UART_SetConfig+0x27e>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a7d      	ldr	r2, [pc, #500]	; (8008484 <UART_SetConfig+0x2ec>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d138      	bne.n	8008304 <UART_SetConfig+0x16c>
 8008292:	4b7b      	ldr	r3, [pc, #492]	; (8008480 <UART_SetConfig+0x2e8>)
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008298:	f003 030c 	and.w	r3, r3, #12
 800829c:	2b0c      	cmp	r3, #12
 800829e:	d82d      	bhi.n	80082fc <UART_SetConfig+0x164>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <UART_SetConfig+0x110>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	080082fd 	.word	0x080082fd
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	080082ed 	.word	0x080082ed
 80082bc:	080082fd 	.word	0x080082fd
 80082c0:	080082fd 	.word	0x080082fd
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	080082e5 	.word	0x080082e5
 80082cc:	080082fd 	.word	0x080082fd
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	080082fd 	.word	0x080082fd
 80082d8:	080082f5 	.word	0x080082f5
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e098      	b.n	8008416 <UART_SetConfig+0x27e>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e094      	b.n	8008416 <UART_SetConfig+0x27e>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e090      	b.n	8008416 <UART_SetConfig+0x27e>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e08c      	b.n	8008416 <UART_SetConfig+0x27e>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e088      	b.n	8008416 <UART_SetConfig+0x27e>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a5f      	ldr	r2, [pc, #380]	; (8008488 <UART_SetConfig+0x2f0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d125      	bne.n	800835a <UART_SetConfig+0x1c2>
 800830e:	4b5c      	ldr	r3, [pc, #368]	; (8008480 <UART_SetConfig+0x2e8>)
 8008310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008318:	2b30      	cmp	r3, #48	; 0x30
 800831a:	d016      	beq.n	800834a <UART_SetConfig+0x1b2>
 800831c:	2b30      	cmp	r3, #48	; 0x30
 800831e:	d818      	bhi.n	8008352 <UART_SetConfig+0x1ba>
 8008320:	2b20      	cmp	r3, #32
 8008322:	d00a      	beq.n	800833a <UART_SetConfig+0x1a2>
 8008324:	2b20      	cmp	r3, #32
 8008326:	d814      	bhi.n	8008352 <UART_SetConfig+0x1ba>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <UART_SetConfig+0x19a>
 800832c:	2b10      	cmp	r3, #16
 800832e:	d008      	beq.n	8008342 <UART_SetConfig+0x1aa>
 8008330:	e00f      	b.n	8008352 <UART_SetConfig+0x1ba>
 8008332:	2300      	movs	r3, #0
 8008334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008338:	e06d      	b.n	8008416 <UART_SetConfig+0x27e>
 800833a:	2302      	movs	r3, #2
 800833c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008340:	e069      	b.n	8008416 <UART_SetConfig+0x27e>
 8008342:	2304      	movs	r3, #4
 8008344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008348:	e065      	b.n	8008416 <UART_SetConfig+0x27e>
 800834a:	2308      	movs	r3, #8
 800834c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008350:	e061      	b.n	8008416 <UART_SetConfig+0x27e>
 8008352:	2310      	movs	r3, #16
 8008354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008358:	e05d      	b.n	8008416 <UART_SetConfig+0x27e>
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a4b      	ldr	r2, [pc, #300]	; (800848c <UART_SetConfig+0x2f4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d125      	bne.n	80083b0 <UART_SetConfig+0x218>
 8008364:	4b46      	ldr	r3, [pc, #280]	; (8008480 <UART_SetConfig+0x2e8>)
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800836e:	2bc0      	cmp	r3, #192	; 0xc0
 8008370:	d016      	beq.n	80083a0 <UART_SetConfig+0x208>
 8008372:	2bc0      	cmp	r3, #192	; 0xc0
 8008374:	d818      	bhi.n	80083a8 <UART_SetConfig+0x210>
 8008376:	2b80      	cmp	r3, #128	; 0x80
 8008378:	d00a      	beq.n	8008390 <UART_SetConfig+0x1f8>
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	d814      	bhi.n	80083a8 <UART_SetConfig+0x210>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <UART_SetConfig+0x1f0>
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	d008      	beq.n	8008398 <UART_SetConfig+0x200>
 8008386:	e00f      	b.n	80083a8 <UART_SetConfig+0x210>
 8008388:	2300      	movs	r3, #0
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e042      	b.n	8008416 <UART_SetConfig+0x27e>
 8008390:	2302      	movs	r3, #2
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e03e      	b.n	8008416 <UART_SetConfig+0x27e>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e03a      	b.n	8008416 <UART_SetConfig+0x27e>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e036      	b.n	8008416 <UART_SetConfig+0x27e>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e032      	b.n	8008416 <UART_SetConfig+0x27e>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a30      	ldr	r2, [pc, #192]	; (8008478 <UART_SetConfig+0x2e0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d12a      	bne.n	8008410 <UART_SetConfig+0x278>
 80083ba:	4b31      	ldr	r3, [pc, #196]	; (8008480 <UART_SetConfig+0x2e8>)
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c8:	d01a      	beq.n	8008400 <UART_SetConfig+0x268>
 80083ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ce:	d81b      	bhi.n	8008408 <UART_SetConfig+0x270>
 80083d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d4:	d00c      	beq.n	80083f0 <UART_SetConfig+0x258>
 80083d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083da:	d815      	bhi.n	8008408 <UART_SetConfig+0x270>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <UART_SetConfig+0x250>
 80083e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e4:	d008      	beq.n	80083f8 <UART_SetConfig+0x260>
 80083e6:	e00f      	b.n	8008408 <UART_SetConfig+0x270>
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e012      	b.n	8008416 <UART_SetConfig+0x27e>
 80083f0:	2302      	movs	r3, #2
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e00e      	b.n	8008416 <UART_SetConfig+0x27e>
 80083f8:	2304      	movs	r3, #4
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e00a      	b.n	8008416 <UART_SetConfig+0x27e>
 8008400:	2308      	movs	r3, #8
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008406:	e006      	b.n	8008416 <UART_SetConfig+0x27e>
 8008408:	2310      	movs	r3, #16
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840e:	e002      	b.n	8008416 <UART_SetConfig+0x27e>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a17      	ldr	r2, [pc, #92]	; (8008478 <UART_SetConfig+0x2e0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	f040 80a8 	bne.w	8008572 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008426:	2b08      	cmp	r3, #8
 8008428:	d834      	bhi.n	8008494 <UART_SetConfig+0x2fc>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x298>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008455 	.word	0x08008455
 8008434:	08008495 	.word	0x08008495
 8008438:	0800845d 	.word	0x0800845d
 800843c:	08008495 	.word	0x08008495
 8008440:	08008463 	.word	0x08008463
 8008444:	08008495 	.word	0x08008495
 8008448:	08008495 	.word	0x08008495
 800844c:	08008495 	.word	0x08008495
 8008450:	0800846b 	.word	0x0800846b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008454:	f7fd fedc 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800845a:	e021      	b.n	80084a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800845c:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <UART_SetConfig+0x2f8>)
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008460:	e01e      	b.n	80084a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008462:	f7fd fe67 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008468:	e01a      	b.n	80084a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800846a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008470:	e016      	b.n	80084a0 <UART_SetConfig+0x308>
 8008472:	bf00      	nop
 8008474:	cfff69f3 	.word	0xcfff69f3
 8008478:	40008000 	.word	0x40008000
 800847c:	40013800 	.word	0x40013800
 8008480:	40021000 	.word	0x40021000
 8008484:	40004400 	.word	0x40004400
 8008488:	40004800 	.word	0x40004800
 800848c:	40004c00 	.word	0x40004c00
 8008490:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800849e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 812a 	beq.w	80086fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	4a9e      	ldr	r2, [pc, #632]	; (8008728 <UART_SetConfig+0x590>)
 80084ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	4413      	add	r3, r2
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d305      	bcc.n	80084d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d903      	bls.n	80084e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084de:	e10d      	b.n	80086fc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	2200      	movs	r2, #0
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	60fa      	str	r2, [r7, #12]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	4a8e      	ldr	r2, [pc, #568]	; (8008728 <UART_SetConfig+0x590>)
 80084ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2200      	movs	r2, #0
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008502:	f7f7 fe89 	bl	8000218 <__aeabi_uldivmod>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	020b      	lsls	r3, r1, #8
 8008518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800851c:	0202      	lsls	r2, r0, #8
 800851e:	6979      	ldr	r1, [r7, #20]
 8008520:	6849      	ldr	r1, [r1, #4]
 8008522:	0849      	lsrs	r1, r1, #1
 8008524:	2000      	movs	r0, #0
 8008526:	460c      	mov	r4, r1
 8008528:	4605      	mov	r5, r0
 800852a:	eb12 0804 	adds.w	r8, r2, r4
 800852e:	eb43 0905 	adc.w	r9, r3, r5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	469a      	mov	sl, r3
 800853a:	4693      	mov	fp, r2
 800853c:	4652      	mov	r2, sl
 800853e:	465b      	mov	r3, fp
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	f7f7 fe68 	bl	8000218 <__aeabi_uldivmod>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4613      	mov	r3, r2
 800854e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008556:	d308      	bcc.n	800856a <UART_SetConfig+0x3d2>
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800855e:	d204      	bcs.n	800856a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6a3a      	ldr	r2, [r7, #32]
 8008566:	60da      	str	r2, [r3, #12]
 8008568:	e0c8      	b.n	80086fc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008570:	e0c4      	b.n	80086fc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800857a:	d167      	bne.n	800864c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800857c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008580:	2b08      	cmp	r3, #8
 8008582:	d828      	bhi.n	80085d6 <UART_SetConfig+0x43e>
 8008584:	a201      	add	r2, pc, #4	; (adr r2, 800858c <UART_SetConfig+0x3f4>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	080085b1 	.word	0x080085b1
 8008590:	080085b9 	.word	0x080085b9
 8008594:	080085c1 	.word	0x080085c1
 8008598:	080085d7 	.word	0x080085d7
 800859c:	080085c7 	.word	0x080085c7
 80085a0:	080085d7 	.word	0x080085d7
 80085a4:	080085d7 	.word	0x080085d7
 80085a8:	080085d7 	.word	0x080085d7
 80085ac:	080085cf 	.word	0x080085cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fd fe2e 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 80085b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085b6:	e014      	b.n	80085e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b8:	f7fd fe40 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 80085bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085be:	e010      	b.n	80085e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085c0:	4b5a      	ldr	r3, [pc, #360]	; (800872c <UART_SetConfig+0x594>)
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085c4:	e00d      	b.n	80085e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c6:	f7fd fdb5 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80085ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085cc:	e009      	b.n	80085e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085d4:	e005      	b.n	80085e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8089 	beq.w	80086fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	4a4e      	ldr	r2, [pc, #312]	; (8008728 <UART_SetConfig+0x590>)
 80085f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085fc:	005a      	lsls	r2, r3, #1
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	441a      	add	r2, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2b0f      	cmp	r3, #15
 8008614:	d916      	bls.n	8008644 <UART_SetConfig+0x4ac>
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800861c:	d212      	bcs.n	8008644 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f023 030f 	bic.w	r3, r3, #15
 8008626:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	b29a      	uxth	r2, r3
 8008634:	8bfb      	ldrh	r3, [r7, #30]
 8008636:	4313      	orrs	r3, r2
 8008638:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	8bfa      	ldrh	r2, [r7, #30]
 8008640:	60da      	str	r2, [r3, #12]
 8008642:	e05b      	b.n	80086fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800864a:	e057      	b.n	80086fc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800864c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008650:	2b08      	cmp	r3, #8
 8008652:	d828      	bhi.n	80086a6 <UART_SetConfig+0x50e>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <UART_SetConfig+0x4c4>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008681 	.word	0x08008681
 8008660:	08008689 	.word	0x08008689
 8008664:	08008691 	.word	0x08008691
 8008668:	080086a7 	.word	0x080086a7
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a7 	.word	0x080086a7
 8008674:	080086a7 	.word	0x080086a7
 8008678:	080086a7 	.word	0x080086a7
 800867c:	0800869f 	.word	0x0800869f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fd fdc6 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8008684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008686:	e014      	b.n	80086b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008688:	f7fd fdd8 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 800868c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800868e:	e010      	b.n	80086b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008690:	4b26      	ldr	r3, [pc, #152]	; (800872c <UART_SetConfig+0x594>)
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008694:	e00d      	b.n	80086b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008696:	f7fd fd4d 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 800869a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800869c:	e009      	b.n	80086b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a4:	e005      	b.n	80086b2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086b0:	bf00      	nop
    }

    if (pclk != 0U)
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d021      	beq.n	80086fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	4a1a      	ldr	r2, [pc, #104]	; (8008728 <UART_SetConfig+0x590>)
 80086be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c2:	461a      	mov	r2, r3
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	085b      	lsrs	r3, r3, #1
 80086d0:	441a      	add	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	2b0f      	cmp	r3, #15
 80086e0:	d909      	bls.n	80086f6 <UART_SetConfig+0x55e>
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e8:	d205      	bcs.n	80086f6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60da      	str	r2, [r3, #12]
 80086f4:	e002      	b.n	80086fc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2201      	movs	r2, #1
 8008700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2201      	movs	r2, #1
 8008708:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2200      	movs	r2, #0
 8008710:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008718:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800871c:	4618      	mov	r0, r3
 800871e:	3730      	adds	r7, #48	; 0x30
 8008720:	46bd      	mov	sp, r7
 8008722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008726:	bf00      	nop
 8008728:	0800da84 	.word	0x0800da84
 800872c:	00f42400 	.word	0x00f42400

08008730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	f003 0308 	and.w	r3, r3, #8
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01a      	beq.n	8008846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800882e:	d10a      	bne.n	8008846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	605a      	str	r2, [r3, #4]
  }
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b098      	sub	sp, #96	; 0x60
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008884:	f7f9 ff24 	bl	80026d0 <HAL_GetTick>
 8008888:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b08      	cmp	r3, #8
 8008896:	d12f      	bne.n	80088f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a0:	2200      	movs	r2, #0
 80088a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f88e 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d022      	beq.n	80088f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c6:	653b      	str	r3, [r7, #80]	; 0x50
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
 80088d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e063      	b.n	80089c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b04      	cmp	r3, #4
 8008904:	d149      	bne.n	800899a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800890e:	2200      	movs	r2, #0
 8008910:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f857 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d03c      	beq.n	800899a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	623b      	str	r3, [r7, #32]
   return(result);
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893e:	633b      	str	r3, [r7, #48]	; 0x30
 8008940:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e6      	bne.n	8008920 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	60fb      	str	r3, [r7, #12]
   return(result);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	64bb      	str	r3, [r7, #72]	; 0x48
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008972:	61fa      	str	r2, [r7, #28]
 8008974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	69b9      	ldr	r1, [r7, #24]
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	617b      	str	r3, [r7, #20]
   return(result);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e5      	bne.n	8008952 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e012      	b.n	80089c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3758      	adds	r7, #88	; 0x58
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4613      	mov	r3, r2
 80089d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d8:	e04f      	b.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d04b      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e2:	f7f9 fe75 	bl	80026d0 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e04e      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d037      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b80      	cmp	r3, #128	; 0x80
 8008a0e:	d034      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d031      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d110      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2208      	movs	r2, #8
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f838 	bl	8008aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2208      	movs	r2, #8
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e029      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a54:	d111      	bne.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f81e 	bl	8008aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e00f      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4013      	ands	r3, r2
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	bf0c      	ite	eq
 8008a8a:	2301      	moveq	r3, #1
 8008a8c:	2300      	movne	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d0a0      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b095      	sub	sp, #84	; 0x54
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e6      	bne.n	8008aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e3      	bne.n	8008adc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d118      	bne.n	8008b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f023 0310 	bic.w	r3, r3, #16
 8008b30:	647b      	str	r3, [r7, #68]	; 0x44
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b3a:	61bb      	str	r3, [r7, #24]
 8008b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6979      	ldr	r1, [r7, #20]
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e6      	bne.n	8008b1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b62:	bf00      	nop
 8008b64:	3754      	adds	r7, #84	; 0x54
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e027      	b.n	8008bd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2224      	movs	r2, #36	; 0x24
 8008b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e02d      	b.n	8008c54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2224      	movs	r2, #36	; 0x24
 8008c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0201 	bic.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f84f 	bl	8008cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e02d      	b.n	8008cd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2224      	movs	r2, #36	; 0x24
 8008c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f811 	bl	8008cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d108      	bne.n	8008cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cf8:	e031      	b.n	8008d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cfe:	2308      	movs	r3, #8
 8008d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	0e5b      	lsrs	r3, r3, #25
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	0f5b      	lsrs	r3, r3, #29
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	7b3a      	ldrb	r2, [r7, #12]
 8008d26:	4911      	ldr	r1, [pc, #68]	; (8008d6c <UARTEx_SetNbDataToProcess+0x94>)
 8008d28:	5c8a      	ldrb	r2, [r1, r2]
 8008d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d2e:	7b3a      	ldrb	r2, [r7, #12]
 8008d30:	490f      	ldr	r1, [pc, #60]	; (8008d70 <UARTEx_SetNbDataToProcess+0x98>)
 8008d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	7b7a      	ldrb	r2, [r7, #13]
 8008d44:	4909      	ldr	r1, [pc, #36]	; (8008d6c <UARTEx_SetNbDataToProcess+0x94>)
 8008d46:	5c8a      	ldrb	r2, [r1, r2]
 8008d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d4c:	7b7a      	ldrb	r2, [r7, #13]
 8008d4e:	4908      	ldr	r1, [pc, #32]	; (8008d70 <UARTEx_SetNbDataToProcess+0x98>)
 8008d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	0800da9c 	.word	0x0800da9c
 8008d70:	0800daa4 	.word	0x0800daa4

08008d74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d84:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008d88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008daa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008dae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	1d3b      	adds	r3, r7, #4
 8008de2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b09d      	sub	sp, #116	; 0x74
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	78db      	ldrb	r3, [r3, #3]
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d81f      	bhi.n	8008e86 <USB_ActivateEndpoint+0x72>
 8008e46:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USB_ActivateEndpoint+0x38>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008e5d 	.word	0x08008e5d
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e8f 	.word	0x08008e8f
 8008e58:	08008e6b 	.word	0x08008e6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008e5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e68:	e012      	b.n	8008e90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e76:	e00b      	b.n	8008e90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008e78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e84:	e004      	b.n	8008e90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008e8c:	e000      	b.n	8008e90 <USB_ActivateEndpoint+0x7c>
      break;
 8008e8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	b21b      	sxth	r3, r3
 8008ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eca:	b21a      	sxth	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	b21b      	sxth	r3, r3
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	b21b      	sxth	r3, r3
 8008ed6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	7b1b      	ldrb	r3, [r3, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8178 	bne.w	80091f6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	785b      	ldrb	r3, [r3, #1]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8084 	beq.w	8009018 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	4413      	add	r3, r2
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	00da      	lsls	r2, r3, #3
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	827b      	strh	r3, [r7, #18]
 8008f52:	8a7b      	ldrh	r3, [r7, #18]
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d01b      	beq.n	8008f94 <USB_ActivateEndpoint+0x180>
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f72:	823b      	strh	r3, [r7, #16]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	441a      	add	r2, r3
 8008f7e:	8a3b      	ldrh	r3, [r7, #16]
 8008f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	78db      	ldrb	r3, [r3, #3]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d020      	beq.n	8008fde <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb2:	81bb      	strh	r3, [r7, #12]
 8008fb4:	89bb      	ldrh	r3, [r7, #12]
 8008fb6:	f083 0320 	eor.w	r3, r3, #32
 8008fba:	81bb      	strh	r3, [r7, #12]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	441a      	add	r2, r3
 8008fc6:	89bb      	ldrh	r3, [r7, #12]
 8008fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	8013      	strh	r3, [r2, #0]
 8008fdc:	e2d5      	b.n	800958a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff4:	81fb      	strh	r3, [r7, #14]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	441a      	add	r2, r3
 8009000:	89fb      	ldrh	r3, [r7, #14]
 8009002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	8013      	strh	r3, [r2, #0]
 8009016:	e2b8      	b.n	800958a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	633b      	str	r3, [r7, #48]	; 0x30
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009022:	b29b      	uxth	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	4413      	add	r3, r2
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	00da      	lsls	r2, r3, #3
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	4413      	add	r3, r2
 8009036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800903a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	88db      	ldrh	r3, [r3, #6]
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	b29b      	uxth	r3, r3
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009056:	b29b      	uxth	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	4413      	add	r3, r2
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	00da      	lsls	r2, r3, #3
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	4413      	add	r3, r2
 800906a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800907a:	b29a      	uxth	r2, r3
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b3e      	cmp	r3, #62	; 0x3e
 8009086:	d91d      	bls.n	80090c4 <USB_ActivateEndpoint+0x2b0>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	095b      	lsrs	r3, r3, #5
 800908e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	f003 031f 	and.w	r3, r3, #31
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <USB_ActivateEndpoint+0x28e>
 800909c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800909e:	3b01      	subs	r3, #1
 80090a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	029b      	lsls	r3, r3, #10
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	4313      	orrs	r3, r2
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090bc:	b29a      	uxth	r2, r3
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	801a      	strh	r2, [r3, #0]
 80090c2:	e026      	b.n	8009112 <USB_ActivateEndpoint+0x2fe>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10a      	bne.n	80090e2 <USB_ActivateEndpoint+0x2ce>
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090da:	b29a      	uxth	r2, r3
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	e017      	b.n	8009112 <USB_ActivateEndpoint+0x2fe>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	085b      	lsrs	r3, r3, #1
 80090e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <USB_ActivateEndpoint+0x2e8>
 80090f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090f8:	3301      	adds	r3, #1
 80090fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	b29a      	uxth	r2, r3
 8009102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009104:	b29b      	uxth	r3, r3
 8009106:	029b      	lsls	r3, r3, #10
 8009108:	b29b      	uxth	r3, r3
 800910a:	4313      	orrs	r3, r2
 800910c:	b29a      	uxth	r2, r3
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01b      	beq.n	8009162 <USB_ActivateEndpoint+0x34e>
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800913c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009140:	843b      	strh	r3, [r7, #32]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	441a      	add	r2, r3
 800914c:	8c3b      	ldrh	r3, [r7, #32]
 800914e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800915a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915e:	b29b      	uxth	r3, r3
 8009160:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d124      	bne.n	80091b4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	b29b      	uxth	r3, r3
 8009178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800917c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009180:	83bb      	strh	r3, [r7, #28]
 8009182:	8bbb      	ldrh	r3, [r7, #28]
 8009184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009188:	83bb      	strh	r3, [r7, #28]
 800918a:	8bbb      	ldrh	r3, [r7, #28]
 800918c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009190:	83bb      	strh	r3, [r7, #28]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	441a      	add	r2, r3
 800919c:	8bbb      	ldrh	r3, [r7, #28]
 800919e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	8013      	strh	r3, [r2, #0]
 80091b2:	e1ea      	b.n	800958a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ca:	83fb      	strh	r3, [r7, #30]
 80091cc:	8bfb      	ldrh	r3, [r7, #30]
 80091ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091d2:	83fb      	strh	r3, [r7, #30]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	441a      	add	r2, r3
 80091de:	8bfb      	ldrh	r3, [r7, #30]
 80091e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	8013      	strh	r3, [r2, #0]
 80091f4:	e1c9      	b.n	800958a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d11e      	bne.n	800923c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009214:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	441a      	add	r2, r3
 8009222:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800922a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800922e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009236:	b29b      	uxth	r3, r3
 8009238:	8013      	strh	r3, [r2, #0]
 800923a:	e01d      	b.n	8009278 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800924e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009252:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	441a      	add	r2, r3
 8009260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800926c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009274:	b29b      	uxth	r3, r3
 8009276:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009282:	b29b      	uxth	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009288:	4413      	add	r3, r2
 800928a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	00da      	lsls	r2, r3, #3
 8009292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009294:	4413      	add	r3, r2
 8009296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800929a:	65bb      	str	r3, [r7, #88]	; 0x58
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	891b      	ldrh	r3, [r3, #8]
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092aa:	801a      	strh	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	657b      	str	r3, [r7, #84]	; 0x54
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092bc:	4413      	add	r3, r2
 80092be:	657b      	str	r3, [r7, #84]	; 0x54
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	00da      	lsls	r2, r3, #3
 80092c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092ce:	653b      	str	r3, [r7, #80]	; 0x50
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	895b      	ldrh	r3, [r3, #10]
 80092d4:	085b      	lsrs	r3, r3, #1
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 8093 	bne.w	8009410 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80092fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80092fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01b      	beq.n	800933e <USB_ActivateEndpoint+0x52a>
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	b29b      	uxth	r3, r3
 8009314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	441a      	add	r2, r3
 8009328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800932a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800932e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800933a:	b29b      	uxth	r3, r3
 800933c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800934c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800934e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d01b      	beq.n	800938e <USB_ActivateEndpoint+0x57a>
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	441a      	add	r2, r3
 8009378:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800937a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800937e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800938a:	b29b      	uxth	r3, r3
 800938c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80093a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80093ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	441a      	add	r2, r3
 80093c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	441a      	add	r2, r3
 80093f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940a:	b29b      	uxth	r3, r3
 800940c:	8013      	strh	r3, [r2, #0]
 800940e:	e0bc      	b.n	800958a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009420:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01d      	beq.n	8009468 <USB_ActivateEndpoint+0x654>
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800945c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009464:	b29b      	uxth	r3, r3
 8009466:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009478:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01d      	beq.n	80094c0 <USB_ActivateEndpoint+0x6ac>
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800949a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	441a      	add	r2, r3
 80094a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094bc:	b29b      	uxth	r3, r3
 80094be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	78db      	ldrb	r3, [r3, #3]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d024      	beq.n	8009512 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80094e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80094e6:	f083 0320 	eor.w	r3, r3, #32
 80094ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	441a      	add	r2, r3
 80094f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80094fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950c:	b29b      	uxth	r3, r3
 800950e:	8013      	strh	r3, [r2, #0]
 8009510:	e01d      	b.n	800954e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009528:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	441a      	add	r2, r3
 8009536:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800953a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800953e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954a:	b29b      	uxth	r3, r3
 800954c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009564:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	441a      	add	r2, r3
 8009572:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800957e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009586:	b29b      	uxth	r3, r3
 8009588:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800958a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800958e:	4618      	mov	r0, r3
 8009590:	3774      	adds	r7, #116	; 0x74
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop

0800959c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800959c:	b480      	push	{r7}
 800959e:	b08d      	sub	sp, #52	; 0x34
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	7b1b      	ldrb	r3, [r3, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f040 808e 	bne.w	80096cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d044      	beq.n	8009642 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	81bb      	strh	r3, [r7, #12]
 80095c6:	89bb      	ldrh	r3, [r7, #12]
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d01b      	beq.n	8009608 <USB_DeactivateEndpoint+0x6c>
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e6:	817b      	strh	r3, [r7, #10]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	441a      	add	r2, r3
 80095f2:	897b      	ldrh	r3, [r7, #10]
 80095f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009604:	b29b      	uxth	r3, r3
 8009606:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800961e:	813b      	strh	r3, [r7, #8]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	441a      	add	r2, r3
 800962a:	893b      	ldrh	r3, [r7, #8]
 800962c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963c:	b29b      	uxth	r3, r3
 800963e:	8013      	strh	r3, [r2, #0]
 8009640:	e192      	b.n	8009968 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	827b      	strh	r3, [r7, #18]
 8009650:	8a7b      	ldrh	r3, [r7, #18]
 8009652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01b      	beq.n	8009692 <USB_DeactivateEndpoint+0xf6>
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	b29b      	uxth	r3, r3
 8009668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800966c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009670:	823b      	strh	r3, [r7, #16]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	441a      	add	r2, r3
 800967c:	8a3b      	ldrh	r3, [r7, #16]
 800967e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	b29b      	uxth	r3, r3
 8009690:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a8:	81fb      	strh	r3, [r7, #14]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	441a      	add	r2, r3
 80096b4:	89fb      	ldrh	r3, [r7, #14]
 80096b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	8013      	strh	r3, [r2, #0]
 80096ca:	e14d      	b.n	8009968 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 80a5 	bne.w	8009820 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	843b      	strh	r3, [r7, #32]
 80096e4:	8c3b      	ldrh	r3, [r7, #32]
 80096e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01b      	beq.n	8009726 <USB_DeactivateEndpoint+0x18a>
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009704:	83fb      	strh	r3, [r7, #30]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	441a      	add	r2, r3
 8009710:	8bfb      	ldrh	r3, [r7, #30]
 8009712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800971a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800971e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009722:	b29b      	uxth	r3, r3
 8009724:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	83bb      	strh	r3, [r7, #28]
 8009734:	8bbb      	ldrh	r3, [r7, #28]
 8009736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01b      	beq.n	8009776 <USB_DeactivateEndpoint+0x1da>
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	b29b      	uxth	r3, r3
 800974c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009754:	837b      	strh	r3, [r7, #26]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	441a      	add	r2, r3
 8009760:	8b7b      	ldrh	r3, [r7, #26]
 8009762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800976a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800976e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009772:	b29b      	uxth	r3, r3
 8009774:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978c:	833b      	strh	r3, [r7, #24]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	441a      	add	r2, r3
 8009798:	8b3b      	ldrh	r3, [r7, #24]
 800979a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c4:	82fb      	strh	r3, [r7, #22]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	441a      	add	r2, r3
 80097d0:	8afb      	ldrh	r3, [r7, #22]
 80097d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097fc:	82bb      	strh	r3, [r7, #20]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	441a      	add	r2, r3
 8009808:	8abb      	ldrh	r3, [r7, #20]
 800980a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800980e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981a:	b29b      	uxth	r3, r3
 800981c:	8013      	strh	r3, [r2, #0]
 800981e:	e0a3      	b.n	8009968 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800982e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01b      	beq.n	8009870 <USB_DeactivateEndpoint+0x2d4>
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800984a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	441a      	add	r2, r3
 800985a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800985c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986c:	b29b      	uxth	r3, r3
 800986e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800987e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01b      	beq.n	80098c0 <USB_DeactivateEndpoint+0x324>
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	853b      	strh	r3, [r7, #40]	; 0x28
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	441a      	add	r2, r3
 80098aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098bc:	b29b      	uxth	r3, r3
 80098be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	441a      	add	r2, r3
 80098e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800990a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	441a      	add	r2, r3
 800991a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	b29b      	uxth	r3, r3
 800992e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	847b      	strh	r3, [r7, #34]	; 0x22
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	441a      	add	r2, r3
 8009952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009964:	b29b      	uxth	r3, r3
 8009966:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3734      	adds	r7, #52	; 0x34
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b0c2      	sub	sp, #264	; 0x108
 800997a:	af00      	add	r7, sp, #0
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009984:	6018      	str	r0, [r3, #0]
 8009986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800998e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	785b      	ldrb	r3, [r3, #1]
 800999c:	2b01      	cmp	r3, #1
 800999e:	f040 86b7 	bne.w	800a710 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80099a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d908      	bls.n	80099d0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099ce:	e007      	b.n	80099e0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80099d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80099e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	7b1b      	ldrb	r3, [r3, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d13a      	bne.n	8009a66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80099f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6959      	ldr	r1, [r3, #20]
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	88da      	ldrh	r2, [r3, #6]
 8009a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a16:	6800      	ldr	r0, [r0, #0]
 8009a18:	f001 fc98 	bl	800b34c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	613b      	str	r3, [r7, #16]
 8009a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]
 8009a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	00da      	lsls	r2, r3, #3
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	801a      	strh	r2, [r3, #0]
 8009a62:	f000 be1f 	b.w	800a6a4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	78db      	ldrb	r3, [r3, #3]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	f040 8462 	bne.w	800a33c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6a1a      	ldr	r2, [r3, #32]
 8009a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	f240 83df 	bls.w	800a254 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	441a      	add	r2, r3
 8009ada:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ae6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6a1a      	ldr	r2, [r3, #32]
 8009afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b02:	1ad2      	subs	r2, r2, r3
 8009b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 81c7 	beq.w	8009ec6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	633b      	str	r3, [r7, #48]	; 0x30
 8009b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	785b      	ldrb	r3, [r3, #1]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d177      	bne.n	8009c44 <USB_EPStartXfer+0x2ce>
 8009b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b74:	4413      	add	r3, r2
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	00da      	lsls	r2, r3, #3
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	4413      	add	r3, r2
 8009b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ba6:	d921      	bls.n	8009bec <USB_EPStartXfer+0x276>
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d104      	bne.n	8009bc8 <USB_EPStartXfer+0x252>
 8009bbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	029b      	lsls	r3, r3, #10
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	801a      	strh	r2, [r3, #0]
 8009bea:	e050      	b.n	8009c8e <USB_EPStartXfer+0x318>
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <USB_EPStartXfer+0x294>
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	801a      	strh	r2, [r3, #0]
 8009c08:	e041      	b.n	8009c8e <USB_EPStartXfer+0x318>
 8009c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d004      	beq.n	8009c2a <USB_EPStartXfer+0x2b4>
 8009c20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c24:	3301      	adds	r3, #1
 8009c26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	029b      	lsls	r3, r3, #10
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	801a      	strh	r2, [r3, #0]
 8009c42:	e024      	b.n	8009c8e <USB_EPStartXfer+0x318>
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d11c      	bne.n	8009c8e <USB_EPStartXfer+0x318>
 8009c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	4413      	add	r3, r2
 8009c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8009c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	00da      	lsls	r2, r3, #3
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	895b      	ldrh	r3, [r3, #10]
 8009c9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6959      	ldr	r1, [r3, #20]
 8009caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009cb4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009cb8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f001 fb45 	bl	800b34c <USB_WritePMA>
            ep->xfer_buff += len;
 8009cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695a      	ldr	r2, [r3, #20]
 8009cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd2:	441a      	add	r2, r3
 8009cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6a1a      	ldr	r2, [r3, #32]
 8009cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d90f      	bls.n	8009d1c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6a1a      	ldr	r2, [r3, #32]
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0c:	1ad2      	subs	r2, r2, r3
 8009d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	621a      	str	r2, [r3, #32]
 8009d1a:	e00e      	b.n	8009d3a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d177      	bne.n	8009e3a <USB_EPStartXfer+0x4c4>
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	461a      	mov	r2, r3
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	00da      	lsls	r2, r3, #3
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	801a      	strh	r2, [r3, #0]
 8009d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8009d9c:	d921      	bls.n	8009de2 <USB_EPStartXfer+0x46c>
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da2:	095b      	lsrs	r3, r3, #5
 8009da4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dac:	f003 031f 	and.w	r3, r3, #31
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <USB_EPStartXfer+0x448>
 8009db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009db8:	3b01      	subs	r3, #1
 8009dba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	029b      	lsls	r3, r3, #10
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	801a      	strh	r2, [r3, #0]
 8009de0:	e056      	b.n	8009e90 <USB_EPStartXfer+0x51a>
 8009de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <USB_EPStartXfer+0x48a>
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	e047      	b.n	8009e90 <USB_EPStartXfer+0x51a>
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USB_EPStartXfer+0x4aa>
 8009e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	029b      	lsls	r3, r3, #10
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4313      	orrs	r3, r2
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e02a      	b.n	8009e90 <USB_EPStartXfer+0x51a>
 8009e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d122      	bne.n	8009e90 <USB_EPStartXfer+0x51a>
 8009e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	623b      	str	r3, [r7, #32]
 8009e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	461a      	mov	r2, r3
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	623b      	str	r3, [r7, #32]
 8009e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	00da      	lsls	r2, r3, #3
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e84:	61fb      	str	r3, [r7, #28]
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	891b      	ldrh	r3, [r3, #8]
 8009e9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6959      	ldr	r1, [r3, #20]
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009eb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009eba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ebe:	6800      	ldr	r0, [r0, #0]
 8009ec0:	f001 fa44 	bl	800b34c <USB_WritePMA>
 8009ec4:	e3ee      	b.n	800a6a4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	785b      	ldrb	r3, [r3, #1]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d177      	bne.n	8009fc6 <USB_EPStartXfer+0x650>
 8009ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef6:	4413      	add	r3, r2
 8009ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	00da      	lsls	r2, r3, #3
 8009f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f10:	647b      	str	r3, [r7, #68]	; 0x44
 8009f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f26:	2b3e      	cmp	r3, #62	; 0x3e
 8009f28:	d921      	bls.n	8009f6e <USB_EPStartXfer+0x5f8>
 8009f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f38:	f003 031f 	and.w	r3, r3, #31
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d104      	bne.n	8009f4a <USB_EPStartXfer+0x5d4>
 8009f40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f44:	3b01      	subs	r3, #1
 8009f46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	029b      	lsls	r3, r3, #10
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	e056      	b.n	800a01c <USB_EPStartXfer+0x6a6>
 8009f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <USB_EPStartXfer+0x616>
 8009f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e047      	b.n	800a01c <USB_EPStartXfer+0x6a6>
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f90:	085b      	lsrs	r3, r3, #1
 8009f92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d004      	beq.n	8009fac <USB_EPStartXfer+0x636>
 8009fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	029b      	lsls	r3, r3, #10
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fc2:	801a      	strh	r2, [r3, #0]
 8009fc4:	e02a      	b.n	800a01c <USB_EPStartXfer+0x6a6>
 8009fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d122      	bne.n	800a01c <USB_EPStartXfer+0x6a6>
 8009fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	653b      	str	r3, [r7, #80]	; 0x50
 8009fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff6:	4413      	add	r3, r2
 8009ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8009ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	00da      	lsls	r2, r3, #3
 800a008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00a:	4413      	add	r3, r2
 800a00c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a010:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a016:	b29a      	uxth	r2, r3
 800a018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	891b      	ldrh	r3, [r3, #8]
 800a028:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6959      	ldr	r1, [r3, #20]
 800a038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a042:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a046:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	f001 f97e 	bl	800b34c <USB_WritePMA>
            ep->xfer_buff += len;
 800a050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	695a      	ldr	r2, [r3, #20]
 800a05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a060:	441a      	add	r2, r3
 800a062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6a1a      	ldr	r2, [r3, #32]
 800a07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a07e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	429a      	cmp	r2, r3
 800a088:	d90f      	bls.n	800a0aa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6a1a      	ldr	r2, [r3, #32]
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	621a      	str	r2, [r3, #32]
 800a0a8:	e00e      	b.n	800a0c8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	643b      	str	r3, [r7, #64]	; 0x40
 800a0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d177      	bne.n	800a1d4 <USB_EPStartXfer+0x85e>
 800a0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	461a      	mov	r2, r3
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	4413      	add	r3, r2
 800a106:	63bb      	str	r3, [r7, #56]	; 0x38
 800a108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	00da      	lsls	r2, r3, #3
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	4413      	add	r3, r2
 800a11a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	801a      	strh	r2, [r3, #0]
 800a130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a134:	2b3e      	cmp	r3, #62	; 0x3e
 800a136:	d921      	bls.n	800a17c <USB_EPStartXfer+0x806>
 800a138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13c:	095b      	lsrs	r3, r3, #5
 800a13e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a146:	f003 031f 	and.w	r3, r3, #31
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <USB_EPStartXfer+0x7e2>
 800a14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a152:	3b01      	subs	r3, #1
 800a154:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a162:	b29b      	uxth	r3, r3
 800a164:	029b      	lsls	r3, r3, #10
 800a166:	b29b      	uxth	r3, r3
 800a168:	4313      	orrs	r3, r2
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a174:	b29a      	uxth	r2, r3
 800a176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a178:	801a      	strh	r2, [r3, #0]
 800a17a:	e050      	b.n	800a21e <USB_EPStartXfer+0x8a8>
 800a17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <USB_EPStartXfer+0x824>
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a192:	b29a      	uxth	r2, r3
 800a194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e041      	b.n	800a21e <USB_EPStartXfer+0x8a8>
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19e:	085b      	lsrs	r3, r3, #1
 800a1a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d004      	beq.n	800a1ba <USB_EPStartXfer+0x844>
 800a1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	029b      	lsls	r3, r3, #10
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	801a      	strh	r2, [r3, #0]
 800a1d2:	e024      	b.n	800a21e <USB_EPStartXfer+0x8a8>
 800a1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d11c      	bne.n	800a21e <USB_EPStartXfer+0x8a8>
 800a1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f8:	4413      	add	r3, r2
 800a1fa:	643b      	str	r3, [r7, #64]	; 0x40
 800a1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	00da      	lsls	r2, r3, #3
 800a20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a20c:	4413      	add	r3, r2
 800a20e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a218:	b29a      	uxth	r2, r3
 800a21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	895b      	ldrh	r3, [r3, #10]
 800a22a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6959      	ldr	r1, [r3, #20]
 800a23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23e:	b29b      	uxth	r3, r3
 800a240:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a244:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a248:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a24c:	6800      	ldr	r0, [r0, #0]
 800a24e:	f001 f87d 	bl	800b34c <USB_WritePMA>
 800a252:	e227      	b.n	800a6a4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	441a      	add	r2, r3
 800a2a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a2ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2e0:	4413      	add	r3, r2
 800a2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	00da      	lsls	r2, r3, #3
 800a2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a300:	b29a      	uxth	r2, r3
 800a302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a304:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	891b      	ldrh	r3, [r3, #8]
 800a312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6959      	ldr	r1, [r3, #20]
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a326:	b29b      	uxth	r3, r3
 800a328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a32c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a330:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a334:	6800      	ldr	r0, [r0, #0]
 800a336:	f001 f809 	bl	800b34c <USB_WritePMA>
 800a33a:	e1b3      	b.n	800a6a4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6a1a      	ldr	r2, [r3, #32]
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34c:	1ad2      	subs	r2, r2, r3
 800a34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	b29b      	uxth	r3, r3
 800a378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80c6 	beq.w	800a50e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	673b      	str	r3, [r7, #112]	; 0x70
 800a38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	785b      	ldrb	r3, [r3, #1]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d177      	bne.n	800a48e <USB_EPStartXfer+0xb18>
 800a39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3be:	4413      	add	r3, r2
 800a3c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	00da      	lsls	r2, r3, #3
 800a3d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a3da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a3f0:	d921      	bls.n	800a436 <USB_EPStartXfer+0xac0>
 800a3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a400:	f003 031f 	and.w	r3, r3, #31
 800a404:	2b00      	cmp	r3, #0
 800a406:	d104      	bne.n	800a412 <USB_EPStartXfer+0xa9c>
 800a408:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a40c:	3b01      	subs	r3, #1
 800a40e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29a      	uxth	r2, r3
 800a418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	029b      	lsls	r3, r3, #10
 800a420:	b29b      	uxth	r3, r3
 800a422:	4313      	orrs	r3, r2
 800a424:	b29b      	uxth	r3, r3
 800a426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42e:	b29a      	uxth	r2, r3
 800a430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a432:	801a      	strh	r2, [r3, #0]
 800a434:	e050      	b.n	800a4d8 <USB_EPStartXfer+0xb62>
 800a436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10a      	bne.n	800a454 <USB_EPStartXfer+0xade>
 800a43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a450:	801a      	strh	r2, [r3, #0]
 800a452:	e041      	b.n	800a4d8 <USB_EPStartXfer+0xb62>
 800a454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a458:	085b      	lsrs	r3, r3, #1
 800a45a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d004      	beq.n	800a474 <USB_EPStartXfer+0xafe>
 800a46a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a46e:	3301      	adds	r3, #1
 800a470:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29a      	uxth	r2, r3
 800a47a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a47e:	b29b      	uxth	r3, r3
 800a480:	029b      	lsls	r3, r3, #10
 800a482:	b29b      	uxth	r3, r3
 800a484:	4313      	orrs	r3, r2
 800a486:	b29a      	uxth	r2, r3
 800a488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a48a:	801a      	strh	r2, [r3, #0]
 800a48c:	e024      	b.n	800a4d8 <USB_EPStartXfer+0xb62>
 800a48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	785b      	ldrb	r3, [r3, #1]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d11c      	bne.n	800a4d8 <USB_EPStartXfer+0xb62>
 800a49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4b2:	4413      	add	r3, r2
 800a4b4:	673b      	str	r3, [r7, #112]	; 0x70
 800a4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	00da      	lsls	r2, r3, #3
 800a4c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	895b      	ldrh	r3, [r3, #10]
 800a4e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6959      	ldr	r1, [r3, #20]
 800a4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a502:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a506:	6800      	ldr	r0, [r0, #0]
 800a508:	f000 ff20 	bl	800b34c <USB_WritePMA>
 800a50c:	e0ca      	b.n	800a6a4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d177      	bne.n	800a60e <USB_EPStartXfer+0xc98>
 800a51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a53e:	4413      	add	r3, r2
 800a540:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	00da      	lsls	r2, r3, #3
 800a550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a552:	4413      	add	r3, r2
 800a554:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a558:	67bb      	str	r3, [r7, #120]	; 0x78
 800a55a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a564:	b29a      	uxth	r2, r3
 800a566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a568:	801a      	strh	r2, [r3, #0]
 800a56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56e:	2b3e      	cmp	r3, #62	; 0x3e
 800a570:	d921      	bls.n	800a5b6 <USB_EPStartXfer+0xc40>
 800a572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a576:	095b      	lsrs	r3, r3, #5
 800a578:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a580:	f003 031f 	and.w	r3, r3, #31
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <USB_EPStartXfer+0xc1c>
 800a588:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a58c:	3b01      	subs	r3, #1
 800a58e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29a      	uxth	r2, r3
 800a598:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	029b      	lsls	r3, r3, #10
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	e05c      	b.n	800a670 <USB_EPStartXfer+0xcfa>
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <USB_EPStartXfer+0xc5e>
 800a5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5d0:	801a      	strh	r2, [r3, #0]
 800a5d2:	e04d      	b.n	800a670 <USB_EPStartXfer+0xcfa>
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d8:	085b      	lsrs	r3, r3, #1
 800a5da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <USB_EPStartXfer+0xc7e>
 800a5ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	029b      	lsls	r3, r3, #10
 800a602:	b29b      	uxth	r3, r3
 800a604:	4313      	orrs	r3, r2
 800a606:	b29a      	uxth	r2, r3
 800a608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a60a:	801a      	strh	r2, [r3, #0]
 800a60c:	e030      	b.n	800a670 <USB_EPStartXfer+0xcfa>
 800a60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d128      	bne.n	800a670 <USB_EPStartXfer+0xcfa>
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a642:	4413      	add	r3, r2
 800a644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	00da      	lsls	r2, r3, #3
 800a656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a65a:	4413      	add	r3, r2
 800a65c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a668:	b29a      	uxth	r2, r3
 800a66a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a66e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	891b      	ldrh	r3, [r3, #8]
 800a67c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6959      	ldr	r1, [r3, #20]
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a690:	b29b      	uxth	r3, r3
 800a692:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a696:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a69a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	f000 fe54 	bl	800b34c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ca:	817b      	strh	r3, [r7, #10]
 800a6cc:	897b      	ldrh	r3, [r7, #10]
 800a6ce:	f083 0310 	eor.w	r3, r3, #16
 800a6d2:	817b      	strh	r3, [r7, #10]
 800a6d4:	897b      	ldrh	r3, [r7, #10]
 800a6d6:	f083 0320 	eor.w	r3, r3, #32
 800a6da:	817b      	strh	r3, [r7, #10]
 800a6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	441a      	add	r2, r3
 800a6f6:	897b      	ldrh	r3, [r7, #10]
 800a6f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a708:	b29b      	uxth	r3, r3
 800a70a:	8013      	strh	r3, [r2, #0]
 800a70c:	f000 bcde 	b.w	800b0cc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	7b1b      	ldrb	r3, [r3, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f040 80bb 	bne.w	800a898 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	699a      	ldr	r2, [r3, #24]
 800a72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d917      	bls.n	800a76e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a73e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	619a      	str	r2, [r3, #24]
 800a76c:	e00e      	b.n	800a78c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	00da      	lsls	r2, r3, #3
 800a7c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7e4:	801a      	strh	r2, [r3, #0]
 800a7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ea:	2b3e      	cmp	r3, #62	; 0x3e
 800a7ec:	d924      	bls.n	800a838 <USB_EPStartXfer+0xec2>
 800a7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f2:	095b      	lsrs	r3, r3, #5
 800a7f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fc:	f003 031f 	and.w	r3, r3, #31
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <USB_EPStartXfer+0xe98>
 800a804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a808:	3b01      	subs	r3, #1
 800a80a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a80e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	b29a      	uxth	r2, r3
 800a816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	029b      	lsls	r3, r3, #10
 800a81e:	b29b      	uxth	r3, r3
 800a820:	4313      	orrs	r3, r2
 800a822:	b29b      	uxth	r3, r3
 800a824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	f000 bc10 	b.w	800b058 <USB_EPStartXfer+0x16e2>
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10c      	bne.n	800a85a <USB_EPStartXfer+0xee4>
 800a840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a84c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a850:	b29a      	uxth	r2, r3
 800a852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a856:	801a      	strh	r2, [r3, #0]
 800a858:	e3fe      	b.n	800b058 <USB_EPStartXfer+0x16e2>
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85e:	085b      	lsrs	r3, r3, #1
 800a860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <USB_EPStartXfer+0xf04>
 800a870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a874:	3301      	adds	r3, #1
 800a876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a87a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	b29a      	uxth	r2, r3
 800a882:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a886:	b29b      	uxth	r3, r3
 800a888:	029b      	lsls	r3, r3, #10
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4313      	orrs	r3, r2
 800a88e:	b29a      	uxth	r2, r3
 800a890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	e3df      	b.n	800b058 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	78db      	ldrb	r3, [r3, #3]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	f040 8218 	bne.w	800acda <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 809d 	bne.w	800a9f6 <USB_EPStartXfer+0x1080>
 800a8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	00da      	lsls	r2, r3, #3
 800a8f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a90e:	b29a      	uxth	r2, r3
 800a910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b3e      	cmp	r3, #62	; 0x3e
 800a924:	d92b      	bls.n	800a97e <USB_EPStartXfer+0x1008>
 800a926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	095b      	lsrs	r3, r3, #5
 800a934:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	f003 031f 	and.w	r3, r3, #31
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d104      	bne.n	800a956 <USB_EPStartXfer+0xfe0>
 800a94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a950:	3b01      	subs	r3, #1
 800a952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	b29b      	uxth	r3, r3
 800a964:	029b      	lsls	r3, r3, #10
 800a966:	b29b      	uxth	r3, r3
 800a968:	4313      	orrs	r3, r2
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a974:	b29a      	uxth	r2, r3
 800a976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a97a:	801a      	strh	r2, [r3, #0]
 800a97c:	e070      	b.n	800aa60 <USB_EPStartXfer+0x10ea>
 800a97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10c      	bne.n	800a9a8 <USB_EPStartXfer+0x1032>
 800a98e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	b29b      	uxth	r3, r3
 800a996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9a4:	801a      	strh	r2, [r3, #0]
 800a9a6:	e05b      	b.n	800aa60 <USB_EPStartXfer+0x10ea>
 800a9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	085b      	lsrs	r3, r3, #1
 800a9b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d004      	beq.n	800a9d8 <USB_EPStartXfer+0x1062>
 800a9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	029b      	lsls	r3, r3, #10
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	e034      	b.n	800aa60 <USB_EPStartXfer+0x10ea>
 800a9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d12c      	bne.n	800aa60 <USB_EPStartXfer+0x10ea>
 800aa06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	00da      	lsls	r2, r3, #3
 800aa3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa42:	4413      	add	r3, r2
 800aa44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aa5e:	801a      	strh	r2, [r3, #0]
 800aa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f040 809d 	bne.w	800abba <USB_EPStartXfer+0x1244>
 800aa80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aaaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	00da      	lsls	r2, r3, #3
 800aab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aabc:	4413      	add	r3, r2
 800aabe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aac2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aad8:	801a      	strh	r2, [r3, #0]
 800aada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	2b3e      	cmp	r3, #62	; 0x3e
 800aae8:	d92b      	bls.n	800ab42 <USB_EPStartXfer+0x11cc>
 800aaea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	095b      	lsrs	r3, r3, #5
 800aaf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	f003 031f 	and.w	r3, r3, #31
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d104      	bne.n	800ab1a <USB_EPStartXfer+0x11a4>
 800ab10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab14:	3b01      	subs	r3, #1
 800ab16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	029b      	lsls	r3, r3, #10
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab3e:	801a      	strh	r2, [r3, #0]
 800ab40:	e069      	b.n	800ac16 <USB_EPStartXfer+0x12a0>
 800ab42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10c      	bne.n	800ab6c <USB_EPStartXfer+0x11f6>
 800ab52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab68:	801a      	strh	r2, [r3, #0]
 800ab6a:	e054      	b.n	800ac16 <USB_EPStartXfer+0x12a0>
 800ab6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	085b      	lsrs	r3, r3, #1
 800ab7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <USB_EPStartXfer+0x1226>
 800ab92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab96:	3301      	adds	r3, #1
 800ab98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	029b      	lsls	r3, r3, #10
 800abac:	b29b      	uxth	r3, r3
 800abae:	4313      	orrs	r3, r2
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abb6:	801a      	strh	r2, [r3, #0]
 800abb8:	e02d      	b.n	800ac16 <USB_EPStartXfer+0x12a0>
 800abba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	785b      	ldrb	r3, [r3, #1]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d125      	bne.n	800ac16 <USB_EPStartXfer+0x12a0>
 800abca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abd8:	b29b      	uxth	r3, r3
 800abda:	461a      	mov	r2, r3
 800abdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800abe0:	4413      	add	r3, r2
 800abe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800abe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	00da      	lsls	r2, r3, #3
 800abf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800abf8:	4413      	add	r3, r2
 800abfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac14:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8218 	beq.w	800b058 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <USB_EPStartXfer+0x12ea>
 800ac54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10d      	bne.n	800ac7c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f040 81f5 	bne.w	800b058 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f040 81ee 	bne.w	800b058 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ac7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800aca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	441a      	add	r2, r3
 800acc0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
 800acd8:	e1be      	b.n	800b058 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800acda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	78db      	ldrb	r3, [r3, #3]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	f040 81b4 	bne.w	800b054 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800acec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	699a      	ldr	r2, [r3, #24]
 800acf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d917      	bls.n	800ad38 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ad08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad28:	1ad2      	subs	r2, r2, r3
 800ad2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	619a      	str	r2, [r3, #24]
 800ad36:	e00e      	b.n	800ad56 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ad38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ad48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2200      	movs	r2, #0
 800ad54:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f040 8085 	bne.w	800ae72 <USB_EPStartXfer+0x14fc>
 800ad68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	461a      	mov	r2, r3
 800ad88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	00da      	lsls	r2, r3, #3
 800ada0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ada4:	4413      	add	r3, r2
 800ada6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adba:	b29a      	uxth	r2, r3
 800adbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adc0:	801a      	strh	r2, [r3, #0]
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	2b3e      	cmp	r3, #62	; 0x3e
 800adc8:	d923      	bls.n	800ae12 <USB_EPStartXfer+0x149c>
 800adca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adce:	095b      	lsrs	r3, r3, #5
 800add0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800add4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <USB_EPStartXfer+0x1474>
 800ade0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ade4:	3b01      	subs	r3, #1
 800ade6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800adea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	029b      	lsls	r3, r3, #10
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	4313      	orrs	r3, r2
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae0e:	801a      	strh	r2, [r3, #0]
 800ae10:	e060      	b.n	800aed4 <USB_EPStartXfer+0x155e>
 800ae12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10c      	bne.n	800ae34 <USB_EPStartXfer+0x14be>
 800ae1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae30:	801a      	strh	r2, [r3, #0]
 800ae32:	e04f      	b.n	800aed4 <USB_EPStartXfer+0x155e>
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae38:	085b      	lsrs	r3, r3, #1
 800ae3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d004      	beq.n	800ae54 <USB_EPStartXfer+0x14de>
 800ae4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae4e:	3301      	adds	r3, #1
 800ae50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	029b      	lsls	r3, r3, #10
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	4313      	orrs	r3, r2
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae6e:	801a      	strh	r2, [r3, #0]
 800ae70:	e030      	b.n	800aed4 <USB_EPStartXfer+0x155e>
 800ae72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d128      	bne.n	800aed4 <USB_EPStartXfer+0x155e>
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	461a      	mov	r2, r3
 800aea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aea6:	4413      	add	r3, r2
 800aea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aeac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	00da      	lsls	r2, r3, #3
 800aeba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aebe:	4413      	add	r3, r2
 800aec0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aecc:	b29a      	uxth	r2, r3
 800aece:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	785b      	ldrb	r3, [r3, #1]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 8085 	bne.w	800affe <USB_EPStartXfer+0x1688>
 800aef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af10:	b29b      	uxth	r3, r3
 800af12:	461a      	mov	r2, r3
 800af14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af18:	4413      	add	r3, r2
 800af1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	00da      	lsls	r2, r3, #3
 800af2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af30:	4413      	add	r3, r2
 800af32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	b29b      	uxth	r3, r3
 800af42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af46:	b29a      	uxth	r2, r3
 800af48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af4c:	801a      	strh	r2, [r3, #0]
 800af4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af52:	2b3e      	cmp	r3, #62	; 0x3e
 800af54:	d923      	bls.n	800af9e <USB_EPStartXfer+0x1628>
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5a:	095b      	lsrs	r3, r3, #5
 800af5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af64:	f003 031f 	and.w	r3, r3, #31
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <USB_EPStartXfer+0x1600>
 800af6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af70:	3b01      	subs	r3, #1
 800af72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af82:	b29b      	uxth	r3, r3
 800af84:	029b      	lsls	r3, r3, #10
 800af86:	b29b      	uxth	r3, r3
 800af88:	4313      	orrs	r3, r2
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af94:	b29a      	uxth	r2, r3
 800af96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af9a:	801a      	strh	r2, [r3, #0]
 800af9c:	e05c      	b.n	800b058 <USB_EPStartXfer+0x16e2>
 800af9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10c      	bne.n	800afc0 <USB_EPStartXfer+0x164a>
 800afa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	b29b      	uxth	r3, r3
 800afae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afbc:	801a      	strh	r2, [r3, #0]
 800afbe:	e04b      	b.n	800b058 <USB_EPStartXfer+0x16e2>
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc4:	085b      	lsrs	r3, r3, #1
 800afc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d004      	beq.n	800afe0 <USB_EPStartXfer+0x166a>
 800afd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afda:	3301      	adds	r3, #1
 800afdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afec:	b29b      	uxth	r3, r3
 800afee:	029b      	lsls	r3, r3, #10
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	4313      	orrs	r3, r2
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800affa:	801a      	strh	r2, [r3, #0]
 800affc:	e02c      	b.n	800b058 <USB_EPStartXfer+0x16e2>
 800affe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	785b      	ldrb	r3, [r3, #1]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d124      	bne.n	800b058 <USB_EPStartXfer+0x16e2>
 800b00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b024:	4413      	add	r3, r2
 800b026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	00da      	lsls	r2, r3, #3
 800b038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b03c:	4413      	add	r3, r2
 800b03e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b050:	801a      	strh	r2, [r3, #0]
 800b052:	e001      	b.n	800b058 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e03a      	b.n	800b0ce <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	b29b      	uxth	r3, r3
 800b076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b082:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b086:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b08a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b08e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b092:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b096:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	441a      	add	r2, r3
 800b0b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d020      	beq.n	800b12c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b100:	81bb      	strh	r3, [r7, #12]
 800b102:	89bb      	ldrh	r3, [r7, #12]
 800b104:	f083 0310 	eor.w	r3, r3, #16
 800b108:	81bb      	strh	r3, [r7, #12]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	441a      	add	r2, r3
 800b114:	89bb      	ldrh	r3, [r7, #12]
 800b116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b11a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b11e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b126:	b29b      	uxth	r3, r3
 800b128:	8013      	strh	r3, [r2, #0]
 800b12a:	e01f      	b.n	800b16c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	881b      	ldrh	r3, [r3, #0]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b142:	81fb      	strh	r3, [r7, #14]
 800b144:	89fb      	ldrh	r3, [r7, #14]
 800b146:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b14a:	81fb      	strh	r3, [r7, #14]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	441a      	add	r2, r3
 800b156:	89fb      	ldrh	r3, [r7, #14]
 800b158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b15c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b168:	b29b      	uxth	r3, r3
 800b16a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b087      	sub	sp, #28
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	7b1b      	ldrb	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f040 809d 	bne.w	800b2c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	785b      	ldrb	r3, [r3, #1]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d04c      	beq.n	800b230 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	823b      	strh	r3, [r7, #16]
 800b1a4:	8a3b      	ldrh	r3, [r7, #16]
 800b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01b      	beq.n	800b1e6 <USB_EPClearStall+0x6c>
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c4:	81fb      	strh	r3, [r7, #14]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	441a      	add	r2, r3
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	78db      	ldrb	r3, [r3, #3]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d06c      	beq.n	800b2c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b204:	81bb      	strh	r3, [r7, #12]
 800b206:	89bb      	ldrh	r3, [r7, #12]
 800b208:	f083 0320 	eor.w	r3, r3, #32
 800b20c:	81bb      	strh	r3, [r7, #12]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	441a      	add	r2, r3
 800b218:	89bb      	ldrh	r3, [r7, #12]
 800b21a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b21e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	8013      	strh	r3, [r2, #0]
 800b22e:	e04b      	b.n	800b2c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	82fb      	strh	r3, [r7, #22]
 800b23e:	8afb      	ldrh	r3, [r7, #22]
 800b240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b244:	2b00      	cmp	r3, #0
 800b246:	d01b      	beq.n	800b280 <USB_EPClearStall+0x106>
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	b29b      	uxth	r3, r3
 800b256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25e:	82bb      	strh	r3, [r7, #20]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	441a      	add	r2, r3
 800b26a:	8abb      	ldrh	r3, [r7, #20]
 800b26c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b296:	827b      	strh	r3, [r7, #18]
 800b298:	8a7b      	ldrh	r3, [r7, #18]
 800b29a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b29e:	827b      	strh	r3, [r7, #18]
 800b2a0:	8a7b      	ldrh	r3, [r7, #18]
 800b2a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2a6:	827b      	strh	r3, [r7, #18]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	441a      	add	r2, r3
 800b2b2:	8a7b      	ldrh	r3, [r7, #18]
 800b2b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b2e2:	78fb      	ldrb	r3, [r7, #3]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2280      	movs	r2, #128	; 0x80
 800b2ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b316:	b29a      	uxth	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b33e:	68fb      	ldr	r3, [r7, #12]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b08b      	sub	sp, #44	; 0x2c
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4611      	mov	r1, r2
 800b358:	461a      	mov	r2, r3
 800b35a:	460b      	mov	r3, r1
 800b35c:	80fb      	strh	r3, [r7, #6]
 800b35e:	4613      	mov	r3, r2
 800b360:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b362:	88bb      	ldrh	r3, [r7, #4]
 800b364:	3301      	adds	r3, #1
 800b366:	085b      	lsrs	r3, r3, #1
 800b368:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b372:	88fa      	ldrh	r2, [r7, #6]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	4413      	add	r3, r2
 800b378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b37c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
 800b382:	e01b      	b.n	800b3bc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	3301      	adds	r3, #1
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	021b      	lsls	r3, r3, #8
 800b392:	b21a      	sxth	r2, r3
 800b394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b398:	4313      	orrs	r3, r2
 800b39a:	b21b      	sxth	r3, r3
 800b39c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	8a7a      	ldrh	r2, [r7, #18]
 800b3a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e0      	bne.n	800b384 <USB_WritePMA+0x38>
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	372c      	adds	r7, #44	; 0x2c
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b08b      	sub	sp, #44	; 0x2c
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	4611      	mov	r1, r2
 800b3dc:	461a      	mov	r2, r3
 800b3de:	460b      	mov	r3, r1
 800b3e0:	80fb      	strh	r3, [r7, #6]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b3e6:	88bb      	ldrh	r3, [r7, #4]
 800b3e8:	085b      	lsrs	r3, r3, #1
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b3f6:	88fa      	ldrh	r2, [r7, #6]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b400:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	627b      	str	r3, [r7, #36]	; 0x24
 800b406:	e018      	b.n	800b43a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	3302      	adds	r3, #2
 800b414:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	3301      	adds	r3, #1
 800b422:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	0a1b      	lsrs	r3, r3, #8
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	3301      	adds	r3, #1
 800b432:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	3b01      	subs	r3, #1
 800b438:	627b      	str	r3, [r7, #36]	; 0x24
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e3      	bne.n	800b408 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b440:	88bb      	ldrh	r3, [r7, #4]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	b29b      	uxth	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d007      	beq.n	800b45c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	b29b      	uxth	r3, r3
 800b452:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	b2da      	uxtb	r2, r3
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	701a      	strb	r2, [r3, #0]
  }
}
 800b45c:	bf00      	nop
 800b45e:	372c      	adds	r7, #44	; 0x2c
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b474:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b478:	f002 f8a6 	bl	800d5c8 <USBD_static_malloc>
 800b47c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d105      	bne.n	800b490 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b48c:	2302      	movs	r3, #2
 800b48e:	e066      	b.n	800b55e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7c1b      	ldrb	r3, [r3, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d119      	bne.n	800b4d4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	2181      	movs	r1, #129	; 0x81
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 ff34 	bl	800d316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f001 ff2a 	bl	800d316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2210      	movs	r2, #16
 800b4ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b4d2:	e016      	b.n	800b502 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4d4:	2340      	movs	r3, #64	; 0x40
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	2181      	movs	r1, #129	; 0x81
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 ff1b 	bl	800d316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 ff12 	bl	800d316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2210      	movs	r2, #16
 800b4fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b502:	2308      	movs	r3, #8
 800b504:	2203      	movs	r2, #3
 800b506:	2182      	movs	r1, #130	; 0x82
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f001 ff04 	bl	800d316 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7c1b      	ldrb	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d109      	bne.n	800b54c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b53e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b542:	2101      	movs	r1, #1
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 ffd5 	bl	800d4f4 <USBD_LL_PrepareReceive>
 800b54a:	e007      	b.n	800b55c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	2101      	movs	r1, #1
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 ffcc 	bl	800d4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b572:	2181      	movs	r1, #129	; 0x81
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f001 fef4 	bl	800d362 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b580:	2101      	movs	r1, #1
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 feed 	bl	800d362 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b590:	2182      	movs	r1, #130	; 0x82
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 fee5 	bl	800d362 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f002 f80e 	bl	800d5e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e0af      	b.n	800b764 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d03f      	beq.n	800b690 <USBD_CDC_Setup+0xb4>
 800b610:	2b20      	cmp	r3, #32
 800b612:	f040 809f 	bne.w	800b754 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	88db      	ldrh	r3, [r3, #6]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d02e      	beq.n	800b67c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	b25b      	sxtb	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	da16      	bge.n	800b656 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b634:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	88d2      	ldrh	r2, [r2, #6]
 800b63a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	88db      	ldrh	r3, [r3, #6]
 800b640:	2b07      	cmp	r3, #7
 800b642:	bf28      	it	cs
 800b644:	2307      	movcs	r3, #7
 800b646:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	89fa      	ldrh	r2, [r7, #14]
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f001 fa9f 	bl	800cb92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b654:	e085      	b.n	800b762 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	785a      	ldrb	r2, [r3, #1]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	88db      	ldrh	r3, [r3, #6]
 800b664:	b2da      	uxtb	r2, r3
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b66c:	6939      	ldr	r1, [r7, #16]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	88db      	ldrh	r3, [r3, #6]
 800b672:	461a      	mov	r2, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 fab8 	bl	800cbea <USBD_CtlPrepareRx>
      break;
 800b67a:	e072      	b.n	800b762 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	7850      	ldrb	r0, [r2, #1]
 800b688:	2200      	movs	r2, #0
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	4798      	blx	r3
      break;
 800b68e:	e068      	b.n	800b762 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	2b0b      	cmp	r3, #11
 800b696:	d852      	bhi.n	800b73e <USBD_CDC_Setup+0x162>
 800b698:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <USBD_CDC_Setup+0xc4>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6d1 	.word	0x0800b6d1
 800b6a4:	0800b74d 	.word	0x0800b74d
 800b6a8:	0800b73f 	.word	0x0800b73f
 800b6ac:	0800b73f 	.word	0x0800b73f
 800b6b0:	0800b73f 	.word	0x0800b73f
 800b6b4:	0800b73f 	.word	0x0800b73f
 800b6b8:	0800b73f 	.word	0x0800b73f
 800b6bc:	0800b73f 	.word	0x0800b73f
 800b6c0:	0800b73f 	.word	0x0800b73f
 800b6c4:	0800b73f 	.word	0x0800b73f
 800b6c8:	0800b6fb 	.word	0x0800b6fb
 800b6cc:	0800b725 	.word	0x0800b725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d107      	bne.n	800b6ec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6dc:	f107 030a 	add.w	r3, r7, #10
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 fa54 	bl	800cb92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6ea:	e032      	b.n	800b752 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 f9de 	bl	800cab0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	75fb      	strb	r3, [r7, #23]
          break;
 800b6f8:	e02b      	b.n	800b752 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b03      	cmp	r3, #3
 800b704:	d107      	bne.n	800b716 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b706:	f107 030d 	add.w	r3, r7, #13
 800b70a:	2201      	movs	r2, #1
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f001 fa3f 	bl	800cb92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b714:	e01d      	b.n	800b752 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 f9c9 	bl	800cab0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b71e:	2303      	movs	r3, #3
 800b720:	75fb      	strb	r3, [r7, #23]
          break;
 800b722:	e016      	b.n	800b752 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d00f      	beq.n	800b750 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 f9bc 	bl	800cab0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b738:	2303      	movs	r3, #3
 800b73a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b73c:	e008      	b.n	800b750 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 f9b5 	bl	800cab0 <USBD_CtlError>
          ret = USBD_FAIL;
 800b746:	2303      	movs	r3, #3
 800b748:	75fb      	strb	r3, [r7, #23]
          break;
 800b74a:	e002      	b.n	800b752 <USBD_CDC_Setup+0x176>
          break;
 800b74c:	bf00      	nop
 800b74e:	e008      	b.n	800b762 <USBD_CDC_Setup+0x186>
          break;
 800b750:	bf00      	nop
      }
      break;
 800b752:	e006      	b.n	800b762 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 f9aa 	bl	800cab0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	75fb      	strb	r3, [r7, #23]
      break;
 800b760:	bf00      	nop
  }

  return (uint8_t)ret;
 800b762:	7dfb      	ldrb	r3, [r7, #23]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b77e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b786:	2b00      	cmp	r3, #0
 800b788:	d101      	bne.n	800b78e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e04f      	b.n	800b82e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b794:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b796:	78fa      	ldrb	r2, [r7, #3]
 800b798:	6879      	ldr	r1, [r7, #4]
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	440b      	add	r3, r1
 800b7a4:	3318      	adds	r3, #24
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d029      	beq.n	800b800 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b7ac:	78fa      	ldrb	r2, [r7, #3]
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	3318      	adds	r3, #24
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	78f9      	ldrb	r1, [r7, #3]
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	440b      	add	r3, r1
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	4403      	add	r3, r0
 800b7cc:	3320      	adds	r3, #32
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b7d4:	fb01 f303 	mul.w	r3, r1, r3
 800b7d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d110      	bne.n	800b800 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b7de:	78fa      	ldrb	r2, [r7, #3]
 800b7e0:	6879      	ldr	r1, [r7, #4]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	440b      	add	r3, r1
 800b7ec:	3318      	adds	r3, #24
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b7f2:	78f9      	ldrb	r1, [r7, #3]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 fe5a 	bl	800d4b2 <USBD_LL_Transmit>
 800b7fe:	e015      	b.n	800b82c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	460b      	mov	r3, r1
 800b840:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b848:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b854:	2303      	movs	r3, #3
 800b856:	e015      	b.n	800b884 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 fe6a 	bl	800d536 <USBD_LL_GetRxDataSize>
 800b862:	4602      	mov	r2, r0
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b87e:	4611      	mov	r1, r2
 800b880:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b89a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e01b      	b.n	800b8de <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d015      	beq.n	800b8dc <USBD_CDC_EP0_RxReady+0x50>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b8b6:	2bff      	cmp	r3, #255	; 0xff
 800b8b8:	d010      	beq.n	800b8dc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b8c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8d0:	b292      	uxth	r2, r2
 800b8d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	22ff      	movs	r2, #255	; 0xff
 800b8d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
	...

0800b8e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2243      	movs	r2, #67	; 0x43
 800b8f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b8f6:	4b03      	ldr	r3, [pc, #12]	; (800b904 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20000094 	.word	0x20000094

0800b908 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2243      	movs	r2, #67	; 0x43
 800b914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b916:	4b03      	ldr	r3, [pc, #12]	; (800b924 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000050 	.word	0x20000050

0800b928 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2243      	movs	r2, #67	; 0x43
 800b934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b936:	4b03      	ldr	r3, [pc, #12]	; (800b944 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b938:	4618      	mov	r0, r3
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	200000d8 	.word	0x200000d8

0800b948 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	220a      	movs	r2, #10
 800b954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b956:	4b03      	ldr	r3, [pc, #12]	; (800b964 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	2000000c 	.word	0x2000000c

0800b968 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b978:	2303      	movs	r3, #3
 800b97a:	e004      	b.n	800b986 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b992:	b480      	push	{r7}
 800b994:	b087      	sub	sp, #28
 800b996:	af00      	add	r7, sp, #0
 800b998:	60f8      	str	r0, [r7, #12]
 800b99a:	60b9      	str	r1, [r7, #8]
 800b99c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e008      	b.n	800b9c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	371c      	adds	r7, #28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e004      	b.n	800b9f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e016      	b.n	800ba4c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	7c1b      	ldrb	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d109      	bne.n	800ba3a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba30:	2101      	movs	r1, #1
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f001 fd5e 	bl	800d4f4 <USBD_LL_PrepareReceive>
 800ba38:	e007      	b.n	800ba4a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba40:	2340      	movs	r3, #64	; 0x40
 800ba42:	2101      	movs	r1, #1
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 fd55 	bl	800d4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba68:	2303      	movs	r3, #3
 800ba6a:	e01f      	b.n	800baac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	79fa      	ldrb	r2, [r7, #7]
 800ba9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f001 fbbd 	bl	800d220 <USBD_LL_Init>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800babe:	2300      	movs	r3, #0
 800bac0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bac8:	2303      	movs	r3, #3
 800baca:	e016      	b.n	800bafa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00b      	beq.n	800baf8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	f107 020e 	add.w	r2, r7, #14
 800baec:	4610      	mov	r0, r2
 800baee:	4798      	blx	r3
 800baf0:	4602      	mov	r2, r0
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 fbe8 	bl	800d2e0 <USBD_LL_Start>
 800bb10:	4603      	mov	r3, r0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b083      	sub	sp, #12
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d009      	beq.n	800bb5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	78fa      	ldrb	r2, [r7, #3]
 800bb54:	4611      	mov	r1, r2
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	4798      	blx	r3
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d007      	beq.n	800bb8e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	4798      	blx	r3
  }

  return USBD_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 ff46 	bl	800ca3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbcc:	f003 031f 	and.w	r3, r3, #31
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d01a      	beq.n	800bc0a <USBD_LL_SetupStage+0x72>
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d822      	bhi.n	800bc1e <USBD_LL_SetupStage+0x86>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <USBD_LL_SetupStage+0x4a>
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d00a      	beq.n	800bbf6 <USBD_LL_SetupStage+0x5e>
 800bbe0:	e01d      	b.n	800bc1e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f9ee 	bl	800bfcc <USBD_StdDevReq>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf4:	e020      	b.n	800bc38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fa52 	bl	800c0a8 <USBD_StdItfReq>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]
      break;
 800bc08:	e016      	b.n	800bc38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa91 	bl	800c13a <USBD_StdEPReq>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc1c:	e00c      	b.n	800bc38 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 fbb7 	bl	800d3a0 <USBD_LL_StallEP>
 800bc32:	4603      	mov	r3, r0
 800bc34:	73fb      	strb	r3, [r7, #15]
      break;
 800bc36:	bf00      	nop
  }

  return ret;
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b086      	sub	sp, #24
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	60f8      	str	r0, [r7, #12]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	607a      	str	r2, [r7, #4]
 800bc4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d138      	bne.n	800bcc8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d14a      	bne.n	800bcfe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	689a      	ldr	r2, [r3, #8]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d913      	bls.n	800bc9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	689a      	ldr	r2, [r3, #8]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	1ad2      	subs	r2, r2, r3
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	68da      	ldr	r2, [r3, #12]
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	bf28      	it	cs
 800bc8e:	4613      	movcs	r3, r2
 800bc90:	461a      	mov	r2, r3
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 ffc5 	bl	800cc24 <USBD_CtlContinueRx>
 800bc9a:	e030      	b.n	800bcfe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d10b      	bne.n	800bcc0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d005      	beq.n	800bcc0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 ffc0 	bl	800cc46 <USBD_CtlSendStatus>
 800bcc6:	e01a      	b.n	800bcfe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d114      	bne.n	800bcfe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	7afa      	ldrb	r2, [r7, #11]
 800bcea:	4611      	mov	r1, r2
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	4798      	blx	r3
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	e000      	b.n	800bd00 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	460b      	mov	r3, r1
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d16b      	bne.n	800bdf4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d156      	bne.n	800bdda <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	689a      	ldr	r2, [r3, #8]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d914      	bls.n	800bd62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	689a      	ldr	r2, [r3, #8]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	1ad2      	subs	r2, r2, r3
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 ff3a 	bl	800cbc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd54:	2300      	movs	r3, #0
 800bd56:	2200      	movs	r2, #0
 800bd58:	2100      	movs	r1, #0
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f001 fbca 	bl	800d4f4 <USBD_LL_PrepareReceive>
 800bd60:	e03b      	b.n	800bdda <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	68da      	ldr	r2, [r3, #12]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d11c      	bne.n	800bda8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d316      	bcc.n	800bda8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d20f      	bcs.n	800bda8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd88:	2200      	movs	r2, #0
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f000 ff1b 	bl	800cbc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f001 fba7 	bl	800d4f4 <USBD_LL_PrepareReceive>
 800bda6:	e018      	b.n	800bdda <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d10b      	bne.n	800bdcc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdcc:	2180      	movs	r1, #128	; 0x80
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f001 fae6 	bl	800d3a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f000 ff49 	bl	800cc6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d122      	bne.n	800be2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff fe98 	bl	800bb1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bdf2:	e01a      	b.n	800be2a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d114      	bne.n	800be2a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00e      	beq.n	800be2a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	7afa      	ldrb	r2, [r7, #11]
 800be16:	4611      	mov	r1, r2
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	4798      	blx	r3
 800be1c:	4603      	mov	r3, r0
 800be1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	e000      	b.n	800be2c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800be64:	2303      	movs	r3, #3
 800be66:	e02f      	b.n	800bec8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00f      	beq.n	800be92 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6852      	ldr	r2, [r2, #4]
 800be8a:	b2d2      	uxtb	r2, r2
 800be8c:	4611      	mov	r1, r2
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be92:	2340      	movs	r3, #64	; 0x40
 800be94:	2200      	movs	r2, #0
 800be96:	2100      	movs	r1, #0
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f001 fa3c 	bl	800d316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2240      	movs	r2, #64	; 0x40
 800beaa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800beae:	2340      	movs	r3, #64	; 0x40
 800beb0:	2200      	movs	r2, #0
 800beb2:	2180      	movs	r1, #128	; 0x80
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f001 fa2e 	bl	800d316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2240      	movs	r2, #64	; 0x40
 800bec4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	78fa      	ldrb	r2, [r7, #3]
 800bee0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2204      	movs	r2, #4
 800bf0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	d106      	bne.n	800bf3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	e012      	b.n	800bf88 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	d10b      	bne.n	800bf86 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d005      	beq.n	800bf86 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b087      	sub	sp, #28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfae:	8a3b      	ldrh	r3, [r7, #16]
 800bfb0:	021b      	lsls	r3, r3, #8
 800bfb2:	b21a      	sxth	r2, r3
 800bfb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	b21b      	sxth	r3, r3
 800bfbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bfbe:	89fb      	ldrh	r3, [r7, #14]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	371c      	adds	r7, #28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfe2:	2b40      	cmp	r3, #64	; 0x40
 800bfe4:	d005      	beq.n	800bff2 <USBD_StdDevReq+0x26>
 800bfe6:	2b40      	cmp	r3, #64	; 0x40
 800bfe8:	d853      	bhi.n	800c092 <USBD_StdDevReq+0xc6>
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00b      	beq.n	800c006 <USBD_StdDevReq+0x3a>
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d14f      	bne.n	800c092 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	4798      	blx	r3
 800c000:	4603      	mov	r3, r0
 800c002:	73fb      	strb	r3, [r7, #15]
      break;
 800c004:	e04a      	b.n	800c09c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	785b      	ldrb	r3, [r3, #1]
 800c00a:	2b09      	cmp	r3, #9
 800c00c:	d83b      	bhi.n	800c086 <USBD_StdDevReq+0xba>
 800c00e:	a201      	add	r2, pc, #4	; (adr r2, 800c014 <USBD_StdDevReq+0x48>)
 800c010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c014:	0800c069 	.word	0x0800c069
 800c018:	0800c07d 	.word	0x0800c07d
 800c01c:	0800c087 	.word	0x0800c087
 800c020:	0800c073 	.word	0x0800c073
 800c024:	0800c087 	.word	0x0800c087
 800c028:	0800c047 	.word	0x0800c047
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c087 	.word	0x0800c087
 800c034:	0800c05f 	.word	0x0800c05f
 800c038:	0800c051 	.word	0x0800c051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9de 	bl	800c400 <USBD_GetDescriptor>
          break;
 800c044:	e024      	b.n	800c090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fb6d 	bl	800c728 <USBD_SetAddress>
          break;
 800c04e:	e01f      	b.n	800c090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fbac 	bl	800c7b0 <USBD_SetConfig>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]
          break;
 800c05c:	e018      	b.n	800c090 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fc4b 	bl	800c8fc <USBD_GetConfig>
          break;
 800c066:	e013      	b.n	800c090 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fc7c 	bl	800c968 <USBD_GetStatus>
          break;
 800c070:	e00e      	b.n	800c090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fcab 	bl	800c9d0 <USBD_SetFeature>
          break;
 800c07a:	e009      	b.n	800c090 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fcba 	bl	800c9f8 <USBD_ClrFeature>
          break;
 800c084:	e004      	b.n	800c090 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fd11 	bl	800cab0 <USBD_CtlError>
          break;
 800c08e:	bf00      	nop
      }
      break;
 800c090:	e004      	b.n	800c09c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fd0b 	bl	800cab0 <USBD_CtlError>
      break;
 800c09a:	bf00      	nop
  }

  return ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop

0800c0a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0be:	2b40      	cmp	r3, #64	; 0x40
 800c0c0:	d005      	beq.n	800c0ce <USBD_StdItfReq+0x26>
 800c0c2:	2b40      	cmp	r3, #64	; 0x40
 800c0c4:	d82f      	bhi.n	800c126 <USBD_StdItfReq+0x7e>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <USBD_StdItfReq+0x26>
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	d12b      	bne.n	800c126 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d81d      	bhi.n	800c118 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	889b      	ldrh	r3, [r3, #4]
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d813      	bhi.n	800c10e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	4798      	blx	r3
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	88db      	ldrh	r3, [r3, #6]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d110      	bne.n	800c122 <USBD_StdItfReq+0x7a>
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10d      	bne.n	800c122 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fd9d 	bl	800cc46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c10c:	e009      	b.n	800c122 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fccd 	bl	800cab0 <USBD_CtlError>
          break;
 800c116:	e004      	b.n	800c122 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fcc8 	bl	800cab0 <USBD_CtlError>
          break;
 800c120:	e000      	b.n	800c124 <USBD_StdItfReq+0x7c>
          break;
 800c122:	bf00      	nop
      }
      break;
 800c124:	e004      	b.n	800c130 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fcc1 	bl	800cab0 <USBD_CtlError>
      break;
 800c12e:	bf00      	nop
  }

  return ret;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c144:	2300      	movs	r3, #0
 800c146:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	889b      	ldrh	r3, [r3, #4]
 800c14c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c156:	2b40      	cmp	r3, #64	; 0x40
 800c158:	d007      	beq.n	800c16a <USBD_StdEPReq+0x30>
 800c15a:	2b40      	cmp	r3, #64	; 0x40
 800c15c:	f200 8145 	bhi.w	800c3ea <USBD_StdEPReq+0x2b0>
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00c      	beq.n	800c17e <USBD_StdEPReq+0x44>
 800c164:	2b20      	cmp	r3, #32
 800c166:	f040 8140 	bne.w	800c3ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	4798      	blx	r3
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]
      break;
 800c17c:	e13a      	b.n	800c3f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	785b      	ldrb	r3, [r3, #1]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d007      	beq.n	800c196 <USBD_StdEPReq+0x5c>
 800c186:	2b03      	cmp	r3, #3
 800c188:	f300 8129 	bgt.w	800c3de <USBD_StdEPReq+0x2a4>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d07f      	beq.n	800c290 <USBD_StdEPReq+0x156>
 800c190:	2b01      	cmp	r3, #1
 800c192:	d03c      	beq.n	800c20e <USBD_StdEPReq+0xd4>
 800c194:	e123      	b.n	800c3de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d002      	beq.n	800c1a8 <USBD_StdEPReq+0x6e>
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d016      	beq.n	800c1d4 <USBD_StdEPReq+0x9a>
 800c1a6:	e02c      	b.n	800c202 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00d      	beq.n	800c1ca <USBD_StdEPReq+0x90>
 800c1ae:	7bbb      	ldrb	r3, [r7, #14]
 800c1b0:	2b80      	cmp	r3, #128	; 0x80
 800c1b2:	d00a      	beq.n	800c1ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f001 f8f1 	bl	800d3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1be:	2180      	movs	r1, #128	; 0x80
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f8ed 	bl	800d3a0 <USBD_LL_StallEP>
 800c1c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1c8:	e020      	b.n	800c20c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fc6f 	bl	800cab0 <USBD_CtlError>
              break;
 800c1d2:	e01b      	b.n	800c20c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	885b      	ldrh	r3, [r3, #2]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10e      	bne.n	800c1fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00b      	beq.n	800c1fa <USBD_StdEPReq+0xc0>
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b80      	cmp	r3, #128	; 0x80
 800c1e6:	d008      	beq.n	800c1fa <USBD_StdEPReq+0xc0>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	88db      	ldrh	r3, [r3, #6]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d104      	bne.n	800c1fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 f8d3 	bl	800d3a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fd23 	bl	800cc46 <USBD_CtlSendStatus>

              break;
 800c200:	e004      	b.n	800c20c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fc53 	bl	800cab0 <USBD_CtlError>
              break;
 800c20a:	bf00      	nop
          }
          break;
 800c20c:	e0ec      	b.n	800c3e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b02      	cmp	r3, #2
 800c218:	d002      	beq.n	800c220 <USBD_StdEPReq+0xe6>
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d016      	beq.n	800c24c <USBD_StdEPReq+0x112>
 800c21e:	e030      	b.n	800c282 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00d      	beq.n	800c242 <USBD_StdEPReq+0x108>
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	2b80      	cmp	r3, #128	; 0x80
 800c22a:	d00a      	beq.n	800c242 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f001 f8b5 	bl	800d3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c236:	2180      	movs	r1, #128	; 0x80
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f001 f8b1 	bl	800d3a0 <USBD_LL_StallEP>
 800c23e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c240:	e025      	b.n	800c28e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fc33 	bl	800cab0 <USBD_CtlError>
              break;
 800c24a:	e020      	b.n	800c28e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	885b      	ldrh	r3, [r3, #2]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d11b      	bne.n	800c28c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 f8bb 	bl	800d3de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fcec 	bl	800cc46 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c280:	e004      	b.n	800c28c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fc13 	bl	800cab0 <USBD_CtlError>
              break;
 800c28a:	e000      	b.n	800c28e <USBD_StdEPReq+0x154>
              break;
 800c28c:	bf00      	nop
          }
          break;
 800c28e:	e0ab      	b.n	800c3e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d002      	beq.n	800c2a2 <USBD_StdEPReq+0x168>
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d032      	beq.n	800c306 <USBD_StdEPReq+0x1cc>
 800c2a0:	e097      	b.n	800c3d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d007      	beq.n	800c2b8 <USBD_StdEPReq+0x17e>
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	2b80      	cmp	r3, #128	; 0x80
 800c2ac:	d004      	beq.n	800c2b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fbfd 	bl	800cab0 <USBD_CtlError>
                break;
 800c2b6:	e091      	b.n	800c3dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	da0b      	bge.n	800c2d8 <USBD_StdEPReq+0x19e>
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	3310      	adds	r3, #16
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	e00b      	b.n	800c2f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fc47 	bl	800cb92 <USBD_CtlSendData>
              break;
 800c304:	e06a      	b.n	800c3dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da11      	bge.n	800c332 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	f003 020f 	and.w	r2, r3, #15
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	440b      	add	r3, r1
 800c320:	3324      	adds	r3, #36	; 0x24
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d117      	bne.n	800c358 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fbc0 	bl	800cab0 <USBD_CtlError>
                  break;
 800c330:	e054      	b.n	800c3dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	f003 020f 	and.w	r2, r3, #15
 800c338:	6879      	ldr	r1, [r7, #4]
 800c33a:	4613      	mov	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	440b      	add	r3, r1
 800c344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d104      	bne.n	800c358 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fbad 	bl	800cab0 <USBD_CtlError>
                  break;
 800c356:	e041      	b.n	800c3dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	da0b      	bge.n	800c378 <USBD_StdEPReq+0x23e>
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	3310      	adds	r3, #16
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	4413      	add	r3, r2
 800c374:	3304      	adds	r3, #4
 800c376:	e00b      	b.n	800c390 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	4413      	add	r3, r2
 800c38e:	3304      	adds	r3, #4
 800c390:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c392:	7bbb      	ldrb	r3, [r7, #14]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <USBD_StdEPReq+0x264>
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	2b80      	cmp	r3, #128	; 0x80
 800c39c:	d103      	bne.n	800c3a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e00e      	b.n	800c3c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c3a6:	7bbb      	ldrb	r3, [r7, #14]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f001 f836 	bl	800d41c <USBD_LL_IsStallEP>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	e002      	b.n	800c3c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fbe1 	bl	800cb92 <USBD_CtlSendData>
              break;
 800c3d0:	e004      	b.n	800c3dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fb6b 	bl	800cab0 <USBD_CtlError>
              break;
 800c3da:	bf00      	nop
          }
          break;
 800c3dc:	e004      	b.n	800c3e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fb65 	bl	800cab0 <USBD_CtlError>
          break;
 800c3e6:	bf00      	nop
      }
      break;
 800c3e8:	e004      	b.n	800c3f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fb5f 	bl	800cab0 <USBD_CtlError>
      break;
 800c3f2:	bf00      	nop
  }

  return ret;
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c40a:	2300      	movs	r3, #0
 800c40c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	885b      	ldrh	r3, [r3, #2]
 800c41a:	0a1b      	lsrs	r3, r3, #8
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	3b01      	subs	r3, #1
 800c420:	2b0e      	cmp	r3, #14
 800c422:	f200 8152 	bhi.w	800c6ca <USBD_GetDescriptor+0x2ca>
 800c426:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <USBD_GetDescriptor+0x2c>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c49d 	.word	0x0800c49d
 800c430:	0800c4b5 	.word	0x0800c4b5
 800c434:	0800c4f5 	.word	0x0800c4f5
 800c438:	0800c6cb 	.word	0x0800c6cb
 800c43c:	0800c6cb 	.word	0x0800c6cb
 800c440:	0800c66b 	.word	0x0800c66b
 800c444:	0800c697 	.word	0x0800c697
 800c448:	0800c6cb 	.word	0x0800c6cb
 800c44c:	0800c6cb 	.word	0x0800c6cb
 800c450:	0800c6cb 	.word	0x0800c6cb
 800c454:	0800c6cb 	.word	0x0800c6cb
 800c458:	0800c6cb 	.word	0x0800c6cb
 800c45c:	0800c6cb 	.word	0x0800c6cb
 800c460:	0800c6cb 	.word	0x0800c6cb
 800c464:	0800c469 	.word	0x0800c469
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	69db      	ldr	r3, [r3, #28]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	7c12      	ldrb	r2, [r2, #16]
 800c480:	f107 0108 	add.w	r1, r7, #8
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c48a:	e126      	b.n	800c6da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fb0e 	bl	800cab0 <USBD_CtlError>
        err++;
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	3301      	adds	r3, #1
 800c498:	72fb      	strb	r3, [r7, #11]
      break;
 800c49a:	e11e      	b.n	800c6da <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	7c12      	ldrb	r2, [r2, #16]
 800c4a8:	f107 0108 	add.w	r1, r7, #8
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	60f8      	str	r0, [r7, #12]
      break;
 800c4b2:	e112      	b.n	800c6da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7c1b      	ldrb	r3, [r3, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10d      	bne.n	800c4d8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c4:	f107 0208 	add.w	r2, r7, #8
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
 800c4cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c4d6:	e100      	b.n	800c6da <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	f107 0208 	add.w	r2, r7, #8
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4798      	blx	r3
 800c4e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	701a      	strb	r2, [r3, #0]
      break;
 800c4f2:	e0f2      	b.n	800c6da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	885b      	ldrh	r3, [r3, #2]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b05      	cmp	r3, #5
 800c4fc:	f200 80ac 	bhi.w	800c658 <USBD_GetDescriptor+0x258>
 800c500:	a201      	add	r2, pc, #4	; (adr r2, 800c508 <USBD_GetDescriptor+0x108>)
 800c502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c506:	bf00      	nop
 800c508:	0800c521 	.word	0x0800c521
 800c50c:	0800c555 	.word	0x0800c555
 800c510:	0800c589 	.word	0x0800c589
 800c514:	0800c5bd 	.word	0x0800c5bd
 800c518:	0800c5f1 	.word	0x0800c5f1
 800c51c:	0800c625 	.word	0x0800c625
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	7c12      	ldrb	r2, [r2, #16]
 800c538:	f107 0108 	add.w	r1, r7, #8
 800c53c:	4610      	mov	r0, r2
 800c53e:	4798      	blx	r3
 800c540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c542:	e091      	b.n	800c668 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fab2 	bl	800cab0 <USBD_CtlError>
            err++;
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	3301      	adds	r3, #1
 800c550:	72fb      	strb	r3, [r7, #11]
          break;
 800c552:	e089      	b.n	800c668 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c576:	e077      	b.n	800c668 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa98 	bl	800cab0 <USBD_CtlError>
            err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
          break;
 800c586:	e06f      	b.n	800c668 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	f107 0108 	add.w	r1, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5aa:	e05d      	b.n	800c668 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa7e 	bl	800cab0 <USBD_CtlError>
            err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ba:	e055      	b.n	800c668 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	f107 0108 	add.w	r1, r7, #8
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
 800c5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5de:	e043      	b.n	800c668 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fa64 	bl	800cab0 <USBD_CtlError>
            err++;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ee:	e03b      	b.n	800c668 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c612:	e029      	b.n	800c668 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa4a 	bl	800cab0 <USBD_CtlError>
            err++;
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	3301      	adds	r3, #1
 800c620:	72fb      	strb	r3, [r7, #11]
          break;
 800c622:	e021      	b.n	800c668 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	7c12      	ldrb	r2, [r2, #16]
 800c63c:	f107 0108 	add.w	r1, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c646:	e00f      	b.n	800c668 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa30 	bl	800cab0 <USBD_CtlError>
            err++;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	3301      	adds	r3, #1
 800c654:	72fb      	strb	r3, [r7, #11]
          break;
 800c656:	e007      	b.n	800c668 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fa28 	bl	800cab0 <USBD_CtlError>
          err++;
 800c660:	7afb      	ldrb	r3, [r7, #11]
 800c662:	3301      	adds	r3, #1
 800c664:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c666:	bf00      	nop
      }
      break;
 800c668:	e037      	b.n	800c6da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7c1b      	ldrb	r3, [r3, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67a:	f107 0208 	add.w	r2, r7, #8
 800c67e:	4610      	mov	r0, r2
 800c680:	4798      	blx	r3
 800c682:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c684:	e029      	b.n	800c6da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fa11 	bl	800cab0 <USBD_CtlError>
        err++;
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	3301      	adds	r3, #1
 800c692:	72fb      	strb	r3, [r7, #11]
      break;
 800c694:	e021      	b.n	800c6da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7c1b      	ldrb	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10d      	bne.n	800c6ba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a6:	f107 0208 	add.w	r2, r7, #8
 800c6aa:	4610      	mov	r0, r2
 800c6ac:	4798      	blx	r3
 800c6ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	2207      	movs	r2, #7
 800c6b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6b8:	e00f      	b.n	800c6da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f9f7 	bl	800cab0 <USBD_CtlError>
        err++;
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c6c8:	e007      	b.n	800c6da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f9ef 	bl	800cab0 <USBD_CtlError>
      err++;
 800c6d2:	7afb      	ldrb	r3, [r7, #11]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c6d8:	bf00      	nop
  }

  if (err != 0U)
 800c6da:	7afb      	ldrb	r3, [r7, #11]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d11e      	bne.n	800c71e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	88db      	ldrh	r3, [r3, #6]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d016      	beq.n	800c716 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c6e8:	893b      	ldrh	r3, [r7, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00e      	beq.n	800c70c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	88da      	ldrh	r2, [r3, #6]
 800c6f2:	893b      	ldrh	r3, [r7, #8]
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	bf28      	it	cs
 800c6f8:	4613      	movcs	r3, r2
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6fe:	893b      	ldrh	r3, [r7, #8]
 800c700:	461a      	mov	r2, r3
 800c702:	68f9      	ldr	r1, [r7, #12]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fa44 	bl	800cb92 <USBD_CtlSendData>
 800c70a:	e009      	b.n	800c720 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f9ce 	bl	800cab0 <USBD_CtlError>
 800c714:	e004      	b.n	800c720 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fa95 	bl	800cc46 <USBD_CtlSendStatus>
 800c71c:	e000      	b.n	800c720 <USBD_GetDescriptor+0x320>
    return;
 800c71e:	bf00      	nop
  }
}
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop

0800c728 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	889b      	ldrh	r3, [r3, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d131      	bne.n	800c79e <USBD_SetAddress+0x76>
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	88db      	ldrh	r3, [r3, #6]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d12d      	bne.n	800c79e <USBD_SetAddress+0x76>
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	885b      	ldrh	r3, [r3, #2]
 800c746:	2b7f      	cmp	r3, #127	; 0x7f
 800c748:	d829      	bhi.n	800c79e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	885b      	ldrh	r3, [r3, #2]
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c754:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d104      	bne.n	800c76c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f9a3 	bl	800cab0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c76a:	e01d      	b.n	800c7a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7bfa      	ldrb	r2, [r7, #15]
 800c770:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fe7b 	bl	800d474 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fa61 	bl	800cc46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d004      	beq.n	800c794 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2202      	movs	r2, #2
 800c78e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c792:	e009      	b.n	800c7a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79c:	e004      	b.n	800c7a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f985 	bl	800cab0 <USBD_CtlError>
  }
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	885b      	ldrh	r3, [r3, #2]
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	4b4c      	ldr	r3, [pc, #304]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c7c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c7c8:	4b4b      	ldr	r3, [pc, #300]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d905      	bls.n	800c7dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f96c 	bl	800cab0 <USBD_CtlError>
    return USBD_FAIL;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e088      	b.n	800c8ee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d002      	beq.n	800c7ee <USBD_SetConfig+0x3e>
 800c7e8:	2b03      	cmp	r3, #3
 800c7ea:	d025      	beq.n	800c838 <USBD_SetConfig+0x88>
 800c7ec:	e071      	b.n	800c8d2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c7ee:	4b42      	ldr	r3, [pc, #264]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d01c      	beq.n	800c830 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c7f6:	4b40      	ldr	r3, [pc, #256]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c800:	4b3d      	ldr	r3, [pc, #244]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff f992 	bl	800bb30 <USBD_SetClassConfig>
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d004      	beq.n	800c820 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f949 	bl	800cab0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c81e:	e065      	b.n	800c8ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fa10 	bl	800cc46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2203      	movs	r2, #3
 800c82a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c82e:	e05d      	b.n	800c8ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fa08 	bl	800cc46 <USBD_CtlSendStatus>
      break;
 800c836:	e059      	b.n	800c8ec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c838:	4b2f      	ldr	r3, [pc, #188]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d112      	bne.n	800c866 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2202      	movs	r2, #2
 800c844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c848:	4b2b      	ldr	r3, [pc, #172]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	461a      	mov	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c852:	4b29      	ldr	r3, [pc, #164]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff f985 	bl	800bb68 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f9f1 	bl	800cc46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c864:	e042      	b.n	800c8ec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c866:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	429a      	cmp	r2, r3
 800c872:	d02a      	beq.n	800c8ca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff f973 	bl	800bb68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c882:	4b1d      	ldr	r3, [pc, #116]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c88c:	4b1a      	ldr	r3, [pc, #104]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff f94c 	bl	800bb30 <USBD_SetClassConfig>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00f      	beq.n	800c8c2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f903 	bl	800cab0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7ff f958 	bl	800bb68 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c8c0:	e014      	b.n	800c8ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f9bf 	bl	800cc46 <USBD_CtlSendStatus>
      break;
 800c8c8:	e010      	b.n	800c8ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 f9bb 	bl	800cc46 <USBD_CtlSendStatus>
      break;
 800c8d0:	e00c      	b.n	800c8ec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f8eb 	bl	800cab0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8da:	4b07      	ldr	r3, [pc, #28]	; (800c8f8 <USBD_SetConfig+0x148>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff f941 	bl	800bb68 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ea:	bf00      	nop
  }

  return ret;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20000758 	.word	0x20000758

0800c8fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	88db      	ldrh	r3, [r3, #6]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d004      	beq.n	800c918 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f8cd 	bl	800cab0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c916:	e023      	b.n	800c960 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	dc02      	bgt.n	800c92a <USBD_GetConfig+0x2e>
 800c924:	2b00      	cmp	r3, #0
 800c926:	dc03      	bgt.n	800c930 <USBD_GetConfig+0x34>
 800c928:	e015      	b.n	800c956 <USBD_GetConfig+0x5a>
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d00b      	beq.n	800c946 <USBD_GetConfig+0x4a>
 800c92e:	e012      	b.n	800c956 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3308      	adds	r3, #8
 800c93a:	2201      	movs	r2, #1
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f927 	bl	800cb92 <USBD_CtlSendData>
        break;
 800c944:	e00c      	b.n	800c960 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3304      	adds	r3, #4
 800c94a:	2201      	movs	r2, #1
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f91f 	bl	800cb92 <USBD_CtlSendData>
        break;
 800c954:	e004      	b.n	800c960 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f8a9 	bl	800cab0 <USBD_CtlError>
        break;
 800c95e:	bf00      	nop
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	3b01      	subs	r3, #1
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d81e      	bhi.n	800c9be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	88db      	ldrh	r3, [r3, #6]
 800c984:	2b02      	cmp	r3, #2
 800c986:	d004      	beq.n	800c992 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f890 	bl	800cab0 <USBD_CtlError>
        break;
 800c990:	e01a      	b.n	800c9c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d005      	beq.n	800c9ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	f043 0202 	orr.w	r2, r3, #2
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	330c      	adds	r3, #12
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f8eb 	bl	800cb92 <USBD_CtlSendData>
      break;
 800c9bc:	e004      	b.n	800c9c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f875 	bl	800cab0 <USBD_CtlError>
      break;
 800c9c6:	bf00      	nop
  }
}
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	885b      	ldrh	r3, [r3, #2]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d106      	bne.n	800c9f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f92b 	bl	800cc46 <USBD_CtlSendStatus>
  }
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d80b      	bhi.n	800ca28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	885b      	ldrh	r3, [r3, #2]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d10c      	bne.n	800ca32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f910 	bl	800cc46 <USBD_CtlSendStatus>
      }
      break;
 800ca26:	e004      	b.n	800ca32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca28:	6839      	ldr	r1, [r7, #0]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f840 	bl	800cab0 <USBD_CtlError>
      break;
 800ca30:	e000      	b.n	800ca34 <USBD_ClrFeature+0x3c>
      break;
 800ca32:	bf00      	nop
  }
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	781a      	ldrb	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	3301      	adds	r3, #1
 800ca56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3301      	adds	r3, #1
 800ca64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7ff fa92 	bl	800bf90 <SWAPBYTE>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	461a      	mov	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3301      	adds	r3, #1
 800ca78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7ff fa85 	bl	800bf90 <SWAPBYTE>
 800ca86:	4603      	mov	r3, r0
 800ca88:	461a      	mov	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3301      	adds	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3301      	adds	r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f7ff fa78 	bl	800bf90 <SWAPBYTE>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	80da      	strh	r2, [r3, #6]
}
 800caa8:	bf00      	nop
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800caba:	2180      	movs	r1, #128	; 0x80
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fc6f 	bl	800d3a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cac2:	2100      	movs	r1, #0
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fc6b 	bl	800d3a0 <USBD_LL_StallEP>
}
 800caca:	bf00      	nop
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b086      	sub	sp, #24
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cade:	2300      	movs	r3, #0
 800cae0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d036      	beq.n	800cb56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800caec:	6938      	ldr	r0, [r7, #16]
 800caee:	f000 f836 	bl	800cb5e <USBD_GetLen>
 800caf2:	4603      	mov	r3, r0
 800caf4:	3301      	adds	r3, #1
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	4413      	add	r3, r2
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	7812      	ldrb	r2, [r2, #0]
 800cb0a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	4413      	add	r3, r2
 800cb18:	2203      	movs	r2, #3
 800cb1a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb22:	e013      	b.n	800cb4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	4413      	add	r3, r2
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	7812      	ldrb	r2, [r2, #0]
 800cb2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	3301      	adds	r3, #1
 800cb34:	613b      	str	r3, [r7, #16]
    idx++;
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	4413      	add	r3, r2
 800cb42:	2200      	movs	r2, #0
 800cb44:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb46:	7dfb      	ldrb	r3, [r7, #23]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1e7      	bne.n	800cb24 <USBD_GetString+0x52>
 800cb54:	e000      	b.n	800cb58 <USBD_GetString+0x86>
    return;
 800cb56:	bf00      	nop
  }
}
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b085      	sub	sp, #20
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb6e:	e005      	b.n	800cb7c <USBD_GetLen+0x1e>
  {
    len++;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	3301      	adds	r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1f5      	bne.n	800cb70 <USBD_GetLen+0x12>
  }

  return len;
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2202      	movs	r2, #2
 800cba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 fc7a 	bl	800d4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	2100      	movs	r1, #0
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 fc69 	bl	800d4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2203      	movs	r2, #3
 800cbfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	2100      	movs	r1, #0
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 fc6d 	bl	800d4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	2100      	movs	r1, #0
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 fc5c 	bl	800d4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2204      	movs	r2, #4
 800cc52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc56:	2300      	movs	r3, #0
 800cc58:	2200      	movs	r2, #0
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fc28 	bl	800d4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2205      	movs	r2, #5
 800cc78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2100      	movs	r1, #0
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fc36 	bl	800d4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4912      	ldr	r1, [pc, #72]	; (800cce4 <MX_USB_Device_Init+0x50>)
 800cc9c:	4812      	ldr	r0, [pc, #72]	; (800cce8 <MX_USB_Device_Init+0x54>)
 800cc9e:	f7fe fed9 	bl	800ba54 <USBD_Init>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cca8:	f7f4 ff94 	bl	8001bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ccac:	490f      	ldr	r1, [pc, #60]	; (800ccec <MX_USB_Device_Init+0x58>)
 800ccae:	480e      	ldr	r0, [pc, #56]	; (800cce8 <MX_USB_Device_Init+0x54>)
 800ccb0:	f7fe ff00 	bl	800bab4 <USBD_RegisterClass>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ccba:	f7f4 ff8b 	bl	8001bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ccbe:	490c      	ldr	r1, [pc, #48]	; (800ccf0 <MX_USB_Device_Init+0x5c>)
 800ccc0:	4809      	ldr	r0, [pc, #36]	; (800cce8 <MX_USB_Device_Init+0x54>)
 800ccc2:	f7fe fe51 	bl	800b968 <USBD_CDC_RegisterInterface>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cccc:	f7f4 ff82 	bl	8001bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ccd0:	4805      	ldr	r0, [pc, #20]	; (800cce8 <MX_USB_Device_Init+0x54>)
 800ccd2:	f7fe ff16 	bl	800bb02 <USBD_Start>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ccdc:	f7f4 ff7a 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cce0:	bf00      	nop
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	20000130 	.word	0x20000130
 800cce8:	2000075c 	.word	0x2000075c
 800ccec:	20000018 	.word	0x20000018
 800ccf0:	2000011c 	.word	0x2000011c

0800ccf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	4905      	ldr	r1, [pc, #20]	; (800cd10 <CDC_Init_FS+0x1c>)
 800ccfc:	4805      	ldr	r0, [pc, #20]	; (800cd14 <CDC_Init_FS+0x20>)
 800ccfe:	f7fe fe48 	bl	800b992 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd02:	4905      	ldr	r1, [pc, #20]	; (800cd18 <CDC_Init_FS+0x24>)
 800cd04:	4803      	ldr	r0, [pc, #12]	; (800cd14 <CDC_Init_FS+0x20>)
 800cd06:	f7fe fe62 	bl	800b9ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20000e2c 	.word	0x20000e2c
 800cd14:	2000075c 	.word	0x2000075c
 800cd18:	20000a2c 	.word	0x20000a2c

0800cd1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	6039      	str	r1, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd3c:	79fb      	ldrb	r3, [r7, #7]
 800cd3e:	2b23      	cmp	r3, #35	; 0x23
 800cd40:	d84a      	bhi.n	800cdd8 <CDC_Control_FS+0xac>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <CDC_Control_FS+0x1c>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cdd9 	.word	0x0800cdd9
 800cd4c:	0800cdd9 	.word	0x0800cdd9
 800cd50:	0800cdd9 	.word	0x0800cdd9
 800cd54:	0800cdd9 	.word	0x0800cdd9
 800cd58:	0800cdd9 	.word	0x0800cdd9
 800cd5c:	0800cdd9 	.word	0x0800cdd9
 800cd60:	0800cdd9 	.word	0x0800cdd9
 800cd64:	0800cdd9 	.word	0x0800cdd9
 800cd68:	0800cdd9 	.word	0x0800cdd9
 800cd6c:	0800cdd9 	.word	0x0800cdd9
 800cd70:	0800cdd9 	.word	0x0800cdd9
 800cd74:	0800cdd9 	.word	0x0800cdd9
 800cd78:	0800cdd9 	.word	0x0800cdd9
 800cd7c:	0800cdd9 	.word	0x0800cdd9
 800cd80:	0800cdd9 	.word	0x0800cdd9
 800cd84:	0800cdd9 	.word	0x0800cdd9
 800cd88:	0800cdd9 	.word	0x0800cdd9
 800cd8c:	0800cdd9 	.word	0x0800cdd9
 800cd90:	0800cdd9 	.word	0x0800cdd9
 800cd94:	0800cdd9 	.word	0x0800cdd9
 800cd98:	0800cdd9 	.word	0x0800cdd9
 800cd9c:	0800cdd9 	.word	0x0800cdd9
 800cda0:	0800cdd9 	.word	0x0800cdd9
 800cda4:	0800cdd9 	.word	0x0800cdd9
 800cda8:	0800cdd9 	.word	0x0800cdd9
 800cdac:	0800cdd9 	.word	0x0800cdd9
 800cdb0:	0800cdd9 	.word	0x0800cdd9
 800cdb4:	0800cdd9 	.word	0x0800cdd9
 800cdb8:	0800cdd9 	.word	0x0800cdd9
 800cdbc:	0800cdd9 	.word	0x0800cdd9
 800cdc0:	0800cdd9 	.word	0x0800cdd9
 800cdc4:	0800cdd9 	.word	0x0800cdd9
 800cdc8:	0800cdd9 	.word	0x0800cdd9
 800cdcc:	0800cdd9 	.word	0x0800cdd9
 800cdd0:	0800cdd9 	.word	0x0800cdd9
 800cdd4:	0800cdd9 	.word	0x0800cdd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cdd8:	bf00      	nop
  }

  return (USBD_OK);
 800cdda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdf2:	6879      	ldr	r1, [r7, #4]
 800cdf4:	4805      	ldr	r0, [pc, #20]	; (800ce0c <CDC_Receive_FS+0x24>)
 800cdf6:	f7fe fdea 	bl	800b9ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cdfa:	4804      	ldr	r0, [pc, #16]	; (800ce0c <CDC_Receive_FS+0x24>)
 800cdfc:	f7fe fe00 	bl	800ba00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ce00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	2000075c 	.word	0x2000075c

0800ce10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ce22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
	...

0800ce34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	6039      	str	r1, [r7, #0]
 800ce3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2212      	movs	r2, #18
 800ce44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ce46:	4b03      	ldr	r3, [pc, #12]	; (800ce54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	20000150 	.word	0x20000150

0800ce58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2204      	movs	r2, #4
 800ce68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce6a:	4b03      	ldr	r3, [pc, #12]	; (800ce78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	20000164 	.word	0x20000164

0800ce7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4907      	ldr	r1, [pc, #28]	; (800ceb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ce92:	4808      	ldr	r0, [pc, #32]	; (800ceb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ce94:	f7ff fe1d 	bl	800cad2 <USBD_GetString>
 800ce98:	e004      	b.n	800cea4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	4904      	ldr	r1, [pc, #16]	; (800ceb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ce9e:	4805      	ldr	r0, [pc, #20]	; (800ceb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cea0:	f7ff fe17 	bl	800cad2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	2000122c 	.word	0x2000122c
 800ceb4:	0800d9e4 	.word	0x0800d9e4

0800ceb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cec4:	683a      	ldr	r2, [r7, #0]
 800cec6:	4904      	ldr	r1, [pc, #16]	; (800ced8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cec8:	4804      	ldr	r0, [pc, #16]	; (800cedc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ceca:	f7ff fe02 	bl	800cad2 <USBD_GetString>
  return USBD_StrDesc;
 800cece:	4b02      	ldr	r3, [pc, #8]	; (800ced8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	2000122c 	.word	0x2000122c
 800cedc:	0800d9fc 	.word	0x0800d9fc

0800cee0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	6039      	str	r1, [r7, #0]
 800ceea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	221a      	movs	r2, #26
 800cef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cef2:	f000 f843 	bl	800cf7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cef6:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20000168 	.word	0x20000168

0800cf04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	6039      	str	r1, [r7, #0]
 800cf0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf10:	79fb      	ldrb	r3, [r7, #7]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d105      	bne.n	800cf22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	4907      	ldr	r1, [pc, #28]	; (800cf38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cf1a:	4808      	ldr	r0, [pc, #32]	; (800cf3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cf1c:	f7ff fdd9 	bl	800cad2 <USBD_GetString>
 800cf20:	e004      	b.n	800cf2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	4904      	ldr	r1, [pc, #16]	; (800cf38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cf26:	4805      	ldr	r0, [pc, #20]	; (800cf3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cf28:	f7ff fdd3 	bl	800cad2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf2c:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	2000122c 	.word	0x2000122c
 800cf3c:	0800da10 	.word	0x0800da10

0800cf40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	4603      	mov	r3, r0
 800cf48:	6039      	str	r1, [r7, #0]
 800cf4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d105      	bne.n	800cf5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	4907      	ldr	r1, [pc, #28]	; (800cf74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cf56:	4808      	ldr	r0, [pc, #32]	; (800cf78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cf58:	f7ff fdbb 	bl	800cad2 <USBD_GetString>
 800cf5c:	e004      	b.n	800cf68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	4904      	ldr	r1, [pc, #16]	; (800cf74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cf62:	4805      	ldr	r0, [pc, #20]	; (800cf78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cf64:	f7ff fdb5 	bl	800cad2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf68:	4b02      	ldr	r3, [pc, #8]	; (800cf74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	2000122c 	.word	0x2000122c
 800cf78:	0800da1c 	.word	0x0800da1c

0800cf7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf82:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <Get_SerialNum+0x44>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf88:	4b0e      	ldr	r3, [pc, #56]	; (800cfc4 <Get_SerialNum+0x48>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf8e:	4b0e      	ldr	r3, [pc, #56]	; (800cfc8 <Get_SerialNum+0x4c>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4413      	add	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d009      	beq.n	800cfb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cfa2:	2208      	movs	r2, #8
 800cfa4:	4909      	ldr	r1, [pc, #36]	; (800cfcc <Get_SerialNum+0x50>)
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 f814 	bl	800cfd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cfac:	2204      	movs	r2, #4
 800cfae:	4908      	ldr	r1, [pc, #32]	; (800cfd0 <Get_SerialNum+0x54>)
 800cfb0:	68b8      	ldr	r0, [r7, #8]
 800cfb2:	f000 f80f 	bl	800cfd4 <IntToUnicode>
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	1fff7590 	.word	0x1fff7590
 800cfc4:	1fff7594 	.word	0x1fff7594
 800cfc8:	1fff7598 	.word	0x1fff7598
 800cfcc:	2000016a 	.word	0x2000016a
 800cfd0:	2000017a 	.word	0x2000017a

0800cfd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	75fb      	strb	r3, [r7, #23]
 800cfea:	e027      	b.n	800d03c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	0f1b      	lsrs	r3, r3, #28
 800cff0:	2b09      	cmp	r3, #9
 800cff2:	d80b      	bhi.n	800d00c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	0f1b      	lsrs	r3, r3, #28
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	4619      	mov	r1, r3
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	440b      	add	r3, r1
 800d004:	3230      	adds	r2, #48	; 0x30
 800d006:	b2d2      	uxtb	r2, r2
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	e00a      	b.n	800d022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	0f1b      	lsrs	r3, r3, #28
 800d010:	b2da      	uxtb	r2, r3
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	4619      	mov	r1, r3
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	440b      	add	r3, r1
 800d01c:	3237      	adds	r2, #55	; 0x37
 800d01e:	b2d2      	uxtb	r2, r2
 800d020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	011b      	lsls	r3, r3, #4
 800d026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	3301      	adds	r3, #1
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	4413      	add	r3, r2
 800d032:	2200      	movs	r2, #0
 800d034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d036:	7dfb      	ldrb	r3, [r7, #23]
 800d038:	3301      	adds	r3, #1
 800d03a:	75fb      	strb	r3, [r7, #23]
 800d03c:	7dfa      	ldrb	r2, [r7, #23]
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	429a      	cmp	r2, r3
 800d042:	d3d3      	bcc.n	800cfec <IntToUnicode+0x18>
  }
}
 800d044:	bf00      	nop
 800d046:	bf00      	nop
 800d048:	371c      	adds	r7, #28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
	...

0800d054 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b094      	sub	sp, #80	; 0x50
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d05c:	f107 030c 	add.w	r3, r7, #12
 800d060:	2244      	movs	r2, #68	; 0x44
 800d062:	2100      	movs	r1, #0
 800d064:	4618      	mov	r0, r3
 800d066:	f000 fbdd 	bl	800d824 <memset>
  if(pcdHandle->Instance==USB)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a15      	ldr	r2, [pc, #84]	; (800d0c4 <HAL_PCD_MspInit+0x70>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d122      	bne.n	800d0ba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d078:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d07a:	2300      	movs	r3, #0
 800d07c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d07e:	f107 030c 	add.w	r3, r7, #12
 800d082:	4618      	mov	r0, r3
 800d084:	f7f9 f936 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d08e:	f7f4 fda1 	bl	8001bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d092:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <HAL_PCD_MspInit+0x74>)
 800d094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d096:	4a0c      	ldr	r2, [pc, #48]	; (800d0c8 <HAL_PCD_MspInit+0x74>)
 800d098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d09c:	6593      	str	r3, [r2, #88]	; 0x58
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <HAL_PCD_MspInit+0x74>)
 800d0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0a6:	60bb      	str	r3, [r7, #8]
 800d0a8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	2014      	movs	r0, #20
 800d0b0:	f7f6 fc09 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d0b4:	2014      	movs	r0, #20
 800d0b6:	f7f6 fc20 	bl	80038fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d0ba:	bf00      	nop
 800d0bc:	3750      	adds	r7, #80	; 0x50
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	40005c00 	.word	0x40005c00
 800d0c8:	40021000 	.word	0x40021000

0800d0cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f7fe fd58 	bl	800bb98 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d0e8:	bf00      	nop
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800d102:	78fa      	ldrb	r2, [r7, #3]
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	440b      	add	r3, r1
 800d110:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	78fb      	ldrb	r3, [r7, #3]
 800d118:	4619      	mov	r1, r3
 800d11a:	f7fe fd92 	bl	800bc42 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d11e:	bf00      	nop
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	460b      	mov	r3, r1
 800d130:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800d138:	78fa      	ldrb	r2, [r7, #3]
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	4613      	mov	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	440b      	add	r3, r1
 800d146:	3324      	adds	r3, #36	; 0x24
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	4619      	mov	r1, r3
 800d14e:	f7fe fddb 	bl	800bd08 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d152:	bf00      	nop
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe feef 	bl	800bf4c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d17e:	2301      	movs	r3, #1
 800d180:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	795b      	ldrb	r3, [r3, #5]
 800d186:	2b02      	cmp	r3, #2
 800d188:	d001      	beq.n	800d18e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d18a:	f7f4 fd23 	bl	8001bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d194:	7bfa      	ldrb	r2, [r7, #15]
 800d196:	4611      	mov	r1, r2
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fe99 	bl	800bed0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe fe45 	bl	800be34 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d1aa:	bf00      	nop
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fe94 	bl	800bef0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	7a5b      	ldrb	r3, [r3, #9]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1d0:	4b04      	ldr	r3, [pc, #16]	; (800d1e4 <HAL_PCD_SuspendCallback+0x30>)
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	4a03      	ldr	r2, [pc, #12]	; (800d1e4 <HAL_PCD_SuspendCallback+0x30>)
 800d1d6:	f043 0306 	orr.w	r3, r3, #6
 800d1da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d1dc:	bf00      	nop
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	e000ed00 	.word	0xe000ed00

0800d1e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	7a5b      	ldrb	r3, [r3, #9]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1f8:	4b08      	ldr	r3, [pc, #32]	; (800d21c <HAL_PCD_ResumeCallback+0x34>)
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	4a07      	ldr	r2, [pc, #28]	; (800d21c <HAL_PCD_ResumeCallback+0x34>)
 800d1fe:	f023 0306 	bic.w	r3, r3, #6
 800d202:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d204:	f000 f9f8 	bl	800d5f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fe84 	bl	800bf1c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	e000ed00 	.word	0xe000ed00

0800d220 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d228:	4a2b      	ldr	r2, [pc, #172]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a29      	ldr	r2, [pc, #164]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d234:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d238:	4b27      	ldr	r3, [pc, #156]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d23a:	4a28      	ldr	r2, [pc, #160]	; (800d2dc <USBD_LL_Init+0xbc>)
 800d23c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d23e:	4b26      	ldr	r3, [pc, #152]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d240:	2208      	movs	r2, #8
 800d242:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d244:	4b24      	ldr	r3, [pc, #144]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d246:	2202      	movs	r2, #2
 800d248:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d24a:	4b23      	ldr	r3, [pc, #140]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d24c:	2202      	movs	r2, #2
 800d24e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d250:	4b21      	ldr	r3, [pc, #132]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d252:	2200      	movs	r2, #0
 800d254:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d256:	4b20      	ldr	r3, [pc, #128]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d258:	2200      	movs	r2, #0
 800d25a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d25c:	4b1e      	ldr	r3, [pc, #120]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d25e:	2200      	movs	r2, #0
 800d260:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d262:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d264:	2200      	movs	r2, #0
 800d266:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d268:	481b      	ldr	r0, [pc, #108]	; (800d2d8 <USBD_LL_Init+0xb8>)
 800d26a:	f7f6 fd2d 	bl	8003cc8 <HAL_PCD_Init>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d274:	f7f4 fcae 	bl	8001bd4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d27e:	2318      	movs	r3, #24
 800d280:	2200      	movs	r2, #0
 800d282:	2100      	movs	r1, #0
 800d284:	f7f8 f9e7 	bl	8005656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d28e:	2358      	movs	r3, #88	; 0x58
 800d290:	2200      	movs	r2, #0
 800d292:	2180      	movs	r1, #128	; 0x80
 800d294:	f7f8 f9df 	bl	8005656 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d29e:	23c0      	movs	r3, #192	; 0xc0
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	2181      	movs	r1, #129	; 0x81
 800d2a4:	f7f8 f9d7 	bl	8005656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	f7f8 f9ce 	bl	8005656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2182      	movs	r1, #130	; 0x82
 800d2c8:	f7f8 f9c5 	bl	8005656 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	2000142c 	.word	0x2000142c
 800d2dc:	40005c00 	.word	0x40005c00

0800d2e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f6 fdb4 	bl	8003e64 <HAL_PCD_Start>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d300:	7bfb      	ldrb	r3, [r7, #15]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 f980 	bl	800d608 <USBD_Get_USB_Status>
 800d308:	4603      	mov	r3, r0
 800d30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	4608      	mov	r0, r1
 800d320:	4611      	mov	r1, r2
 800d322:	461a      	mov	r2, r3
 800d324:	4603      	mov	r3, r0
 800d326:	70fb      	strb	r3, [r7, #3]
 800d328:	460b      	mov	r3, r1
 800d32a:	70bb      	strb	r3, [r7, #2]
 800d32c:	4613      	mov	r3, r2
 800d32e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d330:	2300      	movs	r3, #0
 800d332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d33e:	78bb      	ldrb	r3, [r7, #2]
 800d340:	883a      	ldrh	r2, [r7, #0]
 800d342:	78f9      	ldrb	r1, [r7, #3]
 800d344:	f7f6 fefb 	bl	800413e <HAL_PCD_EP_Open>
 800d348:	4603      	mov	r3, r0
 800d34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 f95a 	bl	800d608 <USBD_Get_USB_Status>
 800d354:	4603      	mov	r3, r0
 800d356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d358:	7bbb      	ldrb	r3, [r7, #14]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b084      	sub	sp, #16
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
 800d36a:	460b      	mov	r3, r1
 800d36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d37c:	78fa      	ldrb	r2, [r7, #3]
 800d37e:	4611      	mov	r1, r2
 800d380:	4618      	mov	r0, r3
 800d382:	f7f6 ff39 	bl	80041f8 <HAL_PCD_EP_Close>
 800d386:	4603      	mov	r3, r0
 800d388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f000 f93b 	bl	800d608 <USBD_Get_USB_Status>
 800d392:	4603      	mov	r3, r0
 800d394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d396:	7bbb      	ldrb	r3, [r7, #14]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ba:	78fa      	ldrb	r2, [r7, #3]
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f6 ffe2 	bl	8004388 <HAL_PCD_EP_SetStall>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f91c 	bl	800d608 <USBD_Get_USB_Status>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3f8:	78fa      	ldrb	r2, [r7, #3]
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7f7 f815 	bl	800442c <HAL_PCD_EP_ClrStall>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d406:	7bfb      	ldrb	r3, [r7, #15]
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 f8fd 	bl	800d608 <USBD_Get_USB_Status>
 800d40e:	4603      	mov	r3, r0
 800d410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d412:	7bbb      	ldrb	r3, [r7, #14]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d42e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d434:	2b00      	cmp	r3, #0
 800d436:	da0b      	bge.n	800d450 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d438:	78fb      	ldrb	r3, [r7, #3]
 800d43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d43e:	68f9      	ldr	r1, [r7, #12]
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	440b      	add	r3, r1
 800d44a:	3312      	adds	r3, #18
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	e00b      	b.n	800d468 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d456:	68f9      	ldr	r1, [r7, #12]
 800d458:	4613      	mov	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4413      	add	r3, r2
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	440b      	add	r3, r1
 800d462:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800d466:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3714      	adds	r7, #20
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	460b      	mov	r3, r1
 800d47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d48e:	78fa      	ldrb	r2, [r7, #3]
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7f6 fe2f 	bl	80040f6 <HAL_PCD_SetAddress>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f8b2 	bl	800d608 <USBD_Get_USB_Status>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b086      	sub	sp, #24
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	60f8      	str	r0, [r7, #12]
 800d4ba:	607a      	str	r2, [r7, #4]
 800d4bc:	603b      	str	r3, [r7, #0]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4d0:	7af9      	ldrb	r1, [r7, #11]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	f7f6 ff20 	bl	800431a <HAL_PCD_EP_Transmit>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f000 f891 	bl	800d608 <USBD_Get_USB_Status>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	607a      	str	r2, [r7, #4]
 800d4fe:	603b      	str	r3, [r7, #0]
 800d500:	460b      	mov	r3, r1
 800d502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d504:	2300      	movs	r3, #0
 800d506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d512:	7af9      	ldrb	r1, [r7, #11]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	f7f6 feb6 	bl	8004288 <HAL_PCD_EP_Receive>
 800d51c:	4603      	mov	r3, r0
 800d51e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	4618      	mov	r0, r3
 800d524:	f000 f870 	bl	800d608 <USBD_Get_USB_Status>
 800d528:	4603      	mov	r3, r0
 800d52a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d52c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b082      	sub	sp, #8
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	460b      	mov	r3, r1
 800d540:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d548:	78fa      	ldrb	r2, [r7, #3]
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f6 fecc 	bl	80042ea <HAL_PCD_EP_GetRxCount>
 800d552:	4603      	mov	r3, r0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	460b      	mov	r3, r1
 800d566:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d568:	78fb      	ldrb	r3, [r7, #3]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d002      	beq.n	800d574 <HAL_PCDEx_LPM_Callback+0x18>
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d013      	beq.n	800d59a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d572:	e023      	b.n	800d5bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7a5b      	ldrb	r3, [r3, #9]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d007      	beq.n	800d58c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d57c:	f000 f83c 	bl	800d5f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d580:	4b10      	ldr	r3, [pc, #64]	; (800d5c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	4a0f      	ldr	r2, [pc, #60]	; (800d5c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d586:	f023 0306 	bic.w	r3, r3, #6
 800d58a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe fcc2 	bl	800bf1c <USBD_LL_Resume>
    break;
 800d598:	e010      	b.n	800d5bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fe fca5 	bl	800bef0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7a5b      	ldrb	r3, [r3, #9]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5ae:	4b05      	ldr	r3, [pc, #20]	; (800d5c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	4a04      	ldr	r2, [pc, #16]	; (800d5c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d5b4:	f043 0306 	orr.w	r3, r3, #6
 800d5b8:	6113      	str	r3, [r2, #16]
    break;
 800d5ba:	bf00      	nop
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	e000ed00 	.word	0xe000ed00

0800d5c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5d0:	4b03      	ldr	r3, [pc, #12]	; (800d5e0 <USBD_static_malloc+0x18>)
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	20001708 	.word	0x20001708

0800d5e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]

}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 800d5fc:	bf00      	nop
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr
	...

0800d608 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4603      	mov	r3, r0
 800d610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	2b03      	cmp	r3, #3
 800d61a:	d817      	bhi.n	800d64c <USBD_Get_USB_Status+0x44>
 800d61c:	a201      	add	r2, pc, #4	; (adr r2, 800d624 <USBD_Get_USB_Status+0x1c>)
 800d61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d622:	bf00      	nop
 800d624:	0800d635 	.word	0x0800d635
 800d628:	0800d63b 	.word	0x0800d63b
 800d62c:	0800d641 	.word	0x0800d641
 800d630:	0800d647 	.word	0x0800d647
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	73fb      	strb	r3, [r7, #15]
    break;
 800d638:	e00b      	b.n	800d652 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d63a:	2303      	movs	r3, #3
 800d63c:	73fb      	strb	r3, [r7, #15]
    break;
 800d63e:	e008      	b.n	800d652 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d640:	2301      	movs	r3, #1
 800d642:	73fb      	strb	r3, [r7, #15]
    break;
 800d644:	e005      	b.n	800d652 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d646:	2303      	movs	r3, #3
 800d648:	73fb      	strb	r3, [r7, #15]
    break;
 800d64a:	e002      	b.n	800d652 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d64c:	2303      	movs	r3, #3
 800d64e:	73fb      	strb	r3, [r7, #15]
    break;
 800d650:	bf00      	nop
  }
  return usb_status;
 800d652:	7bfb      	ldrb	r3, [r7, #15]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <_ZdlPvj>:
 800d660:	f000 b811 	b.w	800d686 <_ZdlPv>

0800d664 <_Znwj>:
 800d664:	2801      	cmp	r0, #1
 800d666:	bf38      	it	cc
 800d668:	2001      	movcc	r0, #1
 800d66a:	b510      	push	{r4, lr}
 800d66c:	4604      	mov	r4, r0
 800d66e:	4620      	mov	r0, r4
 800d670:	f000 f81c 	bl	800d6ac <malloc>
 800d674:	b100      	cbz	r0, 800d678 <_Znwj+0x14>
 800d676:	bd10      	pop	{r4, pc}
 800d678:	f000 f808 	bl	800d68c <_ZSt15get_new_handlerv>
 800d67c:	b908      	cbnz	r0, 800d682 <_Znwj+0x1e>
 800d67e:	f000 f80d 	bl	800d69c <abort>
 800d682:	4780      	blx	r0
 800d684:	e7f3      	b.n	800d66e <_Znwj+0xa>

0800d686 <_ZdlPv>:
 800d686:	f000 b819 	b.w	800d6bc <free>
	...

0800d68c <_ZSt15get_new_handlerv>:
 800d68c:	4b02      	ldr	r3, [pc, #8]	; (800d698 <_ZSt15get_new_handlerv+0xc>)
 800d68e:	6818      	ldr	r0, [r3, #0]
 800d690:	f3bf 8f5b 	dmb	ish
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	20001928 	.word	0x20001928

0800d69c <abort>:
 800d69c:	b508      	push	{r3, lr}
 800d69e:	2006      	movs	r0, #6
 800d6a0:	f000 f8f0 	bl	800d884 <raise>
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	f7f4 fb47 	bl	8001d38 <_exit>
	...

0800d6ac <malloc>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	; (800d6b8 <malloc+0xc>)
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	6818      	ldr	r0, [r3, #0]
 800d6b2:	f000 b82b 	b.w	800d70c <_malloc_r>
 800d6b6:	bf00      	nop
 800d6b8:	200001d0 	.word	0x200001d0

0800d6bc <free>:
 800d6bc:	4b02      	ldr	r3, [pc, #8]	; (800d6c8 <free+0xc>)
 800d6be:	4601      	mov	r1, r0
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	f000 b937 	b.w	800d934 <_free_r>
 800d6c6:	bf00      	nop
 800d6c8:	200001d0 	.word	0x200001d0

0800d6cc <sbrk_aligned>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4e0e      	ldr	r6, [pc, #56]	; (800d708 <sbrk_aligned+0x3c>)
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	6831      	ldr	r1, [r6, #0]
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	b911      	cbnz	r1, 800d6de <sbrk_aligned+0x12>
 800d6d8:	f000 f8f0 	bl	800d8bc <_sbrk_r>
 800d6dc:	6030      	str	r0, [r6, #0]
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f000 f8eb 	bl	800d8bc <_sbrk_r>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	d00a      	beq.n	800d700 <sbrk_aligned+0x34>
 800d6ea:	1cc4      	adds	r4, r0, #3
 800d6ec:	f024 0403 	bic.w	r4, r4, #3
 800d6f0:	42a0      	cmp	r0, r4
 800d6f2:	d007      	beq.n	800d704 <sbrk_aligned+0x38>
 800d6f4:	1a21      	subs	r1, r4, r0
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f000 f8e0 	bl	800d8bc <_sbrk_r>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d101      	bne.n	800d704 <sbrk_aligned+0x38>
 800d700:	f04f 34ff 	mov.w	r4, #4294967295
 800d704:	4620      	mov	r0, r4
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	20001930 	.word	0x20001930

0800d70c <_malloc_r>:
 800d70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d710:	1ccd      	adds	r5, r1, #3
 800d712:	f025 0503 	bic.w	r5, r5, #3
 800d716:	3508      	adds	r5, #8
 800d718:	2d0c      	cmp	r5, #12
 800d71a:	bf38      	it	cc
 800d71c:	250c      	movcc	r5, #12
 800d71e:	2d00      	cmp	r5, #0
 800d720:	4607      	mov	r7, r0
 800d722:	db01      	blt.n	800d728 <_malloc_r+0x1c>
 800d724:	42a9      	cmp	r1, r5
 800d726:	d905      	bls.n	800d734 <_malloc_r+0x28>
 800d728:	230c      	movs	r3, #12
 800d72a:	603b      	str	r3, [r7, #0]
 800d72c:	2600      	movs	r6, #0
 800d72e:	4630      	mov	r0, r6
 800d730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d808 <_malloc_r+0xfc>
 800d738:	f000 f868 	bl	800d80c <__malloc_lock>
 800d73c:	f8d8 3000 	ldr.w	r3, [r8]
 800d740:	461c      	mov	r4, r3
 800d742:	bb5c      	cbnz	r4, 800d79c <_malloc_r+0x90>
 800d744:	4629      	mov	r1, r5
 800d746:	4638      	mov	r0, r7
 800d748:	f7ff ffc0 	bl	800d6cc <sbrk_aligned>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	4604      	mov	r4, r0
 800d750:	d155      	bne.n	800d7fe <_malloc_r+0xf2>
 800d752:	f8d8 4000 	ldr.w	r4, [r8]
 800d756:	4626      	mov	r6, r4
 800d758:	2e00      	cmp	r6, #0
 800d75a:	d145      	bne.n	800d7e8 <_malloc_r+0xdc>
 800d75c:	2c00      	cmp	r4, #0
 800d75e:	d048      	beq.n	800d7f2 <_malloc_r+0xe6>
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	4631      	mov	r1, r6
 800d764:	4638      	mov	r0, r7
 800d766:	eb04 0903 	add.w	r9, r4, r3
 800d76a:	f000 f8a7 	bl	800d8bc <_sbrk_r>
 800d76e:	4581      	cmp	r9, r0
 800d770:	d13f      	bne.n	800d7f2 <_malloc_r+0xe6>
 800d772:	6821      	ldr	r1, [r4, #0]
 800d774:	1a6d      	subs	r5, r5, r1
 800d776:	4629      	mov	r1, r5
 800d778:	4638      	mov	r0, r7
 800d77a:	f7ff ffa7 	bl	800d6cc <sbrk_aligned>
 800d77e:	3001      	adds	r0, #1
 800d780:	d037      	beq.n	800d7f2 <_malloc_r+0xe6>
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	442b      	add	r3, r5
 800d786:	6023      	str	r3, [r4, #0]
 800d788:	f8d8 3000 	ldr.w	r3, [r8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d038      	beq.n	800d802 <_malloc_r+0xf6>
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	42a2      	cmp	r2, r4
 800d794:	d12b      	bne.n	800d7ee <_malloc_r+0xe2>
 800d796:	2200      	movs	r2, #0
 800d798:	605a      	str	r2, [r3, #4]
 800d79a:	e00f      	b.n	800d7bc <_malloc_r+0xb0>
 800d79c:	6822      	ldr	r2, [r4, #0]
 800d79e:	1b52      	subs	r2, r2, r5
 800d7a0:	d41f      	bmi.n	800d7e2 <_malloc_r+0xd6>
 800d7a2:	2a0b      	cmp	r2, #11
 800d7a4:	d917      	bls.n	800d7d6 <_malloc_r+0xca>
 800d7a6:	1961      	adds	r1, r4, r5
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	6025      	str	r5, [r4, #0]
 800d7ac:	bf18      	it	ne
 800d7ae:	6059      	strne	r1, [r3, #4]
 800d7b0:	6863      	ldr	r3, [r4, #4]
 800d7b2:	bf08      	it	eq
 800d7b4:	f8c8 1000 	streq.w	r1, [r8]
 800d7b8:	5162      	str	r2, [r4, r5]
 800d7ba:	604b      	str	r3, [r1, #4]
 800d7bc:	4638      	mov	r0, r7
 800d7be:	f104 060b 	add.w	r6, r4, #11
 800d7c2:	f000 f829 	bl	800d818 <__malloc_unlock>
 800d7c6:	f026 0607 	bic.w	r6, r6, #7
 800d7ca:	1d23      	adds	r3, r4, #4
 800d7cc:	1af2      	subs	r2, r6, r3
 800d7ce:	d0ae      	beq.n	800d72e <_malloc_r+0x22>
 800d7d0:	1b9b      	subs	r3, r3, r6
 800d7d2:	50a3      	str	r3, [r4, r2]
 800d7d4:	e7ab      	b.n	800d72e <_malloc_r+0x22>
 800d7d6:	42a3      	cmp	r3, r4
 800d7d8:	6862      	ldr	r2, [r4, #4]
 800d7da:	d1dd      	bne.n	800d798 <_malloc_r+0x8c>
 800d7dc:	f8c8 2000 	str.w	r2, [r8]
 800d7e0:	e7ec      	b.n	800d7bc <_malloc_r+0xb0>
 800d7e2:	4623      	mov	r3, r4
 800d7e4:	6864      	ldr	r4, [r4, #4]
 800d7e6:	e7ac      	b.n	800d742 <_malloc_r+0x36>
 800d7e8:	4634      	mov	r4, r6
 800d7ea:	6876      	ldr	r6, [r6, #4]
 800d7ec:	e7b4      	b.n	800d758 <_malloc_r+0x4c>
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	e7cc      	b.n	800d78c <_malloc_r+0x80>
 800d7f2:	230c      	movs	r3, #12
 800d7f4:	603b      	str	r3, [r7, #0]
 800d7f6:	4638      	mov	r0, r7
 800d7f8:	f000 f80e 	bl	800d818 <__malloc_unlock>
 800d7fc:	e797      	b.n	800d72e <_malloc_r+0x22>
 800d7fe:	6025      	str	r5, [r4, #0]
 800d800:	e7dc      	b.n	800d7bc <_malloc_r+0xb0>
 800d802:	605b      	str	r3, [r3, #4]
 800d804:	deff      	udf	#255	; 0xff
 800d806:	bf00      	nop
 800d808:	2000192c 	.word	0x2000192c

0800d80c <__malloc_lock>:
 800d80c:	4801      	ldr	r0, [pc, #4]	; (800d814 <__malloc_lock+0x8>)
 800d80e:	f000 b88f 	b.w	800d930 <__retarget_lock_acquire_recursive>
 800d812:	bf00      	nop
 800d814:	20001a70 	.word	0x20001a70

0800d818 <__malloc_unlock>:
 800d818:	4801      	ldr	r0, [pc, #4]	; (800d820 <__malloc_unlock+0x8>)
 800d81a:	f000 b88a 	b.w	800d932 <__retarget_lock_release_recursive>
 800d81e:	bf00      	nop
 800d820:	20001a70 	.word	0x20001a70

0800d824 <memset>:
 800d824:	4402      	add	r2, r0
 800d826:	4603      	mov	r3, r0
 800d828:	4293      	cmp	r3, r2
 800d82a:	d100      	bne.n	800d82e <memset+0xa>
 800d82c:	4770      	bx	lr
 800d82e:	f803 1b01 	strb.w	r1, [r3], #1
 800d832:	e7f9      	b.n	800d828 <memset+0x4>

0800d834 <_raise_r>:
 800d834:	291f      	cmp	r1, #31
 800d836:	b538      	push	{r3, r4, r5, lr}
 800d838:	4604      	mov	r4, r0
 800d83a:	460d      	mov	r5, r1
 800d83c:	d904      	bls.n	800d848 <_raise_r+0x14>
 800d83e:	2316      	movs	r3, #22
 800d840:	6003      	str	r3, [r0, #0]
 800d842:	f04f 30ff 	mov.w	r0, #4294967295
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d84a:	b112      	cbz	r2, 800d852 <_raise_r+0x1e>
 800d84c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d850:	b94b      	cbnz	r3, 800d866 <_raise_r+0x32>
 800d852:	4620      	mov	r0, r4
 800d854:	f000 f830 	bl	800d8b8 <_getpid_r>
 800d858:	462a      	mov	r2, r5
 800d85a:	4601      	mov	r1, r0
 800d85c:	4620      	mov	r0, r4
 800d85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d862:	f000 b817 	b.w	800d894 <_kill_r>
 800d866:	2b01      	cmp	r3, #1
 800d868:	d00a      	beq.n	800d880 <_raise_r+0x4c>
 800d86a:	1c59      	adds	r1, r3, #1
 800d86c:	d103      	bne.n	800d876 <_raise_r+0x42>
 800d86e:	2316      	movs	r3, #22
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	2001      	movs	r0, #1
 800d874:	e7e7      	b.n	800d846 <_raise_r+0x12>
 800d876:	2400      	movs	r4, #0
 800d878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d87c:	4628      	mov	r0, r5
 800d87e:	4798      	blx	r3
 800d880:	2000      	movs	r0, #0
 800d882:	e7e0      	b.n	800d846 <_raise_r+0x12>

0800d884 <raise>:
 800d884:	4b02      	ldr	r3, [pc, #8]	; (800d890 <raise+0xc>)
 800d886:	4601      	mov	r1, r0
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	f7ff bfd3 	b.w	800d834 <_raise_r>
 800d88e:	bf00      	nop
 800d890:	200001d0 	.word	0x200001d0

0800d894 <_kill_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	4d07      	ldr	r5, [pc, #28]	; (800d8b4 <_kill_r+0x20>)
 800d898:	2300      	movs	r3, #0
 800d89a:	4604      	mov	r4, r0
 800d89c:	4608      	mov	r0, r1
 800d89e:	4611      	mov	r1, r2
 800d8a0:	602b      	str	r3, [r5, #0]
 800d8a2:	f7f4 fa39 	bl	8001d18 <_kill>
 800d8a6:	1c43      	adds	r3, r0, #1
 800d8a8:	d102      	bne.n	800d8b0 <_kill_r+0x1c>
 800d8aa:	682b      	ldr	r3, [r5, #0]
 800d8ac:	b103      	cbz	r3, 800d8b0 <_kill_r+0x1c>
 800d8ae:	6023      	str	r3, [r4, #0]
 800d8b0:	bd38      	pop	{r3, r4, r5, pc}
 800d8b2:	bf00      	nop
 800d8b4:	20001a6c 	.word	0x20001a6c

0800d8b8 <_getpid_r>:
 800d8b8:	f7f4 ba26 	b.w	8001d08 <_getpid>

0800d8bc <_sbrk_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	4d06      	ldr	r5, [pc, #24]	; (800d8d8 <_sbrk_r+0x1c>)
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	4608      	mov	r0, r1
 800d8c6:	602b      	str	r3, [r5, #0]
 800d8c8:	f7f4 fa40 	bl	8001d4c <_sbrk>
 800d8cc:	1c43      	adds	r3, r0, #1
 800d8ce:	d102      	bne.n	800d8d6 <_sbrk_r+0x1a>
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	b103      	cbz	r3, 800d8d6 <_sbrk_r+0x1a>
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	bd38      	pop	{r3, r4, r5, pc}
 800d8d8:	20001a6c 	.word	0x20001a6c

0800d8dc <__errno>:
 800d8dc:	4b01      	ldr	r3, [pc, #4]	; (800d8e4 <__errno+0x8>)
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	200001d0 	.word	0x200001d0

0800d8e8 <__libc_init_array>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	4d0d      	ldr	r5, [pc, #52]	; (800d920 <__libc_init_array+0x38>)
 800d8ec:	4c0d      	ldr	r4, [pc, #52]	; (800d924 <__libc_init_array+0x3c>)
 800d8ee:	1b64      	subs	r4, r4, r5
 800d8f0:	10a4      	asrs	r4, r4, #2
 800d8f2:	2600      	movs	r6, #0
 800d8f4:	42a6      	cmp	r6, r4
 800d8f6:	d109      	bne.n	800d90c <__libc_init_array+0x24>
 800d8f8:	4d0b      	ldr	r5, [pc, #44]	; (800d928 <__libc_init_array+0x40>)
 800d8fa:	4c0c      	ldr	r4, [pc, #48]	; (800d92c <__libc_init_array+0x44>)
 800d8fc:	f000 f866 	bl	800d9cc <_init>
 800d900:	1b64      	subs	r4, r4, r5
 800d902:	10a4      	asrs	r4, r4, #2
 800d904:	2600      	movs	r6, #0
 800d906:	42a6      	cmp	r6, r4
 800d908:	d105      	bne.n	800d916 <__libc_init_array+0x2e>
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d910:	4798      	blx	r3
 800d912:	3601      	adds	r6, #1
 800d914:	e7ee      	b.n	800d8f4 <__libc_init_array+0xc>
 800d916:	f855 3b04 	ldr.w	r3, [r5], #4
 800d91a:	4798      	blx	r3
 800d91c:	3601      	adds	r6, #1
 800d91e:	e7f2      	b.n	800d906 <__libc_init_array+0x1e>
 800d920:	0800dab4 	.word	0x0800dab4
 800d924:	0800dab4 	.word	0x0800dab4
 800d928:	0800dab4 	.word	0x0800dab4
 800d92c:	0800dabc 	.word	0x0800dabc

0800d930 <__retarget_lock_acquire_recursive>:
 800d930:	4770      	bx	lr

0800d932 <__retarget_lock_release_recursive>:
 800d932:	4770      	bx	lr

0800d934 <_free_r>:
 800d934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d936:	2900      	cmp	r1, #0
 800d938:	d044      	beq.n	800d9c4 <_free_r+0x90>
 800d93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d93e:	9001      	str	r0, [sp, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	f1a1 0404 	sub.w	r4, r1, #4
 800d946:	bfb8      	it	lt
 800d948:	18e4      	addlt	r4, r4, r3
 800d94a:	f7ff ff5f 	bl	800d80c <__malloc_lock>
 800d94e:	4a1e      	ldr	r2, [pc, #120]	; (800d9c8 <_free_r+0x94>)
 800d950:	9801      	ldr	r0, [sp, #4]
 800d952:	6813      	ldr	r3, [r2, #0]
 800d954:	b933      	cbnz	r3, 800d964 <_free_r+0x30>
 800d956:	6063      	str	r3, [r4, #4]
 800d958:	6014      	str	r4, [r2, #0]
 800d95a:	b003      	add	sp, #12
 800d95c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d960:	f7ff bf5a 	b.w	800d818 <__malloc_unlock>
 800d964:	42a3      	cmp	r3, r4
 800d966:	d908      	bls.n	800d97a <_free_r+0x46>
 800d968:	6825      	ldr	r5, [r4, #0]
 800d96a:	1961      	adds	r1, r4, r5
 800d96c:	428b      	cmp	r3, r1
 800d96e:	bf01      	itttt	eq
 800d970:	6819      	ldreq	r1, [r3, #0]
 800d972:	685b      	ldreq	r3, [r3, #4]
 800d974:	1949      	addeq	r1, r1, r5
 800d976:	6021      	streq	r1, [r4, #0]
 800d978:	e7ed      	b.n	800d956 <_free_r+0x22>
 800d97a:	461a      	mov	r2, r3
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	b10b      	cbz	r3, 800d984 <_free_r+0x50>
 800d980:	42a3      	cmp	r3, r4
 800d982:	d9fa      	bls.n	800d97a <_free_r+0x46>
 800d984:	6811      	ldr	r1, [r2, #0]
 800d986:	1855      	adds	r5, r2, r1
 800d988:	42a5      	cmp	r5, r4
 800d98a:	d10b      	bne.n	800d9a4 <_free_r+0x70>
 800d98c:	6824      	ldr	r4, [r4, #0]
 800d98e:	4421      	add	r1, r4
 800d990:	1854      	adds	r4, r2, r1
 800d992:	42a3      	cmp	r3, r4
 800d994:	6011      	str	r1, [r2, #0]
 800d996:	d1e0      	bne.n	800d95a <_free_r+0x26>
 800d998:	681c      	ldr	r4, [r3, #0]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	6053      	str	r3, [r2, #4]
 800d99e:	440c      	add	r4, r1
 800d9a0:	6014      	str	r4, [r2, #0]
 800d9a2:	e7da      	b.n	800d95a <_free_r+0x26>
 800d9a4:	d902      	bls.n	800d9ac <_free_r+0x78>
 800d9a6:	230c      	movs	r3, #12
 800d9a8:	6003      	str	r3, [r0, #0]
 800d9aa:	e7d6      	b.n	800d95a <_free_r+0x26>
 800d9ac:	6825      	ldr	r5, [r4, #0]
 800d9ae:	1961      	adds	r1, r4, r5
 800d9b0:	428b      	cmp	r3, r1
 800d9b2:	bf04      	itt	eq
 800d9b4:	6819      	ldreq	r1, [r3, #0]
 800d9b6:	685b      	ldreq	r3, [r3, #4]
 800d9b8:	6063      	str	r3, [r4, #4]
 800d9ba:	bf04      	itt	eq
 800d9bc:	1949      	addeq	r1, r1, r5
 800d9be:	6021      	streq	r1, [r4, #0]
 800d9c0:	6054      	str	r4, [r2, #4]
 800d9c2:	e7ca      	b.n	800d95a <_free_r+0x26>
 800d9c4:	b003      	add	sp, #12
 800d9c6:	bd30      	pop	{r4, r5, pc}
 800d9c8:	2000192c 	.word	0x2000192c

0800d9cc <_init>:
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	bf00      	nop
 800d9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d2:	bc08      	pop	{r3}
 800d9d4:	469e      	mov	lr, r3
 800d9d6:	4770      	bx	lr

0800d9d8 <_fini>:
 800d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9da:	bf00      	nop
 800d9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9de:	bc08      	pop	{r3}
 800d9e0:	469e      	mov	lr, r3
 800d9e2:	4770      	bx	lr
