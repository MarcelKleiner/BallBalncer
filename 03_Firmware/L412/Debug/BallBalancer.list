
BallBalancer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f64  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006138  08006138  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006140  08006140  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800614c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  2000000c  08006158  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  08006158  00020794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b385  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cde  00000000  00000000  0003b404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001154  00000000  00000000  00040768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f385  00000000  00000000  000418bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5a1  00000000  00000000  00060c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc981  00000000  00000000  0007c1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ec4  00000000  00000000  00138b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080060d8 	.word	0x080060d8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080060d8 	.word	0x080060d8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN15ApplicationMainC1Ev>:
#include "ApplicationMain.h"
#include "main.h"



ApplicationMain::ApplicationMain()
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fae8 	bl	8000aa8 <_ZN11TaskhandlerC1Ev>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3308      	adds	r3, #8
 80004dc:	2208      	movs	r2, #8
 80004de:	4938      	ldr	r1, [pc, #224]	; (80005c0 <_ZN15ApplicationMainC1Ev+0xf8>)
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f96d 	bl	80007c0 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80004ec:	2308      	movs	r3, #8
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <_ZN15ApplicationMainC1Ev+0xfc>)
 80004f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004fa:	f000 f947 	bl	800078c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3358      	adds	r3, #88	; 0x58
 8000502:	2210      	movs	r2, #16
 8000504:	492e      	ldr	r1, [pc, #184]	; (80005c0 <_ZN15ApplicationMainC1Ev+0xf8>)
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f95a 	bl	80007c0 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000512:	2304      	movs	r3, #4
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <_ZN15ApplicationMainC1Ev+0x100>)
 8000518:	2208      	movs	r2, #8
 800051a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800051e:	f000 f935 	bl	800078c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	33a8      	adds	r3, #168	; 0xa8
 8000526:	2210      	movs	r2, #16
 8000528:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f947 	bl	80007c0 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8000538:	2300      	movs	r3, #0
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <_ZN15ApplicationMainC1Ev+0x100>)
 800053e:	2204      	movs	r2, #4
 8000540:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000544:	f000 f922 	bl	800078c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	33f8      	adds	r3, #248	; 0xf8
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f934 	bl	80007c0 <_ZN8IOHandleC1EP12GPIO_TypeDefm>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800055e:	2300      	movs	r3, #0
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <_ZN15ApplicationMainC1Ev+0x104>)
 8000564:	2240      	movs	r2, #64	; 0x40
 8000566:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800056a:	f000 f90f 	bl	800078c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0408 	add.w	r4, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3330      	adds	r3, #48	; 0x30
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4623      	mov	r3, r4
 800058e:	f000 f893 	bl	80006b8 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	33d0      	adds	r3, #208	; 0xd0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	4623      	mov	r3, r4
 80005b2:	f000 f881 	bl	80006b8 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_>
{
	// TODO Auto-generated constructor stub
}
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}
 80005c0:	48000400 	.word	0x48000400
 80005c4:	20000294 	.word	0x20000294
 80005c8:	20000378 	.word	0x20000378
 80005cc:	200003c4 	.word	0x200003c4

080005d0 <_ZN15ApplicationMain7StartUpEv>:

void ApplicationMain::StartUp()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005de:	481d      	ldr	r0, [pc, #116]	; (8000654 <_ZN15ApplicationMain7StartUpEv+0x84>)
 80005e0:	f002 fce8 	bl	8002fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	481a      	ldr	r0, [pc, #104]	; (8000654 <_ZN15ApplicationMain7StartUpEv+0x84>)
 80005ec:	f002 fce2 	bl	8002fb4 <HAL_GPIO_WritePin>


	HAL_TIM_Base_MspInit(&htim1);
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <_ZN15ApplicationMain7StartUpEv+0x88>)
 80005f2:	f001 f843 	bl	800167c <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim2);
 80005f6:	4819      	ldr	r0, [pc, #100]	; (800065c <_ZN15ApplicationMain7StartUpEv+0x8c>)
 80005f8:	f001 f840 	bl	800167c <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim6);	//task handler timer
 80005fc:	4818      	ldr	r0, [pc, #96]	; (8000660 <_ZN15ApplicationMain7StartUpEv+0x90>)
 80005fe:	f001 f83d 	bl	800167c <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim15);
 8000602:	4818      	ldr	r0, [pc, #96]	; (8000664 <_ZN15ApplicationMain7StartUpEv+0x94>)
 8000604:	f001 f83a 	bl	800167c <HAL_TIM_Base_MspInit>
	HAL_TIM_Base_MspInit(&htim16);
 8000608:	4817      	ldr	r0, [pc, #92]	; (8000668 <_ZN15ApplicationMain7StartUpEv+0x98>)
 800060a:	f001 f837 	bl	800167c <HAL_TIM_Base_MspInit>


	HAL_TIM_Base_Start_IT(&htim6);
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <_ZN15ApplicationMain7StartUpEv+0x90>)
 8000610:	f003 ff58 	bl	80044c4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <_ZN15ApplicationMain7StartUpEv+0x88>)
 8000616:	f003 ff09 	bl	800442c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <_ZN15ApplicationMain7StartUpEv+0x8c>)
 800061c:	f003 ff06 	bl	800442c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim15);
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <_ZN15ApplicationMain7StartUpEv+0x94>)
 8000622:	f003 ff03 	bl	800442c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim16);
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <_ZN15ApplicationMain7StartUpEv+0x98>)
 8000628:	f003 ff00 	bl	800442c <HAL_TIM_Base_Start>


	driveCoontrolXAxis.Init();
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f85e 	bl	80006f4 <_ZN12DriveControl4InitEv>
	driveCoontrolYAxis.Init();
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f858 	bl	80006f4 <_ZN12DriveControl4InitEv>
	//ToDo do some initialization here

	Main();
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f811 	bl	800066c <_ZN15ApplicationMain4MainEv>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	48000800 	.word	0x48000800
 8000658:	20000294 	.word	0x20000294
 800065c:	200002e0 	.word	0x200002e0
 8000660:	2000032c 	.word	0x2000032c
 8000664:	20000378 	.word	0x20000378
 8000668:	200003c4 	.word	0x200003c4

0800066c <_ZN15ApplicationMain4MainEv>:

void ApplicationMain::Main()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	while (true) 
	{
		if(taskhandler.IsLedTask())
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 faab 	bl	8000bd2 <_ZN11Taskhandler9IsLedTaskEv>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00a      	beq.n	8000698 <_ZN15ApplicationMain4MainEv+0x2c>
		{
			HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <_ZN15ApplicationMain4MainEv+0x48>)
 8000688:	f002 fcac 	bl	8002fe4 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4808      	ldr	r0, [pc, #32]	; (80006b4 <_ZN15ApplicationMain4MainEv+0x48>)
 8000694:	f002 fc8e 	bl	8002fb4 <HAL_GPIO_WritePin>
		}
		driveCoontrolXAxis.DriveRight(30000);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800069e:	f247 5130 	movw	r1, #30000	; 0x7530
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f846 	bl	8000734 <_ZN12DriveControl10DriveRightEt>

		if(taskhandler.IsDriveTask())
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa80 	bl	8000bb0 <_ZN11Taskhandler11IsDriveTaskEv>
		if(taskhandler.IsLedTask())
 80006b0:	e7e0      	b.n	8000674 <_ZN15ApplicationMain4MainEv+0x8>
 80006b2:	bf00      	nop
 80006b4:	48000800 	.word	0x48000800

080006b8 <_ZN12DriveControlC1EP8IOHandleS1_S1_S1_>:
#include "DriveControl.h"


DriveControl::DriveControl(IOHandle* enLeft, IOHandle* inLeft, IOHandle* enRight, IOHandle* inRight)
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
{
	_enLeft = enLeft;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	64da      	str	r2, [r3, #76]	; 0x4c
	_inLeft = inLeft;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	651a      	str	r2, [r3, #80]	; 0x50
	_enRight = enRight;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	655a      	str	r2, [r3, #84]	; 0x54
	_inRight = inRight;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	659a      	str	r2, [r3, #88]	; 0x58
	_rotationDirection = RotationDirection::Undefined;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <_ZN12DriveControl4InitEv>:

void DriveControl::Init()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	_enLeft->SetFunction(IOFunction::Output);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f8f3 	bl	80008ee <_ZN8IOHandle11SetFunctionE10IOFunction>
	_enRight->SetFunction(IOFunction::Output);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f8ed 	bl	80008ee <_ZN8IOHandle11SetFunctionE10IOFunction>
	_enLeft->Write(true);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f869 	bl	80007f2 <_ZN8IOHandle5WriteEb>
	_enRight->Write(true);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f863 	bl	80007f2 <_ZN8IOHandle5WriteEb>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZN12DriveControl10DriveRightEt>:
	}
	_inLeft->SetPWM(speed);
}

void DriveControl::DriveRight(uint16_t speed)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
	if (_rotationDirection != RotationDirection::Right)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000746:	2b02      	cmp	r3, #2
 8000748:	d015      	beq.n	8000776 <_ZN12DriveControl10DriveRightEt+0x42>
	{
		_inLeft->SetFunction(IOFunction::Output);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800074e:	2102      	movs	r1, #2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f8cc 	bl	80008ee <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inRight->SetFunction(IOFunction::PWM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f8c6 	bl	80008ee <_ZN8IOHandle11SetFunctionE10IOFunction>
		_inLeft->Write(false);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f842 	bl	80007f2 <_ZN8IOHandle5WriteEb>
		_rotationDirection = RotationDirection::Right;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2202      	movs	r2, #2
 8000772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	_inRight->SetPWM(speed);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	887a      	ldrh	r2, [r7, #2]
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f856 	bl	8000830 <_ZN8IOHandle6SetPWMEm>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZN8IOHandleC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefm>:
#include "IOHandle.h"


IOHandle::IOHandle(GPIO_TypeDef* port, uint32_t pin, TIM_HandleTypeDef* timer, uint32_t channel)
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	603b      	str	r3, [r7, #0]
{
     _port = port;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	605a      	str	r2, [r3, #4]
     _pin = pin;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	609a      	str	r2, [r3, #8]
     _timer = timer;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	60da      	str	r2, [r3, #12]
     _channel = channel;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	611a      	str	r2, [r3, #16]
}
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_ZN8IOHandleC1EP12GPIO_TypeDefm>:

IOHandle::IOHandle(GPIO_TypeDef* port, uint32_t pin)
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
{
     _port = port;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	605a      	str	r2, [r3, #4]
     _pin = pin;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	609a      	str	r2, [r3, #8]
     _timer = nullptr;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
     _channel = 0;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
}
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <_ZN8IOHandle5WriteEb>:

void IOHandle::Write(bool status)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	460b      	mov	r3, r1
 80007fc:	70fb      	strb	r3, [r7, #3]
     if (_IoFunction != IOFunction::Output)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d110      	bne.n	8000828 <_ZN8IOHandle5WriteEb+0x36>
     {
          return;
     }

     GPIO_PinState state = (status == true ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <_ZN8IOHandle5WriteEb+0x1e>
 800080c:	2301      	movs	r3, #1
 800080e:	e000      	b.n	8000812 <_ZN8IOHandle5WriteEb+0x20>
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]
     HAL_GPIO_WritePin(_port, _pin, state);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6858      	ldr	r0, [r3, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	b29b      	uxth	r3, r3
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	4619      	mov	r1, r3
 8000822:	f002 fbc7 	bl	8002fb4 <HAL_GPIO_WritePin>
 8000826:	e000      	b.n	800082a <_ZN8IOHandle5WriteEb+0x38>
          return;
 8000828:	bf00      	nop
}
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZN8IOHandle6SetPWMEm>:
          HAL_TIM_PWM_Stop(_timer, _channel);
     }
}

void IOHandle::SetPWM(uint32_t pwm)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
     if (!IsPWMFunction())
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 f842 	bl	80008c4 <_ZN8IOHandle13IsPWMFunctionEv>
 8000840:	4603      	mov	r3, r0
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d137      	bne.n	80008bc <_ZN8IOHandle6SetPWMEm+0x8c>
     {
          return;
     }

     __HAL_TIM_SET_COMPARE(_timer, _channel, pwm);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d105      	bne.n	8000860 <_ZN8IOHandle6SetPWMEm+0x30>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
 800085e:	e02e      	b.n	80008be <_ZN8IOHandle6SetPWMEm+0x8e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b04      	cmp	r3, #4
 8000866:	d105      	bne.n	8000874 <_ZN8IOHandle6SetPWMEm+0x44>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	639a      	str	r2, [r3, #56]	; 0x38
 8000872:	e024      	b.n	80008be <_ZN8IOHandle6SetPWMEm+0x8e>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	2b08      	cmp	r3, #8
 800087a:	d105      	bne.n	8000888 <_ZN8IOHandle6SetPWMEm+0x58>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
 8000886:	e01a      	b.n	80008be <_ZN8IOHandle6SetPWMEm+0x8e>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	2b0c      	cmp	r3, #12
 800088e:	d105      	bne.n	800089c <_ZN8IOHandle6SetPWMEm+0x6c>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
 800089a:	e010      	b.n	80008be <_ZN8IOHandle6SetPWMEm+0x8e>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b10      	cmp	r3, #16
 80008a2:	d105      	bne.n	80008b0 <_ZN8IOHandle6SetPWMEm+0x80>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	659a      	str	r2, [r3, #88]	; 0x58
 80008ae:	e006      	b.n	80008be <_ZN8IOHandle6SetPWMEm+0x8e>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80008ba:	e000      	b.n	80008be <_ZN8IOHandle6SetPWMEm+0x8e>
          return;
 80008bc:	bf00      	nop

}
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN8IOHandle13IsPWMFunctionEv>:

bool IOHandle::IsPWMFunction() {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
     return (_IoFunction == IOFunction::PWM && _timer != nullptr);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d105      	bne.n	80008e0 <_ZN8IOHandle13IsPWMFunctionEv+0x1c>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <_ZN8IOHandle13IsPWMFunctionEv+0x1c>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <_ZN8IOHandle13IsPWMFunctionEv+0x1e>
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZN8IOHandle11SetFunctionE10IOFunction>:

void IOHandle::SetFunction(IOFunction ioFunction)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
     _IoFunction = ioFunction;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	78fa      	ldrb	r2, [r7, #3]
 80008fe:	701a      	strb	r2, [r3, #0]

     switch (ioFunction)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d011      	beq.n	800092a <_ZN8IOHandle11SetFunctionE10IOFunction+0x3c>
 8000906:	2b03      	cmp	r3, #3
 8000908:	dc1d      	bgt.n	8000946 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
 800090a:	2b01      	cmp	r3, #1
 800090c:	dc02      	bgt.n	8000914 <_ZN8IOHandle11SetFunctionE10IOFunction+0x26>
 800090e:	2b00      	cmp	r3, #0
 8000910:	da03      	bge.n	800091a <_ZN8IOHandle11SetFunctionE10IOFunction+0x2c>
                    InitAsDigitalIn();
               }

               break;
          default:
               break;
 8000912:	e018      	b.n	8000946 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
     switch (ioFunction)
 8000914:	2b02      	cmp	r3, #2
 8000916:	d004      	beq.n	8000922 <_ZN8IOHandle11SetFunctionE10IOFunction+0x34>
               break;
 8000918:	e015      	b.n	8000946 <_ZN8IOHandle11SetFunctionE10IOFunction+0x58>
               InitAsDigitalIn();
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f818 	bl	8000950 <_ZN8IOHandle15InitAsDigitalInEv>
               break;
 8000920:	e012      	b.n	8000948 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               InitAsDigitalOut();
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f831 	bl	800098a <_ZN8IOHandle16InitAsDigitalOutEv>
               break;
 8000928:	e00e      	b.n	8000948 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               if (IsPWMFunction()) 
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffca 	bl	80008c4 <_ZN8IOHandle13IsPWMFunctionEv>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <_ZN8IOHandle11SetFunctionE10IOFunction+0x50>
                    InitAsPWMOut();
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f844 	bl	80009c4 <_ZN8IOHandle12InitAsPWMOutEv>
               break;
 800093c:	e004      	b.n	8000948 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
                    InitAsDigitalIn();
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f806 	bl	8000950 <_ZN8IOHandle15InitAsDigitalInEv>
               break;
 8000944:	e000      	b.n	8000948 <_ZN8IOHandle11SetFunctionE10IOFunction+0x5a>
               break;
 8000946:	bf00      	nop
     }
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_ZN8IOHandle15InitAsDigitalInEv>:
{
     return _IoFunction;
}

void IOHandle::InitAsDigitalIn() 
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
     GPIO_InitStruct.Pin = _pin;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Digital output mode
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3314      	adds	r3, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f002 f9a7 	bl	8002cd0 <HAL_GPIO_Init>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_ZN8IOHandle16InitAsDigitalOutEv>:

void IOHandle::InitAsDigitalOut() 
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
     GPIO_InitStruct.Pin = _pin;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Digital output mode
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3314      	adds	r3, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4610      	mov	r0, r2
 80009b8:	f002 f98a 	bl	8002cd0 <HAL_GPIO_Init>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZN8IOHandle12InitAsPWMOutEv>:

void IOHandle::InitAsPWMOut() 
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]
     HAL_TIM_PWM_Stop(_timer, _channel);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4610      	mov	r0, r2
 80009ec:	f003 fef4 	bl	80047d8 <HAL_TIM_PWM_Stop>

     sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f0:	2360      	movs	r3, #96	; 0x60
 80009f2:	60fb      	str	r3, [r7, #12]
     sConfigOC.Pulse = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
     sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
     sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
     sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
     if (HAL_TIM_PWM_ConfigChannel(_timer, &sConfigOC, _channel) != HAL_OK)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	68d8      	ldr	r0, [r3, #12]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691a      	ldr	r2, [r3, #16]
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f004 f92b 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
     {

     }

     GPIO_InitStruct.Pin = _pin;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	615a      	str	r2, [r3, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	619a      	str	r2, [r3, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]

     if(_timer->Instance == TIM16)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <_ZN8IOHandle12InitAsPWMOutEv+0xd8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d102      	bne.n	8000a4e <_ZN8IOHandle12InitAsPWMOutEv+0x8a>
         GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	220e      	movs	r2, #14
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24

     if(_timer->Instance == TIM15)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_ZN8IOHandle12InitAsPWMOutEv+0xdc>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d102      	bne.n	8000a60 <_ZN8IOHandle12InitAsPWMOutEv+0x9c>
         GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	220e      	movs	r2, #14
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24

     if(_timer->Instance == TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <_ZN8IOHandle12InitAsPWMOutEv+0xe0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d102      	bne.n	8000a72 <_ZN8IOHandle12InitAsPWMOutEv+0xae>
         GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24



     HAL_GPIO_Init(_port, &GPIO_InitStruct);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3314      	adds	r3, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	f002 f927 	bl	8002cd0 <HAL_GPIO_Init>

     HAL_TIM_PWM_Start(_timer, _channel);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	f003 fdc5 	bl	800461c <HAL_TIM_PWM_Start>
}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40014400 	.word	0x40014400
 8000aa0:	40014000 	.word	0x40014000
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <_ZN11TaskhandlerC1Ev>:
#include "../AppSettings.h"
#include "Taskhandler.h"

Taskhandler::Taskhandler() {}
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	711a      	strb	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	715a      	strb	r2, [r3, #5]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	719a      	strb	r2, [r3, #6]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	71da      	strb	r2, [r3, #7]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_ZN11Taskhandler17UpdateTaskhandlerEv>:

void Taskhandler::UpdateTaskhandler()
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
     if(_taskCounter % ErrorUpdateTime == 0)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <_ZN11Taskhandler17UpdateTaskhandlerEv+0xc0>)
 8000aea:	fb83 1302 	smull	r1, r3, r3, r2
 8000aee:	1199      	asrs	r1, r3, #6
 8000af0:	17d3      	asrs	r3, r2, #31
 8000af2:	1acb      	subs	r3, r1, r3
 8000af4:	f240 11f3 	movw	r1, #499	; 0x1f3
 8000af8:	fb01 f303 	mul.w	r3, r1, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x2c>
     {
          _isErrorTaskUpdateRequest = true;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	711a      	strb	r2, [r3, #4]
     }

     if(_taskCounter % DriveUpdateTime == 0)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xc4>)
 8000b0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b12:	105a      	asrs	r2, r3, #1
 8000b14:	17cb      	asrs	r3, r1, #31
 8000b16:	1ad2      	subs	r2, r2, r3
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	1aca      	subs	r2, r1, r3
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	d102      	bne.n	8000b2e <_ZN11Taskhandler17UpdateTaskhandlerEv+0x52>
     {
          _isDriveTaskUpdateRequest = true;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	719a      	strb	r2, [r3, #6]
     }

     if(_taskCounter % EncoderUpdateTime == 0)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xc8>)
 8000b34:	fb83 2301 	smull	r2, r3, r3, r1
 8000b38:	105a      	asrs	r2, r3, #1
 8000b3a:	17cb      	asrs	r3, r1, #31
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	1aca      	subs	r2, r1, r3
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d102      	bne.n	8000b50 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x74>
     {
          _isEncoderTaskUpdateRequest = true;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	715a      	strb	r2, [r3, #5]
     }

     if(_taskCounter % LedUpdateTime == 0)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <_ZN11Taskhandler17UpdateTaskhandlerEv+0xcc>)
 8000b56:	fb83 1302 	smull	r1, r3, r3, r2
 8000b5a:	1199      	asrs	r1, r3, #6
 8000b5c:	17d3      	asrs	r3, r2, #31
 8000b5e:	1acb      	subs	r3, r1, r3
 8000b60:	f240 1191 	movw	r1, #401	; 0x191
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <_ZN11Taskhandler17UpdateTaskhandlerEv+0x98>
     {
          _isLedTaskUpdateRequest = true;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	71da      	strb	r2, [r3, #7]
     }

     _taskCounter++;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
	 if(_taskCounter == 11005445+1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <_ZN11Taskhandler17UpdateTaskhandlerEv+0xd0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d102      	bne.n	8000b8e <_ZN11Taskhandler17UpdateTaskhandlerEv+0xb2>
	 {
		 _taskCounter = 0;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
	 }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20d56b39 	.word	0x20d56b39
 8000ba0:	2e8ba2e9 	.word	0x2e8ba2e9
 8000ba4:	66666667 	.word	0x66666667
 8000ba8:	28db9c69 	.word	0x28db9c69
 8000bac:	00a7ee06 	.word	0x00a7ee06

08000bb0 <_ZN11Taskhandler11IsDriveTaskEv>:
     _isErrorTaskUpdateRequest = false;
     return isTaskUpdateRequest;
}

bool Taskhandler::IsDriveTask()
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
     bool isTaskUpdateRequest = _isDriveTaskUpdateRequest;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	799b      	ldrb	r3, [r3, #6]
 8000bbc:	73fb      	strb	r3, [r7, #15]
     _isDriveTaskUpdateRequest = false;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	719a      	strb	r2, [r3, #6]
     return isTaskUpdateRequest;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_ZN11Taskhandler9IsLedTaskEv>:
     _isEncoderTaskUpdateRequest = false;
     return isTaskUpdateRequest;
}

bool Taskhandler::IsLedTask()
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
     bool isTaskUpdateRequest = _isLedTaskUpdateRequest;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	79db      	ldrb	r3, [r3, #7]
 8000bde:	73fb      	strb	r3, [r7, #15]
     _isLedTaskUpdateRequest = false;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]
     return isTaskUpdateRequest;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c18:	4a2f      	ldr	r2, [pc, #188]	; (8000cd8 <MX_ADC1_Init+0xe4>)
 8000c1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c78:	f001 f904 	bl	8001e84 <HAL_ADC_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c82:	f000 f98f 	bl	8000fa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000c92:	f001 fe67 	bl	8002964 <HAL_ADCEx_MultiModeConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c9c:	f000 f982 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_ADC1_Init+0xe8>)
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cac:	237f      	movs	r3, #127	; 0x7f
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_ADC1_Init+0xe0>)
 8000cbe:	f001 fa31 	bl	8002124 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000cc8:	f000 f96c 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000028 	.word	0x20000028
 8000cd8:	50040000 	.word	0x50040000
 8000cdc:	3ef08000 	.word	0x3ef08000

08000ce0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d123      	bne.n	8000d4a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_ADC_MspInit+0x78>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_ADC_MspInit+0x78>)
 8000d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_ADC_MspInit+0x78>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_ADC_MspInit+0x78>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_ADC_MspInit+0x78>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_ADC_MspInit+0x78>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = VUSB_Pin;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d36:	230b      	movs	r3, #11
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VUSB_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_ADC_MspInit+0x7c>)
 8000d46:	f001 ffc3 	bl	8002cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	50040000 	.word	0x50040000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_GPIO_Init+0x114>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDR_Pin|LEDG_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000dc4:	482c      	ldr	r0, [pc, #176]	; (8000e78 <MX_GPIO_Init+0x118>)
 8000dc6:	f002 f8f5 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_CH2R_Pin|EN_CH2L_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2190      	movs	r1, #144	; 0x90
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f002 f8ef 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_CH1R_Pin|EN_CH1L_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2118      	movs	r1, #24
 8000dda:	4828      	ldr	r0, [pc, #160]	; (8000e7c <MX_GPIO_Init+0x11c>)
 8000ddc:	f002 f8ea 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin;
 8000de0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	481f      	ldr	r0, [pc, #124]	; (8000e78 <MX_GPIO_Init+0x118>)
 8000dfa:	f001 ff69 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN_CH2R_Pin|EN_CH2L_Pin;
 8000dfe:	2390      	movs	r3, #144	; 0x90
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 ff5a 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REF_M2_Pin;
 8000e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REF_M2_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f001 ff4c 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EN_CH1R_Pin|EN_CH1L_Pin;
 8000e38:	2318      	movs	r3, #24
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <MX_GPIO_Init+0x11c>)
 8000e50:	f001 ff3e 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REF_M1_Pin;
 8000e54:	2320      	movs	r3, #32
 8000e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REF_M1_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_GPIO_Init+0x11c>)
 8000e68:	f001 ff32 	bl	8002cd0 <HAL_GPIO_Init>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000400 	.word	0x48000400

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fde9 	bl	8001a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f818 	bl	8000ebc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f7ff ff68 	bl	8000d60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e90:	f000 f916 	bl	80010c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e94:	f000 f9c8 	bl	8001228 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000e98:	f000 fa50 	bl	800133c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000e9c:	f000 fade 	bl	800145c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000ea0:	f000 fca8 	bl	80017f4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000ea4:	f000 fd2e 	bl	8001904 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000ea8:	f7ff fea4 	bl	8000bf4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000eac:	f000 fa10 	bl	80012d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  applicationMain.StartUp();
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <main+0x38>)
 8000eb2:	f7ff fb8d 	bl	80005d0 <_ZN15ApplicationMain7StartUpEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <main+0x36>
 8000eb8:	2000008c 	.word	0x2000008c

08000ebc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b096      	sub	sp, #88	; 0x58
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2244      	movs	r2, #68	; 0x44
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f005 f8d8 	bl	8006080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ede:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ee2:	f002 f9e9 	bl	80032b8 <HAL_PWREx_ControlVoltageScaling>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000ef6:	f000 f855 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000efa:	2322      	movs	r3, #34	; 0x22
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f10:	2302      	movs	r3, #2
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000f18:	2309      	movs	r3, #9
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fa1b 	bl	8003364 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2301      	movne	r3, #1
 8000f36:	2300      	moveq	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000f3e:	f000 f831 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2303      	movs	r3, #3
 8000f48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fe64 	bl	8003c28 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000f70:	f000 f818 	bl	8000fa4 <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3758      	adds	r7, #88	; 0x58
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d102      	bne.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0x18>
		applicationMain.taskhandler.UpdateTaskhandler();
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f90:	f7ff fda4 	bl	8000adc <_ZN11Taskhandler17UpdateTaskhandlerEv>
	}

}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40001000 	.word	0x40001000
 8000fa0:	2000008c 	.word	0x2000008c

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d102      	bne.n	8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x20>
  ApplicationMain applicationMain = ApplicationMain();
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000fcc:	f7ff fa7c 	bl	80004c8 <_ZN15ApplicationMainC1Ev>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000008c 	.word	0x2000008c

08000fdc <_GLOBAL__sub_I_applicationMain>:
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff ffe3 	bl	8000fb0 <_Z41__static_initialization_and_destruction_0ii>
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x44>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_MspInit+0x44>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x44>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x44>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x44>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x44>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 fd40 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM6_IRQHandler+0x10>)
 800108e:	f003 fcd1 	bl	8004a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000032c 	.word	0x2000032c

0800109c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09e      	sub	sp, #120	; 0x78
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 ffd6 	bl	8006080 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	222c      	movs	r2, #44	; 0x2c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 ffc0 	bl	8006080 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <MX_TIM1_Init+0x160>)
 8001102:	4a48      	ldr	r2, [pc, #288]	; (8001224 <MX_TIM1_Init+0x164>)
 8001104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001106:	4b46      	ldr	r3, [pc, #280]	; (8001220 <MX_TIM1_Init+0x160>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_TIM1_Init+0x160>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001112:	4b43      	ldr	r3, [pc, #268]	; (8001220 <MX_TIM1_Init+0x160>)
 8001114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001118:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <MX_TIM1_Init+0x160>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <MX_TIM1_Init+0x160>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <MX_TIM1_Init+0x160>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800112c:	483c      	ldr	r0, [pc, #240]	; (8001220 <MX_TIM1_Init+0x160>)
 800112e:	f003 fa1d 	bl	800456c <HAL_TIM_PWM_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001138:	f7ff ff34 	bl	8000fa4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800113c:	2301      	movs	r3, #1
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001140:	2300      	movs	r3, #0
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001144:	2301      	movs	r3, #1
 8001146:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC1Filter = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	667b      	str	r3, [r7, #100]	; 0x64
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	66bb      	str	r3, [r7, #104]	; 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	66fb      	str	r3, [r7, #108]	; 0x6c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	673b      	str	r3, [r7, #112]	; 0x70
  sConfig.IC2Filter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	482e      	ldr	r0, [pc, #184]	; (8001220 <MX_TIM1_Init+0x160>)
 8001168:	f003 fbbe 	bl	80048e8 <HAL_TIM_Encoder_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001172:	f7ff ff17 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001182:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001186:	4619      	mov	r1, r3
 8001188:	4825      	ldr	r0, [pc, #148]	; (8001220 <MX_TIM1_Init+0x160>)
 800118a:	f004 f9b7 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001194:	f7ff ff06 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b8:	2208      	movs	r2, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM1_Init+0x160>)
 80011be:	f003 fd59 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80011c8:	f7ff feec 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM1_Init+0x160>)
 8001202:	f004 f9e1 	bl	80055c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800120c:	f7ff feca 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM1_Init+0x160>)
 8001212:	f000 fa6d 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 8001216:	bf00      	nop
 8001218:	3778      	adds	r7, #120	; 0x78
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000294 	.word	0x20000294
 8001224:	40012c00 	.word	0x40012c00

08001228 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2224      	movs	r2, #36	; 0x24
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f004 ff22 	bl	8006080 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_TIM2_Init+0xa4>)
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_TIM2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800126e:	2301      	movs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001286:	2301      	movs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_TIM2_Init+0xa4>)
 800129a:	f003 fb25 	bl	80048e8 <HAL_TIM_Encoder_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012a4:	f7ff fe7e 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_TIM2_Init+0xa4>)
 80012b6:	f004 f921 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80012c0:	f7ff fe70 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3730      	adds	r7, #48	; 0x30
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002e0 	.word	0x200002e0

080012d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_TIM6_Init+0x64>)
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <MX_TIM6_Init+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_TIM6_Init+0x64>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_TIM6_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 35999;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_TIM6_Init+0x64>)
 80012f4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80012f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_TIM6_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_TIM6_Init+0x64>)
 8001302:	f003 f83b 	bl	800437c <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800130c:	f7ff fe4a 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM6_Init+0x64>)
 800131e:	f004 f8ed 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001328:	f7ff fe3c 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000032c 	.word	0x2000032c
 8001338:	40001000 	.word	0x40001000

0800133c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b096      	sub	sp, #88	; 0x58
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	222c      	movs	r2, #44	; 0x2c
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f004 fe89 	bl	8006080 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <MX_TIM15_Init+0x118>)
 8001370:	4a39      	ldr	r2, [pc, #228]	; (8001458 <MX_TIM15_Init+0x11c>)
 8001372:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001374:	4b37      	ldr	r3, [pc, #220]	; (8001454 <MX_TIM15_Init+0x118>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <MX_TIM15_Init+0x118>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001380:	4b34      	ldr	r3, [pc, #208]	; (8001454 <MX_TIM15_Init+0x118>)
 8001382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001386:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <MX_TIM15_Init+0x118>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <MX_TIM15_Init+0x118>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <MX_TIM15_Init+0x118>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800139a:	482e      	ldr	r0, [pc, #184]	; (8001454 <MX_TIM15_Init+0x118>)
 800139c:	f003 f8e6 	bl	800456c <HAL_TIM_PWM_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f7ff fdfd 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b6:	4619      	mov	r1, r3
 80013b8:	4826      	ldr	r0, [pc, #152]	; (8001454 <MX_TIM15_Init+0x118>)
 80013ba:	f004 f89f 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f7ff fdee 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c8:	2360      	movs	r3, #96	; 0x60
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <MX_TIM15_Init+0x118>)
 80013ee:	f003 fc41 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80013f8:	f7ff fdd4 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001400:	2204      	movs	r2, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_TIM15_Init+0x118>)
 8001406:	f003 fc35 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001410:	f7ff fdc8 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM15_Init+0x118>)
 8001438:	f004 f8c6 	bl	80055c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM15_Init+0x10a>
  {
    Error_Handler();
 8001442:	f7ff fdaf 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM15_Init+0x118>)
 8001448:	f000 f952 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3758      	adds	r7, #88	; 0x58
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000378 	.word	0x20000378
 8001458:	40014000 	.word	0x40014000

0800145c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b092      	sub	sp, #72	; 0x48
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	222c      	movs	r2, #44	; 0x2c
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fdff 	bl	8006080 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <MX_TIM16_Init+0xe8>)
 8001484:	4a30      	ldr	r2, [pc, #192]	; (8001548 <MX_TIM16_Init+0xec>)
 8001486:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <MX_TIM16_Init+0xe8>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <MX_TIM16_Init+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <MX_TIM16_Init+0xe8>)
 8001496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <MX_TIM16_Init+0xe8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <MX_TIM16_Init+0xe8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <MX_TIM16_Init+0xe8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014ae:	4825      	ldr	r0, [pc, #148]	; (8001544 <MX_TIM16_Init+0xe8>)
 80014b0:	f002 ff64 	bl	800437c <HAL_TIM_Base_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80014ba:	f7ff fd73 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <MX_TIM16_Init+0xe8>)
 80014c0:	f003 f854 	bl	800456c <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80014ca:	f7ff fd6b 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ce:	2360      	movs	r3, #96	; 0x60
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <MX_TIM16_Init+0xe8>)
 80014f4:	f003 fbbe 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80014fe:	f7ff fd51 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM16_Init+0xe8>)
 8001526:	f004 f84f 	bl	80055c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001530:	f7ff fd38 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM16_Init+0xe8>)
 8001536:	f000 f8db 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3748      	adds	r7, #72	; 0x48
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200003c4 	.word	0x200003c4
 8001548:	40014400 	.word	0x40014400

0800154c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <HAL_TIM_PWM_MspInit+0xa4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12a      	bne.n	80015c4 <HAL_TIM_PWM_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8001574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001578:	6613      	str	r3, [r2, #96]	; 0x60
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_B_Pin|ENCODER1_A_Pin;
 800159e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f001 fb87 	bl	8002cd0 <HAL_GPIO_Init>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80015c2:	e010      	b.n	80015e6 <HAL_TIM_PWM_MspInit+0x9a>
  else if(tim_pwmHandle->Instance==TIM15)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_TIM_PWM_MspInit+0xac>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10b      	bne.n	80015e6 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6613      	str	r3, [r2, #96]	; 0x60
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40014000 	.word	0x40014000

080015fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161c:	d128      	bne.n	8001670 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6593      	str	r3, [r2, #88]	; 0x58
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_TIM_Encoder_MspInit+0x7c>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_TIM_Encoder_MspInit+0x7c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 800164e:	2303      	movs	r3, #3
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165e:	2301      	movs	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166c:	f001 fb30 	bl	8002cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <HAL_TIM_Base_MspInit+0x68>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d114      	bne.n	80016b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_TIM_Base_MspInit+0x6c>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_TIM_Base_MspInit+0x6c>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6593      	str	r3, [r2, #88]	; 0x58
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_TIM_Base_MspInit+0x6c>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2036      	movs	r0, #54	; 0x36
 80016ac:	f001 fad9 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80016b0:	2036      	movs	r0, #54	; 0x36
 80016b2:	f001 faf2 	bl	8002c9a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80016b6:	e010      	b.n	80016da <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_TIM_Base_MspInit+0x70>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10b      	bne.n	80016da <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_TIM_Base_MspInit+0x6c>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_TIM_Base_MspInit+0x6c>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_TIM_Base_MspInit+0x6c>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40001000 	.word	0x40001000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40014400 	.word	0x40014400

080016f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <HAL_TIM_MspPostInit+0xf4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d11e      	bne.n	8001750 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = IN_CH1R_Pin;
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800173c:	2301      	movs	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN_CH1R_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f001 fac1 	bl	8002cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800174e:	e044      	b.n	80017da <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <HAL_TIM_MspPostInit+0xfc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d11d      	bne.n	8001796 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN_CH2R_Pin|IN_CH1L_Pin;
 8001772:	230c      	movs	r3, #12
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001782:	230e      	movs	r3, #14
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f001 fa9e 	bl	8002cd0 <HAL_GPIO_Init>
}
 8001794:	e021      	b.n	80017da <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM16)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <HAL_TIM_MspPostInit+0x100>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d11c      	bne.n	80017da <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_TIM_MspPostInit+0xf8>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN_CH2L_Pin;
 80017b8:	2340      	movs	r3, #64	; 0x40
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80017c8:	230e      	movs	r3, #14
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IN_CH2L_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f001 fa7b 	bl	8002cd0 <HAL_GPIO_Init>
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40014000 	.word	0x40014000
 80017f0:	40014400 	.word	0x40014400

080017f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USART1_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_USART1_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USART1_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART1_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART1_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART1_UART_Init+0x58>)
 8001838:	f003 ff5c 	bl	80056f4 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f7ff fbaf 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000410 	.word	0x20000410
 8001850:	40013800 	.word	0x40013800

08001854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b096      	sub	sp, #88	; 0x58
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2234      	movs	r2, #52	; 0x34
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fc03 	bl	8006080 <memset>
  if(uartHandle->Instance==USART1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_UART_MspInit+0xa4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d135      	bne.n	80018f0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fbed 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800189c:	f7ff fb82 	bl	8000fa4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_UART_MspInit+0xa8>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_UART_MspInit+0xa8>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6613      	str	r3, [r2, #96]	; 0x60
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_UART_MspInit+0xa8>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_UART_MspInit+0xa8>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_UART_MspInit+0xa8>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_UART_MspInit+0xa8>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d0:	23c0      	movs	r3, #192	; 0xc0
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e0:	2307      	movs	r3, #7
 80018e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_UART_MspInit+0xac>)
 80018ec:	f001 f9f0 	bl	8002cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018f0:	bf00      	nop
 80018f2:	3758      	adds	r7, #88	; 0x58
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000400 	.word	0x48000400

08001904 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USB_PCD_Init+0x48>)
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <MX_USB_PCD_Init+0x4c>)
 800190c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_USB_PCD_Init+0x48>)
 8001910:	2208      	movs	r2, #8
 8001912:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <MX_USB_PCD_Init+0x48>)
 8001916:	2202      	movs	r2, #2
 8001918:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USB_PCD_Init+0x48>)
 800191c:	2202      	movs	r2, #2
 800191e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_USB_PCD_Init+0x48>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USB_PCD_Init+0x48>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_USB_PCD_Init+0x48>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USB_PCD_Init+0x48>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_USB_PCD_Init+0x48>)
 800193a:	f001 fb6d 	bl	8003018 <HAL_PCD_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001944:	f7ff fb2e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000494 	.word	0x20000494
 8001950:	40006800 	.word	0x40006800

08001954 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	; 0x58
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	2234      	movs	r2, #52	; 0x34
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f004 fb83 	bl	8006080 <memset>
  if(pcdHandle->Instance==USB)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_PCD_MspInit+0xac>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d138      	bne.n	80019f6 <HAL_PCD_MspInit+0xa2>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fb6c 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800199e:	f7ff fb01 	bl	8000fa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f001 f979 	bl	8002cd0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	; 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40006800 	.word	0x40006800
 8001a04:	40021000 	.word	0x40021000

08001a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a0c:	f7ff fb46 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f004 fb2b 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3a:	f7ff fa21 	bl	8000e80 <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a4c:	0800614c 	.word	0x0800614c
  ldr r2, =_sbss
 8001a50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a54:	20000794 	.word	0x20000794

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>

08001a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f001 f8f1 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 f80e 	bl	8001a8c <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e001      	b.n	8001a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7c:	f7ff fab6 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_InitTick+0x6c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d023      	beq.n	8001ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_InitTick+0x70>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_InitTick+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 f8fd 	bl	8002cb6 <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d809      	bhi.n	8001adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f001 f8c7 	bl	8002c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_InitTick+0x74>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e007      	b.n	8001aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e004      	b.n	8001aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e001      	b.n	8001aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000790 	.word	0x20000790

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000790 	.word	0x20000790

08001b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3360      	adds	r3, #96	; 0x60
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <LL_ADC_SetOffset+0x44>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	03fff000 	.word	0x03fff000

08001bf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3360      	adds	r3, #96	; 0x60
 8001c02:	461a      	mov	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3360      	adds	r3, #96	; 0x60
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	615a      	str	r2, [r3, #20]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3330      	adds	r3, #48	; 0x30
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	4413      	add	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	211f      	movs	r1, #31
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	f003 011f 	and.w	r1, r3, #31
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3314      	adds	r3, #20
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	0e5b      	lsrs	r3, r3, #25
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	0d1b      	lsrs	r3, r3, #20
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	2107      	movs	r1, #7
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	0d1b      	lsrs	r3, r3, #20
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0318 	and.w	r3, r3, #24
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	400b      	ands	r3, r1
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	0007ffff 	.word	0x0007ffff

08001d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6093      	str	r3, [r2, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <LL_ADC_IsEnabled+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_ADC_IsEnabled+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d101      	bne.n	8001e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e131      	b.n	8002102 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe ff17 	bl	8000ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff67 	bl	8001d98 <LL_ADC_IsDeepPowerDownEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff4d 	bl	8001d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff82 	bl	8001de8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d115      	bne.n	8001f16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff66 	bl	8001dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef4:	4b85      	ldr	r3, [pc, #532]	; (800210c <HAL_ADC_Init+0x288>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	4a85      	ldr	r2, [pc, #532]	; (8002110 <HAL_ADC_Init+0x28c>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff64 	bl	8001de8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f043 0210 	orr.w	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff75 	bl	8001e36 <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 80ca 	bne.w	80020f0 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 80c6 	bne.w	80020f0 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f6c:	f043 0202 	orr.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff49 	bl	8001e10 <LL_ADC_IsEnabled>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d110      	bne.n	8001fa6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f84:	4863      	ldr	r0, [pc, #396]	; (8002114 <HAL_ADC_Init+0x290>)
 8001f86:	f7ff ff43 	bl	8001e10 <LL_ADC_IsEnabled>
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4862      	ldr	r0, [pc, #392]	; (8002118 <HAL_ADC_Init+0x294>)
 8001f8e:	f7ff ff3f 	bl	8001e10 <LL_ADC_IsEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4323      	orrs	r3, r4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	485e      	ldr	r0, [pc, #376]	; (800211c <HAL_ADC_Init+0x298>)
 8001fa2:	f7ff fdcf 	bl	8001b44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7e5b      	ldrb	r3, [r3, #25]
 8001faa:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fb6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fbc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	045b      	lsls	r3, r3, #17
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_ADC_Init+0x29c>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	69b9      	ldr	r1, [r7, #24]
 800200e:	430b      	orrs	r3, r1
 8002010:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff0d 	bl	8001e36 <LL_ADC_REG_IsConversionOngoing>
 800201c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff1a 	bl	8001e5c <LL_ADC_INJ_IsConversionOngoing>
 8002028:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13d      	bne.n	80020ac <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d13a      	bne.n	80020ac <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800203a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002042:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002052:	f023 0302 	bic.w	r3, r3, #2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	430b      	orrs	r3, r1
 800205e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002066:	2b01      	cmp	r3, #1
 8002068:	d118      	bne.n	800209c <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800208c:	430a      	orrs	r2, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	e007      	b.n	80020ac <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10c      	bne.n	80020ce <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f023 010f 	bic.w	r1, r3, #15
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
 80020cc:	e007      	b.n	80020de <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 020f 	bic.w	r2, r2, #15
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
 80020ee:	e007      	b.n	8002100 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002100:	7ffb      	ldrb	r3, [r7, #31]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000
 8002110:	053e2d63 	.word	0x053e2d63
 8002114:	50040000 	.word	0x50040000
 8002118:	50040100 	.word	0x50040100
 800211c:	50040300 	.word	0x50040300
 8002120:	fff0c007 	.word	0xfff0c007

08002124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0b6      	sub	sp, #216	; 0xd8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x22>
 8002142:	2302      	movs	r3, #2
 8002144:	e3d3      	b.n	80028ee <HAL_ADC_ConfigChannel+0x7ca>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe6f 	bl	8001e36 <LL_ADC_REG_IsConversionOngoing>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 83b8 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d824      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	3b02      	subs	r3, #2
 800216e:	2b03      	cmp	r3, #3
 8002170:	d81b      	bhi.n	80021aa <HAL_ADC_ConfigChannel+0x86>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_ADC_ConfigChannel+0x54>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	08002191 	.word	0x08002191
 8002180:	08002199 	.word	0x08002199
 8002184:	080021a1 	.word	0x080021a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	220c      	movs	r2, #12
 800218c:	605a      	str	r2, [r3, #4]
          break;
 800218e:	e010      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2212      	movs	r2, #18
 8002194:	605a      	str	r2, [r3, #4]
          break;
 8002196:	e00c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2218      	movs	r2, #24
 800219c:	605a      	str	r2, [r3, #4]
          break;
 800219e:	e008      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	605a      	str	r2, [r3, #4]
          break;
 80021a8:	e003      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2206      	movs	r2, #6
 80021ae:	605a      	str	r2, [r3, #4]
          break;
 80021b0:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7ff fd5c 	bl	8001c7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe34 	bl	8001e36 <LL_ADC_REG_IsConversionOngoing>
 80021ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe40 	bl	8001e5c <LL_ADC_INJ_IsConversionOngoing>
 80021dc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 81c1 	bne.w	800256c <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 81bc 	bne.w	800256c <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021fc:	d10f      	bne.n	800221e <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	4619      	mov	r1, r3
 800220a:	f7ff fd63 	bl	8001cd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd1d 	bl	8001c56 <LL_ADC_SetSamplingTimeCommonConfig>
 800221c:	e00e      	b.n	800223c <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6819      	ldr	r1, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	461a      	mov	r2, r3
 800222c:	f7ff fd52 	bl	8001cd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fd0d 	bl	8001c56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	08db      	lsrs	r3, r3, #3
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d00a      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6919      	ldr	r1, [r3, #16]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800226e:	f7ff fc9d 	bl	8001bac <LL_ADC_SetOffset>
 8002272:	e17b      	b.n	800256c <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcba 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x17c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fcaf 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	e01e      	b.n	80022de <HAL_ADC_ConfigChannel+0x1ba>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fca4 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e004      	b.n	80022dc <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80022d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x1d2>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	0e9b      	lsrs	r3, r3, #26
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	e018      	b.n	8002328 <HAL_ADC_ConfigChannel+0x204>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800230a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800230e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e004      	b.n	8002328 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 800231e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002328:	429a      	cmp	r2, r3
 800232a:	d106      	bne.n	800233a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fc73 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fc57 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x242>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fc4c 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	e01e      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x280>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fc41 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800238c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e004      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8002398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x298>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	e018      	b.n	80023ee <HAL_ADC_ConfigChannel+0x2ca>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e004      	b.n	80023ee <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80023e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2101      	movs	r1, #1
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fc10 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2102      	movs	r1, #2
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fbf4 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_ADC_ConfigChannel+0x308>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fbe9 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	f003 021f 	and.w	r2, r3, #31
 800242a:	e01e      	b.n	800246a <HAL_ADC_ConfigChannel+0x346>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2102      	movs	r1, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fbde 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800244a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800244e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e004      	b.n	8002468 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 800245e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x35e>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0e9b      	lsrs	r3, r3, #26
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	e016      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x38c>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800249a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e004      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 80024a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d106      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fbaf 	bl	8001c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2103      	movs	r1, #3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fb93 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x3ca>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2103      	movs	r1, #3
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fb88 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	e017      	b.n	800251e <HAL_ADC_ConfigChannel+0x3fa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2103      	movs	r1, #3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fb7d 	bl	8001bf4 <LL_ADC_GetOffsetChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002508:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800250a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8002514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x412>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0e9b      	lsrs	r3, r3, #26
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	e011      	b.n	800255a <HAL_ADC_ConfigChannel+0x436>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002546:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e003      	b.n	800255a <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800255a:	429a      	cmp	r2, r3
 800255c:	d106      	bne.n	800256c <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	2103      	movs	r1, #3
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fb5a 	bl	8001c20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fc4d 	bl	8001e10 <LL_ADC_IsEnabled>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 813f 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	461a      	mov	r2, r3
 800258c:	f7ff fbce 	bl	8001d2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a8e      	ldr	r2, [pc, #568]	; (80027d0 <HAL_ADC_ConfigChannel+0x6ac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	f040 8130 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x4a0>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	bf94      	ite	ls
 80025bc:	2301      	movls	r3, #1
 80025be:	2300      	movhi	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e019      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x4d4>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e003      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80025e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	bf94      	ite	ls
 80025f2:	2301      	movls	r3, #1
 80025f4:	2300      	movhi	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d079      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x4f4>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	3301      	adds	r3, #1
 8002610:	069b      	lsls	r3, r3, #26
 8002612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002616:	e015      	b.n	8002644 <HAL_ADC_ConfigChannel+0x520>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002628:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800262a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e003      	b.n	800263c <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8002634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3301      	adds	r3, #1
 800263e:	069b      	lsls	r3, r3, #26
 8002640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x540>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	e017      	b.n	8002694 <HAL_ADC_ConfigChannel+0x570>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8002680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	ea42 0103 	orr.w	r1, r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x596>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	3301      	adds	r3, #1
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	051b      	lsls	r3, r3, #20
 80026b8:	e018      	b.n	80026ec <HAL_ADC_ConfigChannel+0x5c8>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80026d2:	2320      	movs	r3, #32
 80026d4:	e003      	b.n	80026de <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80026d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ec:	430b      	orrs	r3, r1
 80026ee:	e080      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <HAL_ADC_ConfigChannel+0x5e8>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	3301      	adds	r3, #1
 8002704:	069b      	lsls	r3, r3, #26
 8002706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800270a:	e015      	b.n	8002738 <HAL_ADC_ConfigChannel+0x614>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	069b      	lsls	r3, r3, #26
 8002734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x634>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	3301      	adds	r3, #1
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	e017      	b.n	8002788 <HAL_ADC_ConfigChannel+0x664>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	61fb      	str	r3, [r7, #28]
  return result;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8002770:	2320      	movs	r3, #32
 8002772:	e003      	b.n	800277c <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	ea42 0103 	orr.w	r1, r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x690>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	3b1e      	subs	r3, #30
 80027ac:	051b      	lsls	r3, r3, #20
 80027ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b2:	e01d      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x6cc>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	613b      	str	r3, [r7, #16]
  return result;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80027cc:	2320      	movs	r3, #32
 80027ce:	e005      	b.n	80027dc <HAL_ADC_ConfigChannel+0x6b8>
 80027d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	3b1e      	subs	r3, #30
 80027ea:	051b      	lsls	r3, r3, #20
 80027ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f0:	430b      	orrs	r3, r1
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	6892      	ldr	r2, [r2, #8]
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7ff fa6c 	bl	8001cd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d06c      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002808:	483c      	ldr	r0, [pc, #240]	; (80028fc <HAL_ADC_ConfigChannel+0x7d8>)
 800280a:	f7ff f9c1 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 800280e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_ADC_ConfigChannel+0x7dc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d127      	bne.n	800286c <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800281c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d121      	bne.n	800286c <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a35      	ldr	r2, [pc, #212]	; (8002904 <HAL_ADC_ConfigChannel+0x7e0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d157      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800283a:	4619      	mov	r1, r3
 800283c:	482f      	ldr	r0, [pc, #188]	; (80028fc <HAL_ADC_ConfigChannel+0x7d8>)
 800283e:	f7ff f994 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_ADC_ConfigChannel+0x7e4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_ADC_ConfigChannel+0x7e8>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800285c:	e002      	b.n	8002864 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f9      	bne.n	800285e <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800286a:	e03a      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_ADC_ConfigChannel+0x7ec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <HAL_ADC_ConfigChannel+0x77a>
 8002876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800287a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <HAL_ADC_ConfigChannel+0x7e0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d12a      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800288c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002894:	4619      	mov	r1, r3
 8002896:	4819      	ldr	r0, [pc, #100]	; (80028fc <HAL_ADC_ConfigChannel+0x7d8>)
 8002898:	f7ff f967 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800289c:	e021      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <HAL_ADC_ConfigChannel+0x7f0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d11c      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_ADC_ConfigChannel+0x7e0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c6:	4619      	mov	r1, r3
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <HAL_ADC_ConfigChannel+0x7d8>)
 80028ca:	f7ff f94e 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 80028ce:	e008      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	37d8      	adds	r7, #216	; 0xd8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	80080000 	.word	0x80080000
 80028fc:	50040300 	.word	0x50040300
 8002900:	c7520000 	.word	0xc7520000
 8002904:	50040000 	.word	0x50040000
 8002908:	20000000 	.word	0x20000000
 800290c:	053e2d63 	.word	0x053e2d63
 8002910:	cb840000 	.word	0xcb840000
 8002914:	80000001 	.word	0x80000001

08002918 <LL_ADC_IsEnabled>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <LL_ADC_IsEnabled+0x18>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <LL_ADC_IsEnabled+0x1a>
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_REG_IsConversionOngoing>:
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b04      	cmp	r3, #4
 8002950:	d101      	bne.n	8002956 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b09f      	sub	sp, #124	; 0x7c
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800297e:	2302      	movs	r3, #2
 8002980:	e089      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800298a:	2300      	movs	r3, #0
 800298c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800298e:	2300      	movs	r3, #0
 8002990:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a42      	ldr	r2, [pc, #264]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	e001      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e068      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffb9 	bl	800293e <LL_ADC_REG_IsConversionOngoing>
 80029cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ffb3 	bl	800293e <LL_ADC_REG_IsConversionOngoing>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14a      	bne.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d147      	bne.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80029e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d027      	beq.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a02:	035b      	lsls	r3, r3, #13
 8002a04:	430b      	orrs	r3, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a0c:	4824      	ldr	r0, [pc, #144]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a0e:	f7ff ff83 	bl	8002918 <LL_ADC_IsEnabled>
 8002a12:	4604      	mov	r4, r0
 8002a14:	4823      	ldr	r0, [pc, #140]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a16:	f7ff ff7f 	bl	8002918 <LL_ADC_IsEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4323      	orrs	r3, r4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d132      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a2a:	f023 030f 	bic.w	r3, r3, #15
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a3e:	e023      	b.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a4c:	4814      	ldr	r0, [pc, #80]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a4e:	f7ff ff63 	bl	8002918 <LL_ADC_IsEnabled>
 8002a52:	4604      	mov	r4, r0
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a56:	f7ff ff5f 	bl	8002918 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4323      	orrs	r3, r4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d112      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a6a:	f023 030f 	bic.w	r3, r3, #15
 8002a6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a72:	e009      	b.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a86:	e000      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	377c      	adds	r7, #124	; 0x7c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	50040000 	.word	0x50040000
 8002aa4:	50040100 	.word	0x50040100
 8002aa8:	50040300 	.word	0x50040300

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	; (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff29 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff3e 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff31 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa2 	bl	8002c08 <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cde:	e14e      	b.n	8002f7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8140 	beq.w	8002f78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d005      	beq.n	8002d10 <HAL_GPIO_Init+0x40>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d130      	bne.n	8002d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0201 	and.w	r2, r3, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d017      	beq.n	8002dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d123      	bne.n	8002e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 809a 	beq.w	8002f78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e44:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e50:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <HAL_GPIO_Init+0x2cc>)
 8002e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e5c:	4a50      	ldr	r2, [pc, #320]	; (8002fa0 <HAL_GPIO_Init+0x2d0>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e86:	d013      	beq.n	8002eb0 <HAL_GPIO_Init+0x1e0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a46      	ldr	r2, [pc, #280]	; (8002fa4 <HAL_GPIO_Init+0x2d4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_GPIO_Init+0x1dc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a45      	ldr	r2, [pc, #276]	; (8002fa8 <HAL_GPIO_Init+0x2d8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <HAL_GPIO_Init+0x1d8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a44      	ldr	r2, [pc, #272]	; (8002fac <HAL_GPIO_Init+0x2dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_GPIO_Init+0x1d4>
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e006      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	e004      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e002      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_GPIO_Init+0x1e2>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	f002 0203 	and.w	r2, r2, #3
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	4093      	lsls	r3, r2
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ec2:	4937      	ldr	r1, [pc, #220]	; (8002fa0 <HAL_GPIO_Init+0x2d0>)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f1e:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_GPIO_Init+0x2e0>)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f47f aea9 	bne.w	8002ce0 <HAL_GPIO_Init+0x10>
  }
}
 8002f8e:	bf00      	nop
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	48000400 	.word	0x48000400
 8002fa8:	48000800 	.word	0x48000800
 8002fac:	48000c00 	.word	0x48000c00
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43d9      	mvns	r1, r3
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	400b      	ands	r3, r1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b08b      	sub	sp, #44	; 0x2c
 800301c:	af06      	add	r7, sp, #24
 800301e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e109      	b.n	800323e <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe fc88 	bl	8001954 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2203      	movs	r2, #3
 8003048:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f002 ffb7 	bl	8005fc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	687e      	ldr	r6, [r7, #4]
 800305e:	466d      	mov	r5, sp
 8003060:	f106 0410 	add.w	r4, r6, #16
 8003064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800306c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003070:	1d33      	adds	r3, r6, #4
 8003072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f002 ff94 	bl	8005fa2 <USB_CoreInit>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0d8      	b.n	800323e <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f002 ffb1 	bl	8005ffa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e04d      	b.n	800313a <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3305      	adds	r3, #5
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3304      	adds	r3, #4
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	b298      	uxth	r0, r3
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	333a      	adds	r3, #58	; 0x3a
 80030de:	4602      	mov	r2, r0
 80030e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3307      	adds	r3, #7
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	333c      	adds	r3, #60	; 0x3c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	3340      	adds	r3, #64	; 0x40
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3344      	adds	r3, #68	; 0x44
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	3301      	adds	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	d3ac      	bcc.n	800309e <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e044      	b.n	80031d4 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	3301      	adds	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3b5      	bcc.n	800314a <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	687e      	ldr	r6, [r7, #4]
 80031e6:	466d      	mov	r5, sp
 80031e8:	f106 0410 	add.w	r4, r6, #16
 80031ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031f8:	1d33      	adds	r3, r6, #4
 80031fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fc:	6838      	ldr	r0, [r7, #0]
 80031fe:	f002 ff09 	bl	8006014 <USB_DevInit>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e014      	b.n	800323e <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d102      	bne.n	8003232 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f80a 	bl	8003246 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 ff0d 	bl	8006056 <USB_DevDisconnect>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003246 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800326a:	b29b      	uxth	r3, r3
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800327e:	b29b      	uxth	r3, r3
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40007000 	.word	0x40007000

080032b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c6:	d130      	bne.n	800332a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d4:	d038      	beq.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032de:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2232      	movs	r2, #50	; 0x32
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0c9b      	lsrs	r3, r3, #18
 80032f8:	3301      	adds	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fc:	e002      	b.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3b01      	subs	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	d102      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f2      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003324:	d110      	bne.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e00f      	b.n	800334a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	d007      	beq.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003340:	4a05      	ldr	r2, [pc, #20]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003346:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40007000 	.word	0x40007000
 800335c:	20000000 	.word	0x20000000
 8003360:	431bde83 	.word	0x431bde83

08003364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f000 bc4f 	b.w	8003c16 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003378:	4b97      	ldr	r3, [pc, #604]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003382:	4b95      	ldr	r3, [pc, #596]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80e6 	beq.w	8003566 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_RCC_OscConfig+0x4c>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	f040 808d 	bne.w	80034c2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	f040 8089 	bne.w	80034c2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033b0:	4b89      	ldr	r3, [pc, #548]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <HAL_RCC_OscConfig+0x66>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f000 bc26 	b.w	8003c16 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ce:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_RCC_OscConfig+0x80>
 80033da:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_OscConfig+0x8c>
 80033e4:	4b7c      	ldr	r3, [pc, #496]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d224      	bcs.n	800343e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fdd9 	bl	8003fb0 <RCC_SetFlashLatencyFromMSIRange>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f000 bc06 	b.w	8003c16 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340a:	4b73      	ldr	r3, [pc, #460]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a72      	ldr	r2, [pc, #456]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003410:	f043 0308 	orr.w	r3, r3, #8
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	496d      	ldr	r1, [pc, #436]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003428:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4968      	ldr	r1, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	e025      	b.n	800348a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800343e:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a65      	ldr	r2, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003444:	f043 0308 	orr.w	r3, r3, #8
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	4960      	ldr	r1, [pc, #384]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800345c:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	495b      	ldr	r1, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fd98 	bl	8003fb0 <RCC_SetFlashLatencyFromMSIRange>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e3c5      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800348a:	f000 fccd 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	4950      	ldr	r1, [pc, #320]	; (80035dc <HAL_RCC_OscConfig+0x278>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	4a4e      	ldr	r2, [pc, #312]	; (80035e0 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034aa:	4b4e      	ldr	r3, [pc, #312]	; (80035e4 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe faec 	bl	8001a8c <HAL_InitTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d052      	beq.n	8003564 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	e3a9      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d032      	beq.n	8003530 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a42      	ldr	r2, [pc, #264]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034d6:	f7fe fb29 	bl	8001b2c <HAL_GetTick>
 80034da:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034de:	f7fe fb25 	bl	8001b2c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e392      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a35      	ldr	r2, [pc, #212]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003502:	f043 0308 	orr.w	r3, r3, #8
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	4930      	ldr	r1, [pc, #192]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351a:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	492b      	ldr	r1, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
 800352e:	e01a      	b.n	8003566 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800353c:	f7fe faf6 	bl	8001b2c <HAL_GetTick>
 8003540:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003544:	f7fe faf2 	bl	8001b2c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e35f      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x1e0>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d073      	beq.n	800365a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d005      	beq.n	8003584 <HAL_RCC_OscConfig+0x220>
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d10e      	bne.n	800359c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d063      	beq.n	8003658 <HAL_RCC_OscConfig+0x2f4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d15f      	bne.n	8003658 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e33c      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_OscConfig+0x250>
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e025      	b.n	8003600 <HAL_RCC_OscConfig+0x29c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035bc:	d114      	bne.n	80035e8 <HAL_RCC_OscConfig+0x284>
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a02      	ldr	r2, [pc, #8]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e013      	b.n	8003600 <HAL_RCC_OscConfig+0x29c>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	080060f0 	.word	0x080060f0
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000004 	.word	0x20000004
 80035e8:	4b8f      	ldr	r3, [pc, #572]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a8e      	ldr	r2, [pc, #568]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b8c      	ldr	r3, [pc, #560]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a8b      	ldr	r2, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe fa90 	bl	8001b2c <HAL_GetTick>
 800360c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fa8c 	bl	8001b2c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e2f9      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x2ac>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fa7c 	bl	8001b2c <HAL_GetTick>
 8003634:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fa78 	bl	8001b2c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e2e5      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364a:	4b77      	ldr	r3, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x2d4>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d060      	beq.n	8003728 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x314>
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d116      	bne.n	80036a6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003678:	4b6b      	ldr	r3, [pc, #428]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_OscConfig+0x32c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e2c2      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	4962      	ldr	r1, [pc, #392]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a4:	e040      	b.n	8003728 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d023      	beq.n	80036f6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ae:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5d      	ldr	r2, [pc, #372]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fe fa37 	bl	8001b2c <HAL_GetTick>
 80036be:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fe fa33 	bl	8001b2c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e2a0      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d4:	4b54      	ldr	r3, [pc, #336]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b51      	ldr	r3, [pc, #324]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	494e      	ldr	r1, [pc, #312]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
 80036f4:	e018      	b.n	8003728 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe fa13 	bl	8001b2c <HAL_GetTick>
 8003706:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370a:	f7fe fa0f 	bl	8001b2c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e27c      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8082 	beq.w	800383a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d05f      	beq.n	80037fe <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800373e:	4b3a      	ldr	r3, [pc, #232]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003744:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	429a      	cmp	r2, r3
 8003752:	d037      	beq.n	80037c4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e254      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01b      	beq.n	80037ae <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003786:	f7fe f9d1 	bl	8001b2c <HAL_GetTick>
 800378a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378e:	f7fe f9cd 	bl	8001b2c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b11      	cmp	r3, #17
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e23a      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ef      	bne.n	800378e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b4:	f023 0210 	bic.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	491a      	ldr	r1, [pc, #104]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c4:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fe f9aa 	bl	8001b2c <HAL_GetTick>
 80037d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037dc:	f7fe f9a6 	bl	8001b2c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b11      	cmp	r3, #17
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e213      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ef      	beq.n	80037dc <HAL_RCC_OscConfig+0x478>
 80037fc:	e01d      	b.n	800383a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	4a08      	ldr	r2, [pc, #32]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fe f98d 	bl	8001b2c <HAL_GetTick>
 8003812:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fe f989 	bl	8001b2c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b11      	cmp	r3, #17
 8003822:	d903      	bls.n	800382c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1f6      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
 8003828:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800382c:	4ba9      	ldr	r3, [pc, #676]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 800382e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ed      	bne.n	8003816 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80bd 	beq.w	80039c2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800384e:	4ba1      	ldr	r3, [pc, #644]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10e      	bne.n	8003878 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	4b9e      	ldr	r3, [pc, #632]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	4a9d      	ldr	r2, [pc, #628]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6593      	str	r3, [r2, #88]	; 0x58
 8003866:	4b9b      	ldr	r3, [pc, #620]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003878:	4b97      	ldr	r3, [pc, #604]	; (8003ad8 <HAL_RCC_OscConfig+0x774>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d118      	bne.n	80038b6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b94      	ldr	r3, [pc, #592]	; (8003ad8 <HAL_RCC_OscConfig+0x774>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a93      	ldr	r2, [pc, #588]	; (8003ad8 <HAL_RCC_OscConfig+0x774>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003890:	f7fe f94c 	bl	8001b2c <HAL_GetTick>
 8003894:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003898:	f7fe f948 	bl	8001b2c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1b5      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038aa:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <HAL_RCC_OscConfig+0x774>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02c      	beq.n	800391c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80038c2:	4b84      	ldr	r3, [pc, #528]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	497f      	ldr	r1, [pc, #508]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038e8:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	4a79      	ldr	r2, [pc, #484]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038f8:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	4a75      	ldr	r2, [pc, #468]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003908:	e018      	b.n	800393c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800390a:	4b72      	ldr	r3, [pc, #456]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	4a70      	ldr	r2, [pc, #448]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800391a:	e00f      	b.n	800393c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800391c:	4b6d      	ldr	r3, [pc, #436]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	4a6c      	ldr	r2, [pc, #432]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800392c:	4b69      	ldr	r3, [pc, #420]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a68      	ldr	r2, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fe f8f2 	bl	8001b2c <HAL_GetTick>
 8003948:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fe f8ee 	bl	8001b2c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e159      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ed      	beq.n	800394c <HAL_RCC_OscConfig+0x5e8>
 8003970:	e01d      	b.n	80039ae <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fe f8db 	bl	8001b2c <HAL_GetTick>
 8003976:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fe f8d7 	bl	8001b2c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e142      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ed      	bne.n	800397a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800399e:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	4a4b      	ldr	r2, [pc, #300]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	4a46      	ldr	r2, [pc, #280]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80039bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80039d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039dc:	4a3d      	ldr	r2, [pc, #244]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7fe f8a1 	bl	8001b2c <HAL_GetTick>
 80039ea:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ee:	f7fe f89d 	bl	8001b2c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e10a      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a00:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ef      	beq.n	80039ee <HAL_RCC_OscConfig+0x68a>
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a10:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a16:	4a2f      	ldr	r2, [pc, #188]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe f884 	bl	8001b2c <HAL_GetTick>
 8003a24:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a28:	f7fe f880 	bl	8001b2c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0ed      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ef      	bne.n	8003a28 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80e1 	beq.w	8003c14 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	f040 80b5 	bne.w	8003bc6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d124      	bne.n	8003aba <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11b      	bne.n	8003aba <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d113      	bne.n	8003aba <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d05f      	beq.n	8003b7a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	d05a      	beq.n	8003b76 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_RCC_OscConfig+0x770>)
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003acc:	f7fe f82e 	bl	8001b2c <HAL_GetTick>
 8003ad0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad2:	e00c      	b.n	8003aee <HAL_RCC_OscConfig+0x78a>
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe f826 	bl	8001b2c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e093      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aee:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <HAL_RCC_OscConfig+0x8c0>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b14:	0212      	lsls	r2, r2, #8
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b1c:	0852      	lsrs	r2, r2, #1
 8003b1e:	3a01      	subs	r2, #1
 8003b20:	0552      	lsls	r2, r2, #21
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0652      	lsls	r2, r2, #25
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	493b      	ldr	r1, [pc, #236]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b36:	4b3a      	ldr	r3, [pc, #232]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a39      	ldr	r2, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b42:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a36      	ldr	r2, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b4e:	f7fd ffed 	bl	8001b2c <HAL_GetTick>
 8003b52:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fd ffe9 	bl	8001b2c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e056      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b74:	e04e      	b.n	8003c14 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e04d      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d146      	bne.n	8003c14 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b90:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b9e:	f7fd ffc5 	bl	8001b2c <HAL_GetTick>
 8003ba2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd ffc1 	bl	8001b2c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e02e      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x842>
 8003bc4:	e026      	b.n	8003c14 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d021      	beq.n	8003c10 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd ffa8 	bl	8001b2c <HAL_GetTick>
 8003bdc:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd ffa4 	bl	8001b2c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e011      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_RCC_OscConfig+0x8bc>)
 8003c04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c08:	f023 0303 	bic.w	r3, r3, #3
 8003c0c:	60d3      	str	r3, [r2, #12]
 8003c0e:	e001      	b.n	8003c14 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	f99f808c 	.word	0xf99f808c

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0e7      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b75      	ldr	r3, [pc, #468]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4970      	ldr	r1, [pc, #448]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cf      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d908      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4960      	ldr	r1, [pc, #384]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04c      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d121      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0a6      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e09a      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cde:	4b4e      	ldr	r3, [pc, #312]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e08e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e086      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b46      	ldr	r3, [pc, #280]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4943      	ldr	r1, [pc, #268]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd ff0c 	bl	8001b2c <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd ff08 	bl	8001b2c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e06e      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d208      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	492b      	ldr	r1, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d210      	bcs.n	8003d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 0207 	bic.w	r2, r3, #7
 8003d84:	4923      	ldr	r1, [pc, #140]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e036      	b.n	8003e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	4918      	ldr	r1, [pc, #96]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4910      	ldr	r1, [pc, #64]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f000 f824 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	490b      	ldr	r1, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1f4>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1fc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fe43 	bl	8001a8c <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	080060f0 	.word	0x080060f0
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d121      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d11e      	bne.n	8003e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e68:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e005      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d102      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d134      	bne.n	8003f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xa6>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8003ecc:	e005      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed0:	617b      	str	r3, [r7, #20]
      break;
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ed6:	617b      	str	r3, [r7, #20]
      break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	617b      	str	r3, [r7, #20]
      break;
 8003ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	fb03 f202 	mul.w	r2, r3, r2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	0e5b      	lsrs	r3, r3, #25
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f20:	69bb      	ldr	r3, [r7, #24]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08006108 	.word	0x08006108
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	007a1200 	.word	0x007a1200

08003f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000000 	.word	0x20000000

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08006100 	.word	0x08006100

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f88:	f7ff ffda 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	08006100 	.word	0x08006100

08003fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fc8:	f7ff f968 	bl	800329c <HAL_PWREx_GetVoltageRange>
 8003fcc:	6178      	str	r0, [r7, #20]
 8003fce:	e014      	b.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	4a24      	ldr	r2, [pc, #144]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6593      	str	r3, [r2, #88]	; 0x58
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fe8:	f7ff f958 	bl	800329c <HAL_PWREx_GetVoltageRange>
 8003fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d10b      	bne.n	800401a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d919      	bls.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2ba0      	cmp	r3, #160	; 0xa0
 800400c:	d902      	bls.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800400e:	2302      	movs	r3, #2
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	e013      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e010      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d902      	bls.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004020:	2303      	movs	r3, #3
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e00a      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d102      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800402c:	2302      	movs	r3, #2
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e004      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d101      	bne.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004038:	2301      	movs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	4909      	ldr	r1, [pc, #36]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	40022000 	.word	0x40022000

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004078:	2300      	movs	r3, #0
 800407a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800407c:	2300      	movs	r3, #0
 800407e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 809e 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004092:	4b46      	ldr	r3, [pc, #280]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b40      	ldr	r3, [pc, #256]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	4a3f      	ldr	r2, [pc, #252]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6593      	str	r3, [r2, #88]	; 0x58
 80040b4:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a39      	ldr	r2, [pc, #228]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80040ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040d0:	f7fd fd2c 	bl	8001b2c <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040d6:	e009      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d8:	f7fd fd28 	bl	8001b2c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d902      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	74fb      	strb	r3, [r7, #19]
        break;
 80040ea:	e005      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d15a      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01e      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	429a      	cmp	r2, r3
 8004118:	d019      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004146:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fce8 	bl	8001b2c <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	e00b      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd fce4 	bl	8001b2c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d902      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	74fb      	strb	r3, [r7, #19]
            break;
 8004176:	e006      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ec      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4904      	ldr	r1, [pc, #16]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041a2:	e009      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b8:	7c7b      	ldrb	r3, [r7, #17]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041be:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	4a6d      	ldr	r2, [pc, #436]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d6:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f023 0203 	bic.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4964      	ldr	r1, [pc, #400]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f8:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 020c 	bic.w	r2, r3, #12
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	495c      	ldr	r1, [pc, #368]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800421a:	4b57      	ldr	r3, [pc, #348]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4953      	ldr	r1, [pc, #332]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800423c:	4b4e      	ldr	r3, [pc, #312]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	494b      	ldr	r1, [pc, #300]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425e:	4b46      	ldr	r3, [pc, #280]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4942      	ldr	r1, [pc, #264]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	493a      	ldr	r1, [pc, #232]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a2:	4b35      	ldr	r3, [pc, #212]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	4931      	ldr	r1, [pc, #196]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	4929      	ldr	r1, [pc, #164]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	4920      	ldr	r1, [pc, #128]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	4918      	ldr	r1, [pc, #96]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d105      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435e:	d105      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800436c:	7cbb      	ldrb	r3, [r7, #18]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000

0800437c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd f96a 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fd96 	bl	8004eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d001      	beq.n	8004444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e033      	b.n	80044ac <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_TIM_Base_Start+0x8c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_TIM_Base_Start+0x3e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d004      	beq.n	800446a <HAL_TIM_Base_Start+0x3e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_TIM_Base_Start+0x90>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d115      	bne.n	8004496 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_TIM_Base_Start+0x94>)
 8004472:	4013      	ands	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d015      	beq.n	80044a8 <HAL_TIM_Base_Start+0x7c>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004482:	d011      	beq.n	80044a8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	e008      	b.n	80044a8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e000      	b.n	80044aa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40014000 	.word	0x40014000
 80044c0:	00010007 	.word	0x00010007

080044c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d001      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e03b      	b.n	8004554 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_TIM_Base_Start_IT+0x9c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x4e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d004      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x4e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <HAL_TIM_Base_Start_IT+0xa0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d115      	bne.n	800453e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <HAL_TIM_Base_Start_IT+0xa4>)
 800451a:	4013      	ands	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b06      	cmp	r3, #6
 8004522:	d015      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x8c>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d011      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453c:	e008      	b.n	8004550 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e000      	b.n	8004552 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014000 	.word	0x40014000
 8004568:	00010007 	.word	0x00010007

0800456c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e049      	b.n	8004612 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc ffda 	bl	800154c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f000 fc9e 	bl	8004eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x24>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e03c      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d109      	bne.n	800465a <HAL_TIM_PWM_Start+0x3e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e02f      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x58>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e022      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d109      	bne.n	800468e <HAL_TIM_PWM_Start+0x72>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e015      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b10      	cmp	r3, #16
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_PWM_Start+0x8c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e008      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07e      	b.n	80047c0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_PWM_Start+0xb6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d0:	e023      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_PWM_Start+0xc6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e0:	e01b      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start+0xd6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f0:	e013      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0xe6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004700:	e00b      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b10      	cmp	r3, #16
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0xf6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	e003      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fec4 	bl	80054b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <HAL_TIM_PWM_Start+0x1ac>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIM_PWM_Start+0x12a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a25      	ldr	r2, [pc, #148]	; (80047cc <HAL_TIM_PWM_Start+0x1b0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIM_PWM_Start+0x12a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_TIM_PWM_Start+0x1b4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_TIM_PWM_Start+0x12e>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_TIM_PWM_Start+0x130>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800475e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIM_PWM_Start+0x1ac>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIM_PWM_Start+0x162>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d004      	beq.n	800477e <HAL_TIM_PWM_Start+0x162>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_TIM_PWM_Start+0x1b0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d115      	bne.n	80047aa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_TIM_PWM_Start+0x1b8>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d015      	beq.n	80047bc <HAL_TIM_PWM_Start+0x1a0>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d011      	beq.n	80047bc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	e008      	b.n	80047bc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e000      	b.n	80047be <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	00010007 	.word	0x00010007

080047d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fe60 	bl	80054b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a39      	ldr	r2, [pc, #228]	; (80048dc <HAL_TIM_PWM_Stop+0x104>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIM_PWM_Stop+0x36>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <HAL_TIM_PWM_Stop+0x108>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_PWM_Stop+0x36>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a36      	ldr	r2, [pc, #216]	; (80048e4 <HAL_TIM_PWM_Stop+0x10c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_Stop+0x3a>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_TIM_PWM_Stop+0x3c>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d017      	beq.n	8004848 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <HAL_TIM_PWM_Stop+0x70>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	f240 4344 	movw	r3, #1092	; 0x444
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d107      	bne.n	8004848 <HAL_TIM_PWM_Stop+0x70>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <HAL_TIM_PWM_Stop+0xa0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a1a      	ldr	r2, [r3, #32]
 800485e:	f240 4344 	movw	r3, #1092	; 0x444
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <HAL_TIM_PWM_Stop+0xa0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <HAL_TIM_PWM_Stop+0xb0>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004886:	e023      	b.n	80048d0 <HAL_TIM_PWM_Stop+0xf8>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d104      	bne.n	8004898 <HAL_TIM_PWM_Stop+0xc0>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004896:	e01b      	b.n	80048d0 <HAL_TIM_PWM_Stop+0xf8>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d104      	bne.n	80048a8 <HAL_TIM_PWM_Stop+0xd0>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a6:	e013      	b.n	80048d0 <HAL_TIM_PWM_Stop+0xf8>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d104      	bne.n	80048b8 <HAL_TIM_PWM_Stop+0xe0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048b6:	e00b      	b.n	80048d0 <HAL_TIM_PWM_Stop+0xf8>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d104      	bne.n	80048c8 <HAL_TIM_PWM_Stop+0xf0>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c6:	e003      	b.n	80048d0 <HAL_TIM_PWM_Stop+0xf8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400

080048e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e097      	b.n	8004a2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fc fe73 	bl	80015fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800492c:	f023 0307 	bic.w	r3, r3, #7
 8004930:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f000 fad5 	bl	8004eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	4313      	orrs	r3, r2
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004988:	f023 030c 	bic.w	r3, r3, #12
 800498c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	4313      	orrs	r3, r2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	011a      	lsls	r2, r3, #4
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	031b      	lsls	r3, r3, #12
 80049b8:	4313      	orrs	r3, r2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	4313      	orrs	r3, r2
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0202 	mvn.w	r2, #2
 8004a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa1a 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fa0c 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fa1d 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0204 	mvn.w	r2, #4
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9f0 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9e2 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9f3 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0208 	mvn.w	r2, #8
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9c6 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9b8 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f9c9 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0210 	mvn.w	r2, #16
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2208      	movs	r2, #8
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f99c 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f98e 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f99f 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0201 	mvn.w	r2, #1
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc f9e2 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d10e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fd74 	bl	80056cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf2:	d10e      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fd67 	bl	80056e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d10e      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f94d 	bl	8004ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d10e      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0220 	mvn.w	r2, #32
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fd27 	bl	80056b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e0ff      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b14      	cmp	r3, #20
 8004c9e:	f200 80f0 	bhi.w	8004e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ca2:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004e83 	.word	0x08004e83
 8004cb0:	08004e83 	.word	0x08004e83
 8004cb4:	08004e83 	.word	0x08004e83
 8004cb8:	08004d3d 	.word	0x08004d3d
 8004cbc:	08004e83 	.word	0x08004e83
 8004cc0:	08004e83 	.word	0x08004e83
 8004cc4:	08004e83 	.word	0x08004e83
 8004cc8:	08004d7f 	.word	0x08004d7f
 8004ccc:	08004e83 	.word	0x08004e83
 8004cd0:	08004e83 	.word	0x08004e83
 8004cd4:	08004e83 	.word	0x08004e83
 8004cd8:	08004dbf 	.word	0x08004dbf
 8004cdc:	08004e83 	.word	0x08004e83
 8004ce0:	08004e83 	.word	0x08004e83
 8004ce4:	08004e83 	.word	0x08004e83
 8004ce8:	08004e01 	.word	0x08004e01
 8004cec:	08004e83 	.word	0x08004e83
 8004cf0:	08004e83 	.word	0x08004e83
 8004cf4:	08004e83 	.word	0x08004e83
 8004cf8:	08004e41 	.word	0x08004e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f956 	bl	8004fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	619a      	str	r2, [r3, #24]
      break;
 8004d3a:	e0a5      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f9b2 	bl	80050ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	619a      	str	r2, [r3, #24]
      break;
 8004d7c:	e084      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fa0b 	bl	80051a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0208 	orr.w	r2, r2, #8
 8004d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0204 	bic.w	r2, r2, #4
 8004da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69d9      	ldr	r1, [r3, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	61da      	str	r2, [r3, #28]
      break;
 8004dbc:	e064      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa63 	bl	8005290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	021a      	lsls	r2, r3, #8
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	61da      	str	r2, [r3, #28]
      break;
 8004dfe:	e043      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 faa0 	bl	800534c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0208 	orr.w	r2, r2, #8
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0204 	bic.w	r2, r2, #4
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e3e:	e023      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fad8 	bl	80053fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	021a      	lsls	r2, r3, #8
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e80:	e002      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop

08004e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a2a      	ldr	r2, [pc, #168]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_Base_SetConfig+0x20>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d108      	bne.n	8004f1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x52>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x52>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <TIM_Base_SetConfig+0xc0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x52>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <TIM_Base_SetConfig+0xc4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0xa0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <TIM_Base_SetConfig+0xc0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0xa0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0a      	ldr	r2, [pc, #40]	; (8004fb0 <TIM_Base_SetConfig+0xc4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400

08004fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 0302 	bic.w	r3, r3, #2
 8005000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_OC1_SetConfig+0xec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC1_SetConfig+0x70>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_OC1_SetConfig+0xf0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC1_SetConfig+0x70>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <TIM_OC1_SetConfig+0xf4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10c      	bne.n	800503e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0308 	bic.w	r3, r3, #8
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <TIM_OC1_SetConfig+0xec>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC1_SetConfig+0xa2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <TIM_OC1_SetConfig+0xf0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC1_SetConfig+0xa2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <TIM_OC1_SetConfig+0xf4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d111      	bne.n	800507a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800505c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400

080050ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f023 0210 	bic.w	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0320 	bic.w	r3, r3, #32
 80050fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a22      	ldr	r2, [pc, #136]	; (8005194 <TIM_OC2_SetConfig+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10d      	bne.n	800512c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <TIM_OC2_SetConfig+0xe8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_OC2_SetConfig+0x98>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a18      	ldr	r2, [pc, #96]	; (8005198 <TIM_OC2_SetConfig+0xec>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC2_SetConfig+0x98>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <TIM_OC2_SetConfig+0xf0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d113      	bne.n	800516c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400

080051a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a21      	ldr	r2, [pc, #132]	; (8005284 <TIM_OC3_SetConfig+0xe4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10d      	bne.n	800521e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <TIM_OC3_SetConfig+0xe4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <TIM_OC3_SetConfig+0x96>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a17      	ldr	r2, [pc, #92]	; (8005288 <TIM_OC3_SetConfig+0xe8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <TIM_OC3_SetConfig+0x96>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <TIM_OC3_SetConfig+0xec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d113      	bne.n	800525e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400

08005290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a14      	ldr	r2, [pc, #80]	; (8005340 <TIM_OC4_SetConfig+0xb0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC4_SetConfig+0x74>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <TIM_OC4_SetConfig+0xb4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC4_SetConfig+0x74>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <TIM_OC4_SetConfig+0xb8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400

0800534c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <TIM_OC5_SetConfig+0xa4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <TIM_OC5_SetConfig+0x6a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <TIM_OC5_SetConfig+0xa8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC5_SetConfig+0x6a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <TIM_OC5_SetConfig+0xac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d109      	bne.n	80053ca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400

080053fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	051b      	lsls	r3, r3, #20
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a14      	ldr	r2, [pc, #80]	; (80054a4 <TIM_OC6_SetConfig+0xa8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC6_SetConfig+0x6c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <TIM_OC6_SetConfig+0xac>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC6_SetConfig+0x6c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a12      	ldr	r2, [pc, #72]	; (80054ac <TIM_OC6_SetConfig+0xb0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d109      	bne.n	800547c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400

080054b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	2201      	movs	r2, #1
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	431a      	orrs	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005510:	2302      	movs	r3, #2
 8005512:	e04f      	b.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005544:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557c:	d004      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40014000 	.word	0x40014000

080055c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e060      	b.n	80056a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d115      	bne.n	8005694 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	051b      	lsls	r3, r3, #20
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40012c00 	.word	0x40012c00

080056b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e040      	b.n	8005788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc f89c 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f82c 	bl	8005790 <UART_SetConfig>
 8005738:	4603      	mov	r3, r0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e022      	b.n	8005788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa7a 	bl	8005c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800575e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800576e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fb01 	bl	8005d88 <UART_CheckIdleState>
 8005786:	4603      	mov	r3, r0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08a      	sub	sp, #40	; 0x28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b9e      	ldr	r3, [pc, #632]	; (8005a38 <UART_SetConfig+0x2a8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a93      	ldr	r2, [pc, #588]	; (8005a3c <UART_SetConfig+0x2ac>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	4313      	orrs	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a8a      	ldr	r2, [pc, #552]	; (8005a40 <UART_SetConfig+0x2b0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d126      	bne.n	8005868 <UART_SetConfig+0xd8>
 800581a:	4b8a      	ldr	r3, [pc, #552]	; (8005a44 <UART_SetConfig+0x2b4>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b03      	cmp	r3, #3
 8005826:	d81b      	bhi.n	8005860 <UART_SetConfig+0xd0>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0xa0>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005841 	.word	0x08005841
 8005834:	08005851 	.word	0x08005851
 8005838:	08005849 	.word	0x08005849
 800583c:	08005859 	.word	0x08005859
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005846:	e0ab      	b.n	80059a0 <UART_SetConfig+0x210>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584e:	e0a7      	b.n	80059a0 <UART_SetConfig+0x210>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e0a3      	b.n	80059a0 <UART_SetConfig+0x210>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e09f      	b.n	80059a0 <UART_SetConfig+0x210>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e09b      	b.n	80059a0 <UART_SetConfig+0x210>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a76      	ldr	r2, [pc, #472]	; (8005a48 <UART_SetConfig+0x2b8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d138      	bne.n	80058e4 <UART_SetConfig+0x154>
 8005872:	4b74      	ldr	r3, [pc, #464]	; (8005a44 <UART_SetConfig+0x2b4>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d82d      	bhi.n	80058dc <UART_SetConfig+0x14c>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0xf8>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c2:	e06d      	b.n	80059a0 <UART_SetConfig+0x210>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ca:	e069      	b.n	80059a0 <UART_SetConfig+0x210>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d2:	e065      	b.n	80059a0 <UART_SetConfig+0x210>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e061      	b.n	80059a0 <UART_SetConfig+0x210>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e05d      	b.n	80059a0 <UART_SetConfig+0x210>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a58      	ldr	r2, [pc, #352]	; (8005a4c <UART_SetConfig+0x2bc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d125      	bne.n	800593a <UART_SetConfig+0x1aa>
 80058ee:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <UART_SetConfig+0x2b4>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d016      	beq.n	800592a <UART_SetConfig+0x19a>
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d818      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d00a      	beq.n	800591a <UART_SetConfig+0x18a>
 8005904:	2b20      	cmp	r3, #32
 8005906:	d814      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <UART_SetConfig+0x182>
 800590c:	2b10      	cmp	r3, #16
 800590e:	d008      	beq.n	8005922 <UART_SetConfig+0x192>
 8005910:	e00f      	b.n	8005932 <UART_SetConfig+0x1a2>
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005918:	e042      	b.n	80059a0 <UART_SetConfig+0x210>
 800591a:	2302      	movs	r3, #2
 800591c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005920:	e03e      	b.n	80059a0 <UART_SetConfig+0x210>
 8005922:	2304      	movs	r3, #4
 8005924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005928:	e03a      	b.n	80059a0 <UART_SetConfig+0x210>
 800592a:	2308      	movs	r3, #8
 800592c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005930:	e036      	b.n	80059a0 <UART_SetConfig+0x210>
 8005932:	2310      	movs	r3, #16
 8005934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005938:	e032      	b.n	80059a0 <UART_SetConfig+0x210>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a3f      	ldr	r2, [pc, #252]	; (8005a3c <UART_SetConfig+0x2ac>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d12a      	bne.n	800599a <UART_SetConfig+0x20a>
 8005944:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <UART_SetConfig+0x2b4>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800594e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005952:	d01a      	beq.n	800598a <UART_SetConfig+0x1fa>
 8005954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005958:	d81b      	bhi.n	8005992 <UART_SetConfig+0x202>
 800595a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595e:	d00c      	beq.n	800597a <UART_SetConfig+0x1ea>
 8005960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005964:	d815      	bhi.n	8005992 <UART_SetConfig+0x202>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <UART_SetConfig+0x1e2>
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d008      	beq.n	8005982 <UART_SetConfig+0x1f2>
 8005970:	e00f      	b.n	8005992 <UART_SetConfig+0x202>
 8005972:	2300      	movs	r3, #0
 8005974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005978:	e012      	b.n	80059a0 <UART_SetConfig+0x210>
 800597a:	2302      	movs	r3, #2
 800597c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005980:	e00e      	b.n	80059a0 <UART_SetConfig+0x210>
 8005982:	2304      	movs	r3, #4
 8005984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005988:	e00a      	b.n	80059a0 <UART_SetConfig+0x210>
 800598a:	2308      	movs	r3, #8
 800598c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005990:	e006      	b.n	80059a0 <UART_SetConfig+0x210>
 8005992:	2310      	movs	r3, #16
 8005994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005998:	e002      	b.n	80059a0 <UART_SetConfig+0x210>
 800599a:	2310      	movs	r3, #16
 800599c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <UART_SetConfig+0x2ac>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	f040 808a 	bne.w	8005ac0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d824      	bhi.n	80059fe <UART_SetConfig+0x26e>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x22c>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ef 	.word	0x080059ef
 80059d0:	080059ff 	.word	0x080059ff
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	080059ff 	.word	0x080059ff
 80059dc:	080059f7 	.word	0x080059f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fe faba 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
        break;
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <UART_SetConfig+0x2c0>)
 80059ea:	61fb      	str	r3, [r7, #28]
        break;
 80059ec:	e00d      	b.n	8005a0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ee:	f7fe fa1b 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 80059f2:	61f8      	str	r0, [r7, #28]
        break;
 80059f4:	e009      	b.n	8005a0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fa:	61fb      	str	r3, [r7, #28]
        break;
 80059fc:	e005      	b.n	8005a0a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8109 	beq.w	8005c24 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d305      	bcc.n	8005a2e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d912      	bls.n	8005a54 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a34:	e0f6      	b.n	8005c24 <UART_SetConfig+0x494>
 8005a36:	bf00      	nop
 8005a38:	efff69f3 	.word	0xefff69f3
 8005a3c:	40008000 	.word	0x40008000
 8005a40:	40013800 	.word	0x40013800
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40004400 	.word	0x40004400
 8005a4c:	40004800 	.word	0x40004800
 8005a50:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2200      	movs	r2, #0
 8005a58:	461c      	mov	r4, r3
 8005a5a:	4615      	mov	r5, r2
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	022b      	lsls	r3, r5, #8
 8005a66:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a6a:	0222      	lsls	r2, r4, #8
 8005a6c:	68f9      	ldr	r1, [r7, #12]
 8005a6e:	6849      	ldr	r1, [r1, #4]
 8005a70:	0849      	lsrs	r1, r1, #1
 8005a72:	2000      	movs	r0, #0
 8005a74:	4688      	mov	r8, r1
 8005a76:	4681      	mov	r9, r0
 8005a78:	eb12 0a08 	adds.w	sl, r2, r8
 8005a7c:	eb43 0b09 	adc.w	fp, r3, r9
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8e:	4650      	mov	r0, sl
 8005a90:	4659      	mov	r1, fp
 8005a92:	f7fa fb9b 	bl	80001cc <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aa4:	d308      	bcc.n	8005ab8 <UART_SetConfig+0x328>
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aac:	d204      	bcs.n	8005ab8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	e0b5      	b.n	8005c24 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005abe:	e0b1      	b.n	8005c24 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac8:	d15d      	bne.n	8005b86 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d827      	bhi.n	8005b22 <UART_SetConfig+0x392>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0x348>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b05 	.word	0x08005b05
 8005ae0:	08005b0d 	.word	0x08005b0d
 8005ae4:	08005b23 	.word	0x08005b23
 8005ae8:	08005b13 	.word	0x08005b13
 8005aec:	08005b23 	.word	0x08005b23
 8005af0:	08005b23 	.word	0x08005b23
 8005af4:	08005b23 	.word	0x08005b23
 8005af8:	08005b1b 	.word	0x08005b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005afc:	f7fe fa2c 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005b00:	61f8      	str	r0, [r7, #28]
        break;
 8005b02:	e014      	b.n	8005b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b04:	f7fe fa3e 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8005b08:	61f8      	str	r0, [r7, #28]
        break;
 8005b0a:	e010      	b.n	8005b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <UART_SetConfig+0x4b0>)
 8005b0e:	61fb      	str	r3, [r7, #28]
        break;
 8005b10:	e00d      	b.n	8005b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b12:	f7fe f989 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8005b16:	61f8      	str	r0, [r7, #28]
        break;
 8005b18:	e009      	b.n	8005b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	61fb      	str	r3, [r7, #28]
        break;
 8005b20:	e005      	b.n	8005b2e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d077      	beq.n	8005c24 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	005a      	lsls	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	441a      	add	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b0f      	cmp	r3, #15
 8005b4e:	d916      	bls.n	8005b7e <UART_SetConfig+0x3ee>
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b56:	d212      	bcs.n	8005b7e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f023 030f 	bic.w	r3, r3, #15
 8005b60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	8afa      	ldrh	r2, [r7, #22]
 8005b7a:	60da      	str	r2, [r3, #12]
 8005b7c:	e052      	b.n	8005c24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b84:	e04e      	b.n	8005c24 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d827      	bhi.n	8005bde <UART_SetConfig+0x44e>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <UART_SetConfig+0x404>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	08005bdf 	.word	0x08005bdf
 8005ba4:	08005bcf 	.word	0x08005bcf
 8005ba8:	08005bdf 	.word	0x08005bdf
 8005bac:	08005bdf 	.word	0x08005bdf
 8005bb0:	08005bdf 	.word	0x08005bdf
 8005bb4:	08005bd7 	.word	0x08005bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fe f9ce 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	61f8      	str	r0, [r7, #28]
        break;
 8005bbe:	e014      	b.n	8005bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc0:	f7fe f9e0 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8005bc4:	61f8      	str	r0, [r7, #28]
        break;
 8005bc6:	e010      	b.n	8005bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc8:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <UART_SetConfig+0x4b0>)
 8005bca:	61fb      	str	r3, [r7, #28]
        break;
 8005bcc:	e00d      	b.n	8005bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bce:	f7fe f92b 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8005bd2:	61f8      	str	r0, [r7, #28]
        break;
 8005bd4:	e009      	b.n	8005bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bda:	61fb      	str	r3, [r7, #28]
        break;
 8005bdc:	e005      	b.n	8005bea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005be8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d019      	beq.n	8005c24 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	085a      	lsrs	r2, r3, #1
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	441a      	add	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b0f      	cmp	r3, #15
 8005c08:	d909      	bls.n	8005c1e <UART_SetConfig+0x48e>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d205      	bcs.n	8005c1e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e002      	b.n	8005c24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3728      	adds	r7, #40	; 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3e:	bf00      	nop
 8005c40:	00f42400 	.word	0x00f42400

08005c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01a      	beq.n	8005d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d42:	d10a      	bne.n	8005d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d98:	f7fb fec8 	bl	8001b2c <HAL_GetTick>
 8005d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d10e      	bne.n	8005dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f82d 	bl	8005e1a <UART_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e023      	b.n	8005e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d10e      	bne.n	8005df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f817 	bl	8005e1a <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e00d      	b.n	8005e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b09c      	sub	sp, #112	; 0x70
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2a:	e0a5      	b.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	f000 80a1 	beq.w	8005f78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7fb fe79 	bl	8001b2c <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d13e      	bne.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e60:	667b      	str	r3, [r7, #100]	; 0x64
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e6      	bne.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	663b      	str	r3, [r7, #96]	; 0x60
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e5      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e067      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d04f      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee6:	d147      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e6      	bne.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	613b      	str	r3, [r7, #16]
   return(result);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f44:	623a      	str	r2, [r7, #32]
 8005f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	69f9      	ldr	r1, [r7, #28]
 8005f4a:	6a3a      	ldr	r2, [r7, #32]
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e5      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e010      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	f43f af4a 	beq.w	8005e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3770      	adds	r7, #112	; 0x70
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	f107 0014 	add.w	r0, r7, #20
 8005fb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	b004      	add	sp, #16
 8005fc2:	4770      	bx	lr

08005fc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fcc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005fd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006014:	b084      	sub	sp, #16
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	f107 0014 	add.w	r0, r7, #20
 8006022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	b004      	add	sp, #16
 8006054:	4770      	bx	lr

08006056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006064:	b29b      	uxth	r3, r3
 8006066:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <memset>:
 8006080:	4402      	add	r2, r0
 8006082:	4603      	mov	r3, r0
 8006084:	4293      	cmp	r3, r2
 8006086:	d100      	bne.n	800608a <memset+0xa>
 8006088:	4770      	bx	lr
 800608a:	f803 1b01 	strb.w	r1, [r3], #1
 800608e:	e7f9      	b.n	8006084 <memset+0x4>

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	; (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	; (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	; (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	; (80060d4 <__libc_init_array+0x44>)
 80060a4:	f000 f818 	bl	80060d8 <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	08006140 	.word	0x08006140
 80060cc:	08006140 	.word	0x08006140
 80060d0:	08006140 	.word	0x08006140
 80060d4:	08006148 	.word	0x08006148

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
